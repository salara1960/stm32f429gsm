
atb_f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000157f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a0  080159a0  080159a0  000259a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016e40  08016e40  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08016e40  08016e40  00026e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016e48  08016e48  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016e48  08016e48  00026e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016e4c  08016e4c  00026e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08016e50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003019c  2**0
                  CONTENTS
 10 .bss          00002f34  2000019c  2000019c  0003019c  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  200030d0  200030d0  0003019c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027be3  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052f2  00000000  00000000  00057daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002098  00000000  00000000  0005d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ea8  00000000  00000000  0005f140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da8a  00000000  00000000  00060fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b765  00000000  00000000  0008ea72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0862  00000000  00000000  000ba1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001aaa39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008fc0  00000000  00000000  001aaa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015988 	.word	0x08015988

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a0 	.word	0x200001a0
 80001ec:	08015988 	.word	0x08015988

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bf 	b.w	8000640 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b974 	b.w	8000640 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468e      	mov	lr, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14d      	bne.n	800041a <__udivmoddi4+0xaa>
 800037e:	428a      	cmp	r2, r1
 8000380:	4694      	mov	ip, r2
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0xe8>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b152      	cbz	r2, 80003a0 <__udivmoddi4+0x30>
 800038a:	fa01 f302 	lsl.w	r3, r1, r2
 800038e:	f1c2 0120 	rsb	r1, r2, #32
 8000392:	fa20 f101 	lsr.w	r1, r0, r1
 8000396:	fa0c fc02 	lsl.w	ip, ip, r2
 800039a:	ea41 0e03 	orr.w	lr, r1, r3
 800039e:	4094      	lsls	r4, r2
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	0c21      	lsrs	r1, r4, #16
 80003a6:	fbbe f6f8 	udiv	r6, lr, r8
 80003aa:	fa1f f78c 	uxth.w	r7, ip
 80003ae:	fb08 e316 	mls	r3, r8, r6, lr
 80003b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003b6:	fb06 f107 	mul.w	r1, r6, r7
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003c6:	f080 811f 	bcs.w	8000608 <__udivmoddi4+0x298>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 811c 	bls.w	8000608 <__udivmoddi4+0x298>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb00 f707 	mul.w	r7, r0, r7
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x92>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	f080 810a 	bcs.w	800060c <__udivmoddi4+0x29c>
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	f240 8107 	bls.w	800060c <__udivmoddi4+0x29c>
 80003fe:	4464      	add	r4, ip
 8000400:	3802      	subs	r0, #2
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	2600      	movs	r6, #0
 800040a:	b11d      	cbz	r5, 8000414 <__udivmoddi4+0xa4>
 800040c:	40d4      	lsrs	r4, r2
 800040e:	2300      	movs	r3, #0
 8000410:	e9c5 4300 	strd	r4, r3, [r5]
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0xc2>
 800041e:	2d00      	cmp	r5, #0
 8000420:	f000 80ef 	beq.w	8000602 <__udivmoddi4+0x292>
 8000424:	2600      	movs	r6, #0
 8000426:	e9c5 0100 	strd	r0, r1, [r5]
 800042a:	4630      	mov	r0, r6
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	fab3 f683 	clz	r6, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d14a      	bne.n	80004d0 <__udivmoddi4+0x160>
 800043a:	428b      	cmp	r3, r1
 800043c:	d302      	bcc.n	8000444 <__udivmoddi4+0xd4>
 800043e:	4282      	cmp	r2, r0
 8000440:	f200 80f9 	bhi.w	8000636 <__udivmoddi4+0x2c6>
 8000444:	1a84      	subs	r4, r0, r2
 8000446:	eb61 0303 	sbc.w	r3, r1, r3
 800044a:	2001      	movs	r0, #1
 800044c:	469e      	mov	lr, r3
 800044e:	2d00      	cmp	r5, #0
 8000450:	d0e0      	beq.n	8000414 <__udivmoddi4+0xa4>
 8000452:	e9c5 4e00 	strd	r4, lr, [r5]
 8000456:	e7dd      	b.n	8000414 <__udivmoddi4+0xa4>
 8000458:	b902      	cbnz	r2, 800045c <__udivmoddi4+0xec>
 800045a:	deff      	udf	#255	; 0xff
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	f040 8092 	bne.w	800058a <__udivmoddi4+0x21a>
 8000466:	eba1 010c 	sub.w	r1, r1, ip
 800046a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046e:	fa1f fe8c 	uxth.w	lr, ip
 8000472:	2601      	movs	r6, #1
 8000474:	0c20      	lsrs	r0, r4, #16
 8000476:	fbb1 f3f7 	udiv	r3, r1, r7
 800047a:	fb07 1113 	mls	r1, r7, r3, r1
 800047e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000482:	fb0e f003 	mul.w	r0, lr, r3
 8000486:	4288      	cmp	r0, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x12c>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x12a>
 8000494:	4288      	cmp	r0, r1
 8000496:	f200 80cb 	bhi.w	8000630 <__udivmoddi4+0x2c0>
 800049a:	4643      	mov	r3, r8
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1110 	mls	r1, r7, r0, r1
 80004a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ac:	fb0e fe00 	mul.w	lr, lr, r0
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x156>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004bc:	d202      	bcs.n	80004c4 <__udivmoddi4+0x154>
 80004be:	45a6      	cmp	lr, r4
 80004c0:	f200 80bb 	bhi.w	800063a <__udivmoddi4+0x2ca>
 80004c4:	4608      	mov	r0, r1
 80004c6:	eba4 040e 	sub.w	r4, r4, lr
 80004ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ce:	e79c      	b.n	800040a <__udivmoddi4+0x9a>
 80004d0:	f1c6 0720 	rsb	r7, r6, #32
 80004d4:	40b3      	lsls	r3, r6
 80004d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004da:	ea4c 0c03 	orr.w	ip, ip, r3
 80004de:	fa20 f407 	lsr.w	r4, r0, r7
 80004e2:	fa01 f306 	lsl.w	r3, r1, r6
 80004e6:	431c      	orrs	r4, r3
 80004e8:	40f9      	lsrs	r1, r7
 80004ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ee:	fa00 f306 	lsl.w	r3, r0, r6
 80004f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004f6:	0c20      	lsrs	r0, r4, #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	fb08 f00e 	mul.w	r0, r8, lr
 8000508:	4288      	cmp	r0, r1
 800050a:	fa02 f206 	lsl.w	r2, r2, r6
 800050e:	d90b      	bls.n	8000528 <__udivmoddi4+0x1b8>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000518:	f080 8088 	bcs.w	800062c <__udivmoddi4+0x2bc>
 800051c:	4288      	cmp	r0, r1
 800051e:	f240 8085 	bls.w	800062c <__udivmoddi4+0x2bc>
 8000522:	f1a8 0802 	sub.w	r8, r8, #2
 8000526:	4461      	add	r1, ip
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	b2a4      	uxth	r4, r4
 800052c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000530:	fb09 1110 	mls	r1, r9, r0, r1
 8000534:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	458e      	cmp	lr, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x1e2>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000548:	d26c      	bcs.n	8000624 <__udivmoddi4+0x2b4>
 800054a:	458e      	cmp	lr, r1
 800054c:	d96a      	bls.n	8000624 <__udivmoddi4+0x2b4>
 800054e:	3802      	subs	r0, #2
 8000550:	4461      	add	r1, ip
 8000552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000556:	fba0 9402 	umull	r9, r4, r0, r2
 800055a:	eba1 010e 	sub.w	r1, r1, lr
 800055e:	42a1      	cmp	r1, r4
 8000560:	46c8      	mov	r8, r9
 8000562:	46a6      	mov	lr, r4
 8000564:	d356      	bcc.n	8000614 <__udivmoddi4+0x2a4>
 8000566:	d053      	beq.n	8000610 <__udivmoddi4+0x2a0>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x212>
 800056a:	ebb3 0208 	subs.w	r2, r3, r8
 800056e:	eb61 010e 	sbc.w	r1, r1, lr
 8000572:	fa01 f707 	lsl.w	r7, r1, r7
 8000576:	fa22 f306 	lsr.w	r3, r2, r6
 800057a:	40f1      	lsrs	r1, r6
 800057c:	431f      	orrs	r7, r3
 800057e:	e9c5 7100 	strd	r7, r1, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	fa0c fc02 	lsl.w	ip, ip, r2
 8000594:	fa21 f303 	lsr.w	r3, r1, r3
 8000598:	4091      	lsls	r1, r2
 800059a:	4301      	orrs	r1, r0
 800059c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a0:	fa1f fe8c 	uxth.w	lr, ip
 80005a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005a8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005b2:	fb00 f60e 	mul.w	r6, r0, lr
 80005b6:	429e      	cmp	r6, r3
 80005b8:	fa04 f402 	lsl.w	r4, r4, r2
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x260>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005c6:	d22f      	bcs.n	8000628 <__udivmoddi4+0x2b8>
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d92d      	bls.n	8000628 <__udivmoddi4+0x2b8>
 80005cc:	3802      	subs	r0, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	b289      	uxth	r1, r1
 80005d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005d8:	fb07 3316 	mls	r3, r7, r6, r3
 80005dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e0:	fb06 f30e 	mul.w	r3, r6, lr
 80005e4:	428b      	cmp	r3, r1
 80005e6:	d908      	bls.n	80005fa <__udivmoddi4+0x28a>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005f0:	d216      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d914      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005f6:	3e02      	subs	r6, #2
 80005f8:	4461      	add	r1, ip
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000600:	e738      	b.n	8000474 <__udivmoddi4+0x104>
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e705      	b.n	8000414 <__udivmoddi4+0xa4>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e3      	b.n	80003d4 <__udivmoddi4+0x64>
 800060c:	4618      	mov	r0, r3
 800060e:	e6f8      	b.n	8000402 <__udivmoddi4+0x92>
 8000610:	454b      	cmp	r3, r9
 8000612:	d2a9      	bcs.n	8000568 <__udivmoddi4+0x1f8>
 8000614:	ebb9 0802 	subs.w	r8, r9, r2
 8000618:	eb64 0e0c 	sbc.w	lr, r4, ip
 800061c:	3801      	subs	r0, #1
 800061e:	e7a3      	b.n	8000568 <__udivmoddi4+0x1f8>
 8000620:	4646      	mov	r6, r8
 8000622:	e7ea      	b.n	80005fa <__udivmoddi4+0x28a>
 8000624:	4620      	mov	r0, r4
 8000626:	e794      	b.n	8000552 <__udivmoddi4+0x1e2>
 8000628:	4640      	mov	r0, r8
 800062a:	e7d1      	b.n	80005d0 <__udivmoddi4+0x260>
 800062c:	46d0      	mov	r8, sl
 800062e:	e77b      	b.n	8000528 <__udivmoddi4+0x1b8>
 8000630:	3b02      	subs	r3, #2
 8000632:	4461      	add	r1, ip
 8000634:	e732      	b.n	800049c <__udivmoddi4+0x12c>
 8000636:	4630      	mov	r0, r6
 8000638:	e709      	b.n	800044e <__udivmoddi4+0xde>
 800063a:	4464      	add	r4, ip
 800063c:	3802      	subs	r0, #2
 800063e:	e742      	b.n	80004c6 <__udivmoddi4+0x156>

08000640 <__aeabi_idiv0>:
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000648:	f3bf 8f4f 	dsb	sy
}
 800064c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <__NVIC_SystemReset+0x24>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000656:	4904      	ldr	r1, [pc, #16]	; (8000668 <__NVIC_SystemReset+0x24>)
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_SystemReset+0x28>)
 800065a:	4313      	orrs	r3, r2
 800065c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800065e:	f3bf 8f4f 	dsb	sy
}
 8000662:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <__NVIC_SystemReset+0x20>
 8000668:	e000ed00 	.word	0xe000ed00
 800066c:	05fa0004 	.word	0x05fa0004

08000670 <initSRECQ>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//----------------------------------------------------------------------------------------
bool initSRECQ(s_recq_t *q)//s_recq_t recq;
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	q->put = q->get = 0;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	709a      	strb	r2, [r3, #2]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	789a      	ldrb	r2, [r3, #2]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < MAX_SQREC; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e01b      	b.n	80006c4 <initSRECQ+0x54>
		q->rec[i].id = i;
 800068c:	7bfa      	ldrb	r2, [r7, #15]
 800068e:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	440b      	add	r3, r1
 800069c:	3303      	adds	r3, #3
 800069e:	4602      	mov	r2, r0
 80006a0:	701a      	strb	r2, [r3, #0]
		q->rec[i].adr = NULL;
 80006a2:	7bfa      	ldrb	r2, [r7, #15]
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	711a      	strb	r2, [r3, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	715a      	strb	r2, [r3, #5]
 80006b6:	2200      	movs	r2, #0
 80006b8:	719a      	strb	r2, [r3, #6]
 80006ba:	2200      	movs	r2, #0
 80006bc:	71da      	strb	r2, [r3, #7]
	for (uint8_t i = 0; i < MAX_SQREC; i++) {
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	3301      	adds	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b0f      	cmp	r3, #15
 80006c8:	d9e0      	bls.n	800068c <initSRECQ+0x1c>
	}
	return true;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <putSRECQ>:
		q->rec[i].adr = NULL;
	}
}
//----------------------------------------------------------------------------------------
int8_t putSRECQ(char *adr, s_recq_t *q)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 80006e2:	23ff      	movs	r3, #255	; 0xff
 80006e4:	73fb      	strb	r3, [r7, #15]

	if (q->rec[q->put].adr == NULL) {
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	4619      	mov	r1, r3
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	4413      	add	r3, r2
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d121      	bne.n	8000740 <putSRECQ+0x68>
		q->rec[q->put].adr = adr;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	4619      	mov	r1, r3
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	460b      	mov	r3, r1
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	4413      	add	r3, r2
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	605a      	str	r2, [r3, #4]
		ret = q->rec[q->put].id;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	4619      	mov	r1, r3
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	460b      	mov	r3, r1
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	4413      	add	r3, r2
 8000720:	3303      	adds	r3, #3
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	73fb      	strb	r3, [r7, #15]
		q->put++;   if (q->put >= MAX_SQREC) q->put = 0;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	3301      	adds	r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	705a      	strb	r2, [r3, #1]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	785b      	ldrb	r3, [r3, #1]
 8000736:	2b0f      	cmp	r3, #15
 8000738:	d902      	bls.n	8000740 <putSRECQ+0x68>
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2200      	movs	r2, #0
 800073e:	705a      	strb	r2, [r3, #1]
	}

	return ret;
 8000740:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <getSRECQ>:
//----------------------------------------------------------------------------------------
int8_t getSRECQ(char *dat, s_recq_t *q)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
int8_t ret = -1;
 800075a:	23ff      	movs	r3, #255	; 0xff
 800075c:	73fb      	strb	r3, [r7, #15]
int len = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]

	if (q->rec[q->get].adr != NULL) {
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	789b      	ldrb	r3, [r3, #2]
 8000766:	4619      	mov	r1, r3
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	460b      	mov	r3, r1
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	440b      	add	r3, r1
 8000770:	4413      	add	r3, r2
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d042      	beq.n	80007fe <getSRECQ+0xae>
		len = strlen(q->rec[q->get].adr);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	789b      	ldrb	r3, [r3, #2]
 800077c:	4619      	mov	r1, r3
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	460b      	mov	r3, r1
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	4413      	add	r3, r2
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd30 	bl	80001f0 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	60bb      	str	r3, [r7, #8]
		ret = q->rec[q->get].id;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	789b      	ldrb	r3, [r3, #2]
 8000798:	4619      	mov	r1, r3
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	460b      	mov	r3, r1
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	440b      	add	r3, r1
 80007a2:	4413      	add	r3, r2
 80007a4:	3303      	adds	r3, #3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	73fb      	strb	r3, [r7, #15]
		memcpy(dat, q->rec[q->get].adr, len);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	789b      	ldrb	r3, [r3, #2]
 80007ae:	4619      	mov	r1, r3
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	460b      	mov	r3, r1
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	4413      	add	r3, r2
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f014 fb41 	bl	8014e48 <memcpy>
		free(q->rec[q->get].adr);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	789b      	ldrb	r3, [r3, #2]
 80007ca:	4619      	mov	r1, r3
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	460b      	mov	r3, r1
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	4413      	add	r3, r2
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	f014 fb2d 	bl	8014e38 <free>
		q->rec[q->get].adr = NULL;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	789b      	ldrb	r3, [r3, #2]
 80007e2:	4619      	mov	r1, r3
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	460b      	mov	r3, r1
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	440b      	add	r3, r1
 80007ec:	4413      	add	r3, r2
 80007ee:	2200      	movs	r2, #0
 80007f0:	711a      	strb	r2, [r3, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	715a      	strb	r2, [r3, #5]
 80007f6:	2200      	movs	r2, #0
 80007f8:	719a      	strb	r2, [r3, #6]
 80007fa:	2200      	movs	r2, #0
 80007fc:	71da      	strb	r2, [r3, #7]
	}

	if (ret >= 0) {
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db11      	blt.n	800082a <getSRECQ+0xda>
		*(dat + len) = '\0';
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
		q->get++;   if (q->get >= MAX_SQREC) q->get = 0;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	3301      	adds	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	709a      	strb	r2, [r3, #2]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d902      	bls.n	800082a <getSRECQ+0xda>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	2200      	movs	r2, #0
 8000828:	709a      	strb	r2, [r3, #2]
	}

	return ret;
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <fsErrName>:
//*****************************************************************************************
//
#ifdef SET_FAT_SD
	//------------------------------------------------------------------------------------
	static char *fsErrName(int fr)
	{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
		switch (fr) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	2b14      	cmp	r3, #20
 8000846:	d855      	bhi.n	80008f4 <fsErrName+0xbc>
 8000848:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <fsErrName+0x18>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	080008a5 	.word	0x080008a5
 8000854:	080008a9 	.word	0x080008a9
 8000858:	080008ad 	.word	0x080008ad
 800085c:	080008b1 	.word	0x080008b1
 8000860:	080008b5 	.word	0x080008b5
 8000864:	080008b9 	.word	0x080008b9
 8000868:	080008bd 	.word	0x080008bd
 800086c:	080008c1 	.word	0x080008c1
 8000870:	080008c5 	.word	0x080008c5
 8000874:	080008c5 	.word	0x080008c5
 8000878:	080008c9 	.word	0x080008c9
 800087c:	080008cd 	.word	0x080008cd
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d5 	.word	0x080008d5
 8000888:	080008d9 	.word	0x080008d9
 800088c:	080008dd 	.word	0x080008dd
 8000890:	080008e1 	.word	0x080008e1
 8000894:	080008e5 	.word	0x080008e5
 8000898:	080008e9 	.word	0x080008e9
 800089c:	080008ed 	.word	0x080008ed
 80008a0:	080008f1 	.word	0x080008f1
		    case -1://FR_ERR:
		    	return "Error";
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <fsErrName+0xcc>)
 80008a6:	e026      	b.n	80008f6 <fsErrName+0xbe>
			case FR_OK:				// (0) Succeeded
				return "Succeeded";
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <fsErrName+0xd0>)
 80008aa:	e024      	b.n	80008f6 <fsErrName+0xbe>
			case FR_DISK_ERR://			(1) A hard error occurred in the low level disk I/O layer
				return "Error disk I/O";
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <fsErrName+0xd4>)
 80008ae:	e022      	b.n	80008f6 <fsErrName+0xbe>
			case FR_INT_ERR://			(2) Assertion failed
				return "Assertion failed";
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <fsErrName+0xd8>)
 80008b2:	e020      	b.n	80008f6 <fsErrName+0xbe>
			case FR_NOT_READY://		(3) The physical drive cannot work
				return "Drive not ready";
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <fsErrName+0xdc>)
 80008b6:	e01e      	b.n	80008f6 <fsErrName+0xbe>
			case FR_NO_FILE://			(4) Could not find the file
				return "No file";
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <fsErrName+0xe0>)
 80008ba:	e01c      	b.n	80008f6 <fsErrName+0xbe>
			case FR_NO_PATH://			(5) Could not find the path
				return "No path";
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <fsErrName+0xe4>)
 80008be:	e01a      	b.n	80008f6 <fsErrName+0xbe>
			case FR_INVALID_NAME://		(6) The path name format is invalid
				return "Path error";
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <fsErrName+0xe8>)
 80008c2:	e018      	b.n	80008f6 <fsErrName+0xbe>
			case FR_DENIED://			(7) Access denied due to prohibited access or directory full
			case FR_EXIST://			(8) Access denied due to prohibited access
				return "Access denied";
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <fsErrName+0xec>)
 80008c6:	e016      	b.n	80008f6 <fsErrName+0xbe>
			case FR_INVALID_OBJECT://	(9) The file/directory object is invalid
				return "Invalid file/dir";
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <fsErrName+0xf0>)
 80008ca:	e014      	b.n	80008f6 <fsErrName+0xbe>
			case FR_WRITE_PROTECTED://	(10) The physical drive is write protected
				return "Write protected";
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <fsErrName+0xf4>)
 80008ce:	e012      	b.n	80008f6 <fsErrName+0xbe>
			case FR_INVALID_DRIVE://	(11) The logical drive number is invalid
				return "Invalid drive number";
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <fsErrName+0xf8>)
 80008d2:	e010      	b.n	80008f6 <fsErrName+0xbe>
			case FR_NOT_ENABLED://		(12) The volume has no work area
				return "Volume no area";
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <fsErrName+0xfc>)
 80008d6:	e00e      	b.n	80008f6 <fsErrName+0xbe>
			case FR_NO_FILESYSTEM://	(13) There is no valid FAT volume
				return "Volume has't filesystem";
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <fsErrName+0x100>)
 80008da:	e00c      	b.n	80008f6 <fsErrName+0xbe>
			case FR_MKFS_ABORTED://		(14) The f_mkfs() aborted due to any problem
				return "f_mkfs() aborted";
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <fsErrName+0x104>)
 80008de:	e00a      	b.n	80008f6 <fsErrName+0xbe>
			case FR_TIMEOUT://			(15) Could not get a grant to access the volume within defined period
				return "Timeout access";
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <fsErrName+0x108>)
 80008e2:	e008      	b.n	80008f6 <fsErrName+0xbe>
			case FR_LOCKED://			(16) The operation is rejected according to the file sharing policy
				return "File locked";
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <fsErrName+0x10c>)
 80008e6:	e006      	b.n	80008f6 <fsErrName+0xbe>
			case FR_NOT_ENOUGH_CORE://	(17) LFN working buffer could not be allocated
				return "Allocated buf error";
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <fsErrName+0x110>)
 80008ea:	e004      	b.n	80008f6 <fsErrName+0xbe>
			case FR_TOO_MANY_OPEN_FILES://	(18) Number of open files > _FS_LOCK
				return "Open file limit";
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <fsErrName+0x114>)
 80008ee:	e002      	b.n	80008f6 <fsErrName+0xbe>
			case FR_INVALID_PARAMETER://	(19) Given parameter is invalid
				return "Invalid parameter";
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <fsErrName+0x118>)
 80008f2:	e000      	b.n	80008f6 <fsErrName+0xbe>
		}
		return "Unknown error";
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <fsErrName+0x11c>)
	}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	080159b0 	.word	0x080159b0
 8000908:	080159b8 	.word	0x080159b8
 800090c:	080159c4 	.word	0x080159c4
 8000910:	080159d4 	.word	0x080159d4
 8000914:	080159e8 	.word	0x080159e8
 8000918:	080159f8 	.word	0x080159f8
 800091c:	08015a00 	.word	0x08015a00
 8000920:	08015a08 	.word	0x08015a08
 8000924:	08015a14 	.word	0x08015a14
 8000928:	08015a24 	.word	0x08015a24
 800092c:	08015a38 	.word	0x08015a38
 8000930:	08015a48 	.word	0x08015a48
 8000934:	08015a60 	.word	0x08015a60
 8000938:	08015a70 	.word	0x08015a70
 800093c:	08015a88 	.word	0x08015a88
 8000940:	08015a9c 	.word	0x08015a9c
 8000944:	08015aac 	.word	0x08015aac
 8000948:	08015ab8 	.word	0x08015ab8
 800094c:	08015acc 	.word	0x08015acc
 8000950:	08015adc 	.word	0x08015adc
 8000954:	08015af0 	.word	0x08015af0

08000958 <attrName>:
	//------------------------------------------------------------------------------------------
	static char *attrName(uint8_t attr)
	{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
		switch (attr) {
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3b01      	subs	r3, #1
 8000966:	2b1f      	cmp	r3, #31
 8000968:	d84c      	bhi.n	8000a04 <attrName+0xac>
 800096a:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <attrName+0x18>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	080009f1 	.word	0x080009f1
 8000974:	080009f5 	.word	0x080009f5
 8000978:	08000a05 	.word	0x08000a05
 800097c:	080009f9 	.word	0x080009f9
 8000980:	08000a05 	.word	0x08000a05
 8000984:	08000a05 	.word	0x08000a05
 8000988:	08000a05 	.word	0x08000a05
 800098c:	08000a05 	.word	0x08000a05
 8000990:	08000a05 	.word	0x08000a05
 8000994:	08000a05 	.word	0x08000a05
 8000998:	08000a05 	.word	0x08000a05
 800099c:	08000a05 	.word	0x08000a05
 80009a0:	08000a05 	.word	0x08000a05
 80009a4:	08000a05 	.word	0x08000a05
 80009a8:	08000a05 	.word	0x08000a05
 80009ac:	080009fd 	.word	0x080009fd
 80009b0:	08000a05 	.word	0x08000a05
 80009b4:	08000a05 	.word	0x08000a05
 80009b8:	08000a05 	.word	0x08000a05
 80009bc:	08000a05 	.word	0x08000a05
 80009c0:	08000a05 	.word	0x08000a05
 80009c4:	08000a05 	.word	0x08000a05
 80009c8:	08000a05 	.word	0x08000a05
 80009cc:	08000a05 	.word	0x08000a05
 80009d0:	08000a05 	.word	0x08000a05
 80009d4:	08000a05 	.word	0x08000a05
 80009d8:	08000a05 	.word	0x08000a05
 80009dc:	08000a05 	.word	0x08000a05
 80009e0:	08000a05 	.word	0x08000a05
 80009e4:	08000a05 	.word	0x08000a05
 80009e8:	08000a05 	.word	0x08000a05
 80009ec:	08000a01 	.word	0x08000a01
			case AM_RDO://	0x01	/* Read only */
				return "Read only";
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <attrName+0xbc>)
 80009f2:	e008      	b.n	8000a06 <attrName+0xae>
			case AM_HID://	0x02	/* Hidden */
				return "Hidden";
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <attrName+0xc0>)
 80009f6:	e006      	b.n	8000a06 <attrName+0xae>
			case AM_SYS://	0x04	/* System */
				return "System";
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <attrName+0xc4>)
 80009fa:	e004      	b.n	8000a06 <attrName+0xae>
			case AM_DIR://	0x10	/* Directory */
				return "Directory";
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <attrName+0xc8>)
 80009fe:	e002      	b.n	8000a06 <attrName+0xae>
			case AM_ARC://	0x20	/* Archive */
				return "Archive";
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <attrName+0xcc>)
 8000a02:	e000      	b.n	8000a06 <attrName+0xae>
			default : return "Unknown";
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <attrName+0xd0>)
		}
	}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	08015b00 	.word	0x08015b00
 8000a18:	08015b0c 	.word	0x08015b0c
 8000a1c:	08015b14 	.word	0x08015b14
 8000a20:	08015b1c 	.word	0x08015b1c
 8000a24:	08015b28 	.word	0x08015b28
 8000a28:	08015b30 	.word	0x08015b30

08000a2c <fsName>:
	//------------------------------------------------------------------------------------------
	static char *fsName(uint8_t type)
	{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
		switch (type) {
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	2b07      	cmp	r3, #7
 8000a3c:	d81c      	bhi.n	8000a78 <fsName+0x4c>
 8000a3e:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <fsName+0x18>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000a65 	.word	0x08000a65
 8000a48:	08000a69 	.word	0x08000a69
 8000a4c:	08000a79 	.word	0x08000a79
 8000a50:	08000a6d 	.word	0x08000a6d
 8000a54:	08000a79 	.word	0x08000a79
 8000a58:	08000a79 	.word	0x08000a79
 8000a5c:	08000a71 	.word	0x08000a71
 8000a60:	08000a75 	.word	0x08000a75
			case FM_FAT://	 0x01
				return "FM_FAT";
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <fsName+0x5c>)
 8000a66:	e008      	b.n	8000a7a <fsName+0x4e>
			case FM_FAT32:// 0x02
				return "FM_FAT32";
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <fsName+0x60>)
 8000a6a:	e006      	b.n	8000a7a <fsName+0x4e>
			case FM_EXFAT:// 0x04
				return "FM_EXFAT";
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <fsName+0x64>)
 8000a6e:	e004      	b.n	8000a7a <fsName+0x4e>
			case FM_ANY://	 0x7
				return "FM_ANY";
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <fsName+0x68>)
 8000a72:	e002      	b.n	8000a7a <fsName+0x4e>
			case FM_SFD://	 0x8
				return "FM_SFD";
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <fsName+0x6c>)
 8000a76:	e000      	b.n	8000a7a <fsName+0x4e>
		}
		return "Unknown type FS";
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <fsName+0x70>)
	}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	08015b38 	.word	0x08015b38
 8000a8c:	08015b40 	.word	0x08015b40
 8000a90:	08015b4c 	.word	0x08015b4c
 8000a94:	08015b58 	.word	0x08015b58
 8000a98:	08015b60 	.word	0x08015b60
 8000a9c:	08015b68 	.word	0x08015b68

08000aa0 <drvMount>:
	//------------------------------------------------------------------------------------------
	bool drvMount(const char *path)
	{
 8000aa0:	b5b0      	push	{r4, r5, r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af04      	add	r7, sp, #16
 8000aa6:	6078      	str	r0, [r7, #4]
	int tp = FM_FAT32;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	60bb      	str	r3, [r7, #8]

		FRESULT res = f_mount(&SDFatFS, (const TCHAR *)path, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	4840      	ldr	r0, [pc, #256]	; (8000bb4 <drvMount+0x114>)
 8000ab2:	f011 fed9 	bl	8012868 <f_mount>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_NO_FILESYSTEM) {
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	2b0d      	cmp	r3, #13
 8000abe:	d150      	bne.n	8000b62 <drvMount+0xc2>
			Report(__func__, true, "Mount drive '%s' error #%u (%s)%s", path, res, fsErrName(res), eol);
 8000ac0:	7bfc      	ldrb	r4, [r7, #15]
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff feb7 	bl	8000838 <fsErrName>
 8000aca:	4602      	mov	r2, r0
 8000acc:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <drvMount+0x118>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	9201      	str	r2, [sp, #4]
 8000ad4:	9400      	str	r4, [sp, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a38      	ldr	r2, [pc, #224]	; (8000bbc <drvMount+0x11c>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	4838      	ldr	r0, [pc, #224]	; (8000bc0 <drvMount+0x120>)
 8000ade:	f000 faf3 	bl	80010c8 <Report>
			res = f_mkfs((const TCHAR *)path, tp, _MAX_SS, fs_work, sizeof(fs_work));
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <drvMount+0x124>)
 8000aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f012 fde0 	bl	80136b8 <f_mkfs>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
			if (!res) {
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d118      	bne.n	8000b34 <drvMount+0x94>
				Report(__func__, true, "Make %s fs on drive '%s' OK%s", fsName(tp), path, eol);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff90 	bl	8000a2c <fsName>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <drvMount+0x118>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <drvMount+0x128>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4828      	ldr	r0, [pc, #160]	; (8000bc0 <drvMount+0x120>)
 8000b20:	f000 fad2 	bl	80010c8 <Report>
				res = f_mount(&SDFatFS, (const TCHAR *)path, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <drvMount+0x114>)
 8000b2a:	f011 fe9d 	bl	8012868 <f_mount>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e016      	b.n	8000b62 <drvMount+0xc2>
	    	} else {
	    		Report(__func__, true, "Make %s fs error #%u (%s)%s", fsName(tp), res, fsErrName(res), eol);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff77 	bl	8000a2c <fsName>
 8000b3e:	4605      	mov	r5, r0
 8000b40:	7bfc      	ldrb	r4, [r7, #15]
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe77 	bl	8000838 <fsErrName>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <drvMount+0x118>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	9302      	str	r3, [sp, #8]
 8000b52:	9201      	str	r2, [sp, #4]
 8000b54:	9400      	str	r4, [sp, #0]
 8000b56:	462b      	mov	r3, r5
 8000b58:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <drvMount+0x12c>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <drvMount+0x120>)
 8000b5e:	f000 fab3 	bl	80010c8 <Report>
	    	}
		}
		if (res == FR_OK) {
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d109      	bne.n	8000b7c <drvMount+0xdc>
			Report(__func__, true, "Mount drive '%s' OK%s", path, eol);
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <drvMount+0x118>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <drvMount+0x130>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <drvMount+0x120>)
 8000b76:	f000 faa7 	bl	80010c8 <Report>
 8000b7a:	e010      	b.n	8000b9e <drvMount+0xfe>
		} else {
			Report(__func__, true, "Mount drive '%s' error #%u (%s)%s", path, res, fsErrName(res), eol);
 8000b7c:	7bfc      	ldrb	r4, [r7, #15]
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fe59 	bl	8000838 <fsErrName>
 8000b86:	4602      	mov	r2, r0
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <drvMount+0x118>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	9201      	str	r2, [sp, #4]
 8000b90:	9400      	str	r4, [sp, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <drvMount+0x11c>)
 8000b96:	2101      	movs	r1, #1
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <drvMount+0x120>)
 8000b9a:	f000 fa95 	bl	80010c8 <Report>
		}

		return (res == FR_OK) ? true : false;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf0c      	ite	eq
 8000ba4:	2301      	moveq	r3, #1
 8000ba6:	2300      	movne	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
	}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20001948 	.word	0x20001948
 8000bb8:	20000020 	.word	0x20000020
 8000bbc:	08015b78 	.word	0x08015b78
 8000bc0:	080161dc 	.word	0x080161dc
 8000bc4:	200014a4 	.word	0x200014a4
 8000bc8:	08015b9c 	.word	0x08015b9c
 8000bcc:	08015bbc 	.word	0x08015bbc
 8000bd0:	08015bd8 	.word	0x08015bd8

08000bd4 <dirList>:
	//--------------------------------------------------------------------------------------------------------
	FRESULT dirList(const char *name_dir)
	{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b0bd      	sub	sp, #244	; 0xf4
 8000bd8:	af04      	add	r7, sp, #16
 8000bda:	6078      	str	r0, [r7, #4]
	DIR dir;

		FRESULT res = f_opendir(&dir, (const TCHAR *)name_dir);
 8000bdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f012 fa2b 	bl	801303e <f_opendir>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		if (res == FR_OK) {
 8000bee:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d150      	bne.n	8000c98 <dirList+0xc4>
			FILINFO fno;
			int cnt = -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			Report(NULL, true, "Read folder '%s':%s", name_dir, eol);
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <dirList+0xd0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <dirList+0xd4>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 fa5c 	bl	80010c8 <Report>
			for (;;) {
				res = f_readdir(&dir, &fno);
 8000c10:	f107 020c 	add.w	r2, r7, #12
 8000c14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f012 faa8 	bl	8013170 <f_readdir>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
				cnt++;
 8000c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				if (res || fno.fname[0] == 0) {
 8000c30:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <dirList+0x6c>
 8000c38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10d      	bne.n	8000c5c <dirList+0x88>
					if (!cnt) Report(NULL, false, "\tFolder '%s' is empty%s", name_dir, eol);
 8000c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11e      	bne.n	8000c86 <dirList+0xb2>
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <dirList+0xd0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <dirList+0xd8>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f000 fa37 	bl	80010c8 <Report>
					break;
 8000c5a:	e014      	b.n	8000c86 <dirList+0xb2>
				//} else if (fno.fattrib & AM_DIR) {// It is a directory
				//	Report(NULL, false, "\tIt is folder -> '%s'%s", fno.fname, eol);
				} else {// It is a file.
					Report(NULL, false, "\tname:%s, size:%u bytes, attr:%s%s",
 8000c5c:	68fc      	ldr	r4, [r7, #12]
 8000c5e:	7d3b      	ldrb	r3, [r7, #20]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe79 	bl	8000958 <attrName>
 8000c66:	4601      	mov	r1, r0
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <dirList+0xd0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	3216      	adds	r2, #22
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	9101      	str	r1, [sp, #4]
 8000c76:	9400      	str	r4, [sp, #0]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <dirList+0xdc>)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fa22 	bl	80010c8 <Report>
				res = f_readdir(&dir, &fno);
 8000c84:	e7c4      	b.n	8000c10 <dirList+0x3c>
					break;
 8000c86:	bf00      	nop
										fno.fsize,
										attrName(fno.fattrib),
										eol);
				}
			}
			res = FR_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
			f_closedir(&dir);
 8000c8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c92:	4618      	mov	r0, r3
 8000c94:	f012 fa46 	bl	8013124 <f_closedir>
		}

		return res;
 8000c98:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
	}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	37e4      	adds	r7, #228	; 0xe4
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	20000020 	.word	0x20000020
 8000ca8:	08015bf0 	.word	0x08015bf0
 8000cac:	08015c04 	.word	0x08015c04
 8000cb0:	08015c1c 	.word	0x08015c1c

08000cb4 <rdFile>:
			}
		}
	}
	//--------------------------------------------------------------------------------------------------------
	void rdFile(const char *name)
	{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8000cba:	af02      	add	r7, sp, #8
 8000cbc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000cc0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000cc4:	6018      	str	r0, [r3, #0]
	FIL fp;

		FRESULT res = f_open(&fp, (const TCHAR *)name, FA_READ);
 8000cc6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000cca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000cce:	f107 0008 	add.w	r0, r7, #8
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	f011 fe0d 	bl	80128f4 <f_open>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
		if (res == FR_OK) {
 8000ce0:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f040 8087 	bne.w	8000df8 <rdFile+0x144>
			char *tmp = (char *)calloc(1, 512);
 8000cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f013 ffc4 	bl	8014c7c <calloc>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			if (!tmp) {
 8000cfa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10c      	bne.n	8000d1c <rdFile+0x68>
				devError |= devMEM;
 8000d02:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <rdFile+0x178>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <rdFile+0x178>)
 8000d0e:	801a      	strh	r2, [r3, #0]
				f_close(&fp);
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	4618      	mov	r0, r3
 8000d16:	f012 f968 	bl	8012fea <f_close>
 8000d1a:	e082      	b.n	8000e22 <rdFile+0x16e>
				return;
			}
			////Report(__func__, true, "File '%s' open for reading OK%s", name, eol);
			char *uks = NULL, *uke = NULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
			while (f_gets((TCHAR *)tmp, sizeof(tmp) - 1, &fp) != NULL) {
 8000d28:	e051      	b.n	8000dce <rdFile+0x11a>
				Report(NULL, false, "%s", tmp);
 8000d2a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000d2e:	4a40      	ldr	r2, [pc, #256]	; (8000e30 <rdFile+0x17c>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f9c8 	bl	80010c8 <Report>
				if ((uke = strchr(uks, '\n'))) {
 8000d38:	210a      	movs	r1, #10
 8000d3a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8000d3e:	f014 f9ce 	bl	80150de <strchr>
 8000d42:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
 8000d46:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d012      	beq.n	8000d74 <rdFile+0xc0>
					*uke = '\0';
 8000d4e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
					if ((uke = strchr(uks, '\r'))) *uke = '\0';
 8000d56:	210d      	movs	r1, #13
 8000d58:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8000d5c:	f014 f9bf 	bl	80150de <strchr>
 8000d60:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
 8000d64:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <rdFile+0xc0>
 8000d6c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
				}
				if ((uks = strstr(tmp, "egts="))) {
 8000d74:	492f      	ldr	r1, [pc, #188]	; (8000e34 <rdFile+0x180>)
 8000d76:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000d7a:	f014 f9d8 	bl	801512e <strstr>
 8000d7e:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
 8000d82:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00b      	beq.n	8000da2 <rdFile+0xee>
					uks += 5;
 8000d8a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000d8e:	3305      	adds	r3, #5
 8000d90:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					strncpy(egts_addr, uks, sizeof(egts_addr) - 1);
 8000d94:	227f      	movs	r2, #127	; 0x7f
 8000d96:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000d9a:	4827      	ldr	r0, [pc, #156]	; (8000e38 <rdFile+0x184>)
 8000d9c:	f014 f9b4 	bl	8015108 <strncpy>
 8000da0:	e015      	b.n	8000dce <rdFile+0x11a>
				} else if ((uks = strstr(tmp, "ctrl="))) {
 8000da2:	4926      	ldr	r1, [pc, #152]	; (8000e3c <rdFile+0x188>)
 8000da4:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000da8:	f014 f9c1 	bl	801512e <strstr>
 8000dac:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
 8000db0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00a      	beq.n	8000dce <rdFile+0x11a>
					uks += 5;
 8000db8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000dbc:	3305      	adds	r3, #5
 8000dbe:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					strncpy(ctrl_addr, uks, sizeof(ctrl_addr) - 1);
 8000dc2:	227f      	movs	r2, #127	; 0x7f
 8000dc4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000dc8:	481d      	ldr	r0, [pc, #116]	; (8000e40 <rdFile+0x18c>)
 8000dca:	f014 f99d 	bl	8015108 <strncpy>
			while (f_gets((TCHAR *)tmp, sizeof(tmp) - 1, &fp) != NULL) {
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000dda:	f013 f8bb 	bl	8013f54 <f_gets>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1a2      	bne.n	8000d2a <rdFile+0x76>
				}
			}

			free(tmp);
 8000de4:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 8000de8:	f014 f826 	bl	8014e38 <free>
					Report(NULL, false, "%s", tmp);
					free(tmp);
				} else devError |= devMEM;
			} else devError |= devFS;*/

			f_close(&fp);
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4618      	mov	r0, r3
 8000df2:	f012 f8fa 	bl	8012fea <f_close>
 8000df6:	e014      	b.n	8000e22 <rdFile+0x16e>
		} else {
			Report(__func__, true, "Error '%s' while open for reading file '%s'%s", fsErrName(res), name, eol);
 8000df8:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fd1b 	bl	8000838 <fsErrName>
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <rdFile+0x190>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000e0e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	4613      	mov	r3, r2
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <rdFile+0x194>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <rdFile+0x198>)
 8000e1e:	f000 f953 	bl	80010c8 <Report>
		}

	}
 8000e22:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000564 	.word	0x20000564
 8000e30:	08015c40 	.word	0x08015c40
 8000e34:	08015d28 	.word	0x08015d28
 8000e38:	20001800 	.word	0x20001800
 8000e3c:	08015d30 	.word	0x08015d30
 8000e40:	20001880 	.word	0x20001880
 8000e44:	20000020 	.word	0x20000020
 8000e48:	08015d38 	.word	0x08015d38
 8000e4c:	080161e8 	.word	0x080161e8

08000e50 <printBuffer>:


#ifdef SET_W25FLASH
	//
	void printBuffer(const uint8_t *buf, uint32_t len, uint32_t lsize)
	{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
	    if ((!len) || (len > PAGE_BUF_SIZE)) return;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d05c      	beq.n	8000f1c <printBuffer+0xcc>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e68:	d858      	bhi.n	8000f1c <printBuffer+0xcc>

	    char *stx = (char *)calloc(1, len << 2);
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2001      	movs	r0, #1
 8000e72:	f013 ff03 	bl	8014c7c <calloc>
 8000e76:	4603      	mov	r3, r0
 8000e78:	613b      	str	r3, [r7, #16]
	    if (stx) {
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d045      	beq.n	8000f0c <printBuffer+0xbc>
	        int i = -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e84:	617b      	str	r3, [r7, #20]
	        while (++i < len) {
 8000e86:	e020      	b.n	8000eca <printBuffer+0x7a>
	            if ( (!(i % lsize)) && (i > 0) ) strcat(stx, eol);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	fb01 f202 	mul.w	r2, r1, r2
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d108      	bne.n	8000eae <printBuffer+0x5e>
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	dd05      	ble.n	8000eae <printBuffer+0x5e>
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <printBuffer+0xd4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6938      	ldr	r0, [r7, #16]
 8000eaa:	f014 f909 	bl	80150c0 <strcat>
	            sprintf(stx+strlen(stx), " %02X", *(uint8_t *)(buf + i));
 8000eae:	6938      	ldr	r0, [r7, #16]
 8000eb0:	f7ff f99e 	bl	80001f0 <strlen>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1898      	adds	r0, r3, r2
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4918      	ldr	r1, [pc, #96]	; (8000f28 <printBuffer+0xd8>)
 8000ec6:	f014 f8db 	bl	8015080 <siprintf>
	        while (++i < len) {
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8d7      	bhi.n	8000e88 <printBuffer+0x38>
	        }
	        if (stx[strlen(stx) - 1] != '\n') strcat(stx, eol);
 8000ed8:	6938      	ldr	r0, [r7, #16]
 8000eda:	f7ff f989 	bl	80001f0 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b0a      	cmp	r3, #10
 8000eea:	d005      	beq.n	8000ef8 <printBuffer+0xa8>
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <printBuffer+0xd4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6938      	ldr	r0, [r7, #16]
 8000ef4:	f014 f8e4 	bl	80150c0 <strcat>
	        Report(NULL, false, "%s", stx);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <printBuffer+0xdc>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f8e2 	bl	80010c8 <Report>
	        free(stx);
 8000f04:	6938      	ldr	r0, [r7, #16]
 8000f06:	f013 ff97 	bl	8014e38 <free>
 8000f0a:	e008      	b.n	8000f1e <printBuffer+0xce>
	    } else {
	        devError |= devMEM;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <printBuffer+0xe0>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <printBuffer+0xe0>)
 8000f18:	801a      	strh	r2, [r3, #0]
 8000f1a:	e000      	b.n	8000f1e <printBuffer+0xce>
	    if ((!len) || (len > PAGE_BUF_SIZE)) return;
 8000f1c:	bf00      	nop
	    }
	}
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000020 	.word	0x20000020
 8000f28:	08015d68 	.word	0x08015d68
 8000f2c:	08015c40 	.word	0x08015c40
 8000f30:	20000564 	.word	0x20000564

08000f34 <get_tmr>:
#endif

//*****************************************************************************************
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	return (seconda + sec);
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <get_tmr+0x1c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	2000147c 	.word	0x2000147c

08000f54 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	return (seconda >= sec ? true : false);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <check_tmr+0x24>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	bf94      	ite	ls
 8000f66:	2301      	movls	r3, #1
 8000f68:	2300      	movhi	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	2000147c 	.word	0x2000147c

08000f7c <date_to_str>:
{
	return (vatra >= ms250 ? true : false);
}
//----------------------------------------------------------------------------------------
int date_to_str(char *stx)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b08f      	sub	sp, #60	; 0x3c
 8000f80:	af04      	add	r7, sp, #16
 8000f82:	6078      	str	r0, [r7, #4]
int ret = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481a      	ldr	r0, [pc, #104]	; (8000ffc <date_to_str+0x80>)
 8000f92:	f006 f93f 	bl	8007214 <HAL_RTC_GetDate>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <date_to_str+0x30>
		devError |= devRTC;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <date_to_str+0x84>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <date_to_str+0x84>)
 8000fa8:	801a      	strh	r2, [r3, #0]
 8000faa:	e022      	b.n	8000ff2 <date_to_str+0x76>
	} else {
		if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <date_to_str+0x80>)
 8000fb6:	f006 f84b 	bl	8007050 <HAL_RTC_GetTime>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d007      	beq.n	8000fd0 <date_to_str+0x54>
			devError |= devRTC;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <date_to_str+0x84>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <date_to_str+0x84>)
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	e010      	b.n	8000ff2 <date_to_str+0x76>
		} else {
			ret = sprintf(stx, "%02u.%02u %02u:%02u:%02u | ",
							sDate.Date, sDate.Month,
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
			ret = sprintf(stx, "%02u.%02u %02u:%02u:%02u | ",
 8000fd2:	4618      	mov	r0, r3
							sDate.Date, sDate.Month,
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
			ret = sprintf(stx, "%02u.%02u %02u:%02u:%02u | ",
 8000fd6:	461c      	mov	r4, r3
							sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000fd8:	7c3b      	ldrb	r3, [r7, #16]
 8000fda:	7c7a      	ldrb	r2, [r7, #17]
 8000fdc:	7cb9      	ldrb	r1, [r7, #18]
			ret = sprintf(stx, "%02u.%02u %02u:%02u:%02u | ",
 8000fde:	9102      	str	r1, [sp, #8]
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4623      	mov	r3, r4
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	4906      	ldr	r1, [pc, #24]	; (8001004 <date_to_str+0x88>)
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f014 f848 	bl	8015080 <siprintf>
 8000ff0:	6278      	str	r0, [r7, #36]	; 0x24
		}
	}

    return ret;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	372c      	adds	r7, #44	; 0x2c
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	200001b8 	.word	0x200001b8
 8001000:	20000564 	.word	0x20000564
 8001004:	08015d70 	.word	0x08015d70

08001008 <set_Date>:
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	2000      	movs	r0, #0
 8001014:	460a      	mov	r2, r1
 8001016:	4603      	mov	r3, r0
 8001018:	e9c7 2308 	strd	r2, r3, [r7, #32]
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

	gmtime_r(&ep, &ts);
 800101c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f013 fe36 	bl	8014c98 <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 800102c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800102e:	b2db      	uxtb	r3, r3
 8001030:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8001032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 800103c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103e:	b2db      	uxtb	r3, r3
 8001040:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8001042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001044:	b2db      	uxtb	r3, r3
 8001046:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8001048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <set_Date+0xb0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4413      	add	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	b2db      	uxtb	r3, r3
 800105a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <set_Date+0xb4>)
 800106c:	f005 ff56 	bl	8006f1c <HAL_RTC_SetTime>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <set_Date+0x7e>
		devError |= devRTC;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <set_Date+0xb8>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <set_Date+0xb8>)
 8001082:	801a      	strh	r2, [r3, #0]
			devError |= devRTC;
		} else {
			setDate = true;
		}
	}
}
 8001084:	e014      	b.n	80010b0 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <set_Date+0xb4>)
 8001090:	f006 f83c 	bl	800710c <HAL_RTC_SetDate>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <set_Date+0xa2>
			devError |= devRTC;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <set_Date+0xb8>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <set_Date+0xb8>)
 80010a6:	801a      	strh	r2, [r3, #0]
}
 80010a8:	e002      	b.n	80010b0 <set_Date+0xa8>
			setDate = true;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <set_Date+0xbc>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	3750      	adds	r7, #80	; 0x50
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000001c 	.word	0x2000001c
 80010bc:	200001b8 	.word	0x200001b8
 80010c0:	20000564 	.word	0x20000564
 80010c4:	20001480 	.word	0x20001480

080010c8 <Report>:
//------------------------------------------------------------------------------------------
//   Функция вывода символьной строки в локальный канал управления (portLOG)
//
void Report(const char *tag, bool addTime, const char *fmt, ...)
{
 80010c8:	b40c      	push	{r2, r3}
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b088      	sub	sp, #32
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	70fb      	strb	r3, [r7, #3]
va_list args;
size_t len = MAX_UART_BUF;
 80010d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010da:	61bb      	str	r3, [r7, #24]
int dl = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]

	char *buff = (char *)calloc(1, len);
 80010e0:	69b9      	ldr	r1, [r7, #24]
 80010e2:	2001      	movs	r0, #1
 80010e4:	f013 fdca 	bl	8014c7c <calloc>
 80010e8:	4603      	mov	r3, r0
 80010ea:	617b      	str	r3, [r7, #20]
	if (buff) {
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06f      	beq.n	80011d2 <Report+0x10a>
		if (addTime) dl = date_to_str(buff);
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <Report+0x38>
 80010f8:	6978      	ldr	r0, [r7, #20]
 80010fa:	f7ff ff3f 	bl	8000f7c <date_to_str>
 80010fe:	61f8      	str	r0, [r7, #28]

		if (tag) dl += sprintf(buff+strlen(buff), "[%s] ", tag);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00e      	beq.n	8001124 <Report+0x5c>
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff f872 	bl	80001f0 <strlen>
 800110c:	4602      	mov	r2, r0
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	4413      	add	r3, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4932      	ldr	r1, [pc, #200]	; (80011e0 <Report+0x118>)
 8001116:	4618      	mov	r0, r3
 8001118:	f013 ffb2 	bl	8015080 <siprintf>
 800111c:	4602      	mov	r2, r0
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	4413      	add	r3, r2
 8001122:	61fb      	str	r3, [r7, #28]

		va_start(args, fmt);
 8001124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001128:	60fb      	str	r3, [r7, #12]
		vsnprintf(buff + dl, len - dl, fmt, args);
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	18d0      	adds	r0, r2, r3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	1ad1      	subs	r1, r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800113a:	f014 f8c7 	bl	80152cc <vsniprintf>
		int dln = strlen(buff);
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff f856 	bl	80001f0 <strlen>
 8001144:	4603      	mov	r3, r0
 8001146:	613b      	str	r3, [r7, #16]
		uartRdy = 0;
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <Report+0x11c>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(portLOG, (uint8_t *)buff, dln) != HAL_OK) devError |= devUART;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <Report+0x120>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	b292      	uxth	r2, r2
 8001156:	6979      	ldr	r1, [r7, #20]
 8001158:	4618      	mov	r0, r3
 800115a:	f009 fc77 	bl	800aa4c <HAL_UART_Transmit_DMA>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <Report+0xaa>
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <Report+0x124>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <Report+0x124>)
 8001170:	801a      	strh	r2, [r3, #0]
		while (!uartRdy) { /*HAL_Delay(1);*/ }
 8001172:	bf00      	nop
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <Report+0x11c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0fa      	beq.n	8001174 <Report+0xac>
			if (HAL_UART_GetState(portLOG) == HAL_UART_STATE_BUSY_RX) break;
			HAL_Delay(1);
		}*/
		va_end(args);

		strcat(buff, "\r");
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff f836 	bl	80001f0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4413      	add	r3, r2
 800118c:	4918      	ldr	r1, [pc, #96]	; (80011f0 <Report+0x128>)
 800118e:	461a      	mov	r2, r3
 8001190:	460b      	mov	r3, r1
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	8013      	strh	r3, [r2, #0]
		if (CDC_Transmit_FS((uint8_t *)buff, (uint16_t)++dln) != USBD_OK) {
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	3301      	adds	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f013 f8f4 	bl	8014390 <CDC_Transmit_FS>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <Report+0xf6>
			devError |= devVCP;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <Report+0x124>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Report+0x124>)
 80011ba:	801a      	strh	r2, [r3, #0]
 80011bc:	e006      	b.n	80011cc <Report+0x104>
		} else {
			devError &= ~devVCP;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <Report+0x124>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	f023 0320 	bic.w	r3, r3, #32
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <Report+0x124>)
 80011ca:	801a      	strh	r2, [r3, #0]
		}

		free(buff);
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f013 fe33 	bl	8014e38 <free>
	}
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011dc:	b002      	add	sp, #8
 80011de:	4770      	bx	lr
 80011e0:	08015d8c 	.word	0x08015d8c
 80011e4:	20000015 	.word	0x20000015
 80011e8:	20000004 	.word	0x20000004
 80011ec:	20000564 	.word	0x20000564
 80011f0:	08015d94 	.word	0x08015d94

080011f4 <putCmd>:
//---------------------------------------------------------------------------------------------
void putCmd(const char *at, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
int cnt = 300;
 80011fe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001202:	60fb      	str	r3, [r7, #12]

	if (!at || !len) return;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d033      	beq.n	8001272 <putCmd+0x7e>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d030      	beq.n	8001272 <putCmd+0x7e>

	while (!uartRdyMod) {
 8001210:	e014      	b.n	800123c <putCmd+0x48>
		HAL_Delay(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f002 fe60 	bl	8003ed8 <HAL_Delay>
		cnt--;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3b01      	subs	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
		if (!cnt) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10b      	bne.n	800123c <putCmd+0x48>
			devError |= devUART;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <putCmd+0x8c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <putCmd+0x8c>)
 8001230:	801a      	strh	r2, [r3, #0]
			if (!uartRdyMod) return;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <putCmd+0x90>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01c      	beq.n	8001276 <putCmd+0x82>
	while (!uartRdyMod) {
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <putCmd+0x90>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0e5      	beq.n	8001212 <putCmd+0x1e>
		}
	}

	uartRdyMod = 0;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <putCmd+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(portMODEM, (uint8_t *)at, (uint16_t)len) != HAL_OK) devError |= devUART;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <putCmd+0x94>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	b292      	uxth	r2, r2
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f009 fbf8 	bl	800aa4c <HAL_UART_Transmit_DMA>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00a      	beq.n	8001278 <putCmd+0x84>
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <putCmd+0x8c>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <putCmd+0x8c>)
 800126e:	801a      	strh	r2, [r3, #0]
 8001270:	e002      	b.n	8001278 <putCmd+0x84>
	if (!at || !len) return;
 8001272:	bf00      	nop
 8001274:	e000      	b.n	8001278 <putCmd+0x84>
			if (!uartRdyMod) return;
 8001276:	bf00      	nop
	//while (!uartRdyMod) { HAL_Delay(1); }
}
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000564 	.word	0x20000564
 8001284:	20000014 	.word	0x20000014
 8001288:	20000010 	.word	0x20000010

0800128c <hexToBin>:
//----------------------------------------------------------------------------------------
uint8_t hexToBin(char *sc)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
char st = 0, ml = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	2300      	movs	r3, #0
 800129a:	73bb      	strb	r3, [r7, #14]

    if ((sc[0] >= '0') && (sc[0] <= '9')) st = (sc[0] - 0x30);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b2f      	cmp	r3, #47	; 0x2f
 80012a2:	d908      	bls.n	80012b6 <hexToBin+0x2a>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b39      	cmp	r3, #57	; 0x39
 80012aa:	d804      	bhi.n	80012b6 <hexToBin+0x2a>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	3b30      	subs	r3, #48	; 0x30
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e018      	b.n	80012e8 <hexToBin+0x5c>
    else
    if ((sc[0] >= 'A') && (sc[0] <= 'F')) st = (sc[0] - 0x37);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b40      	cmp	r3, #64	; 0x40
 80012bc:	d908      	bls.n	80012d0 <hexToBin+0x44>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b46      	cmp	r3, #70	; 0x46
 80012c4:	d804      	bhi.n	80012d0 <hexToBin+0x44>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3b37      	subs	r3, #55	; 0x37
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e00b      	b.n	80012e8 <hexToBin+0x5c>
    else
    if ((sc[0] >= 'a') && (sc[0] <= 'f')) st = (sc[0] - 0x57);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b60      	cmp	r3, #96	; 0x60
 80012d6:	d907      	bls.n	80012e8 <hexToBin+0x5c>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b66      	cmp	r3, #102	; 0x66
 80012de:	d803      	bhi.n	80012e8 <hexToBin+0x5c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3b57      	subs	r3, #87	; 0x57
 80012e6:	73fb      	strb	r3, [r7, #15]

    if ((sc[1] >= '0') && (sc[1] <= '9')) ml = (sc[1] - 0x30);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b2f      	cmp	r3, #47	; 0x2f
 80012f0:	d90a      	bls.n	8001308 <hexToBin+0x7c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b39      	cmp	r3, #57	; 0x39
 80012fa:	d805      	bhi.n	8001308 <hexToBin+0x7c>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3301      	adds	r3, #1
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	3b30      	subs	r3, #48	; 0x30
 8001304:	73bb      	strb	r3, [r7, #14]
 8001306:	e01e      	b.n	8001346 <hexToBin+0xba>
    else
    if ((sc[1] >= 'A') && (sc[1] <= 'F')) ml = (sc[1] - 0x37);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3301      	adds	r3, #1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	d90a      	bls.n	8001328 <hexToBin+0x9c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b46      	cmp	r3, #70	; 0x46
 800131a:	d805      	bhi.n	8001328 <hexToBin+0x9c>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3301      	adds	r3, #1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3b37      	subs	r3, #55	; 0x37
 8001324:	73bb      	strb	r3, [r7, #14]
 8001326:	e00e      	b.n	8001346 <hexToBin+0xba>
    else
    if ((sc[1] >= 'a') && (sc[1] <= 'f')) ml = (sc[1] - 0x57);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b60      	cmp	r3, #96	; 0x60
 8001330:	d909      	bls.n	8001346 <hexToBin+0xba>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3301      	adds	r3, #1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b66      	cmp	r3, #102	; 0x66
 800133a:	d804      	bhi.n	8001346 <hexToBin+0xba>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b57      	subs	r3, #87	; 0x57
 8001344:	73bb      	strb	r3, [r7, #14]

    return ((st << 4) | (ml & 0x0f));
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	b25a      	sxtb	r2, r3
 800134c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	b25b      	sxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b25b      	sxtb	r3, r3
 800135a:	b2db      	uxtb	r3, r3

}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136e:	f002 fd41 	bl	8003df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001372:	f000 fc9d 	bl	8001cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001376:	f000 feab 	bl	80020d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800137a:	f000 fe5b 	bl	8002034 <MX_DMA_Init>
  MX_SPI4_Init();
 800137e:	f000 fd81 	bl	8001e84 <MX_SPI4_Init>
  MX_RTC_Init();
 8001382:	f000 fd01 	bl	8001d88 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001386:	f000 fe2b 	bl	8001fe0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800138a:	f000 fdb1 	bl	8001ef0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800138e:	f000 fdfd 	bl	8001f8c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001392:	f012 ff3f 	bl	8014214 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8001396:	f000 fd51 	bl	8001e3c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800139a:	f00c fd5f 	bl	800de5c <MX_FATFS_Init>

    //HAL_GPIO_WritePin(LED_MODE_GPIO_Port, LED_MODE_Pin, GPIO_PIN_SET);

    //HAL_Delay(1000);

    HAL_UART_Receive_IT(portLOG, (uint8_t *)&uRxByte, 1);
 800139e:	4bb1      	ldr	r3, [pc, #708]	; (8001664 <main+0x2fc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	49b0      	ldr	r1, [pc, #704]	; (8001668 <main+0x300>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f009 fb1f 	bl	800a9ea <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(portMODEM, (uint8_t *)&uRxByteMod, 1);
 80013ac:	4baf      	ldr	r3, [pc, #700]	; (800166c <main+0x304>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	49af      	ldr	r1, [pc, #700]	; (8001670 <main+0x308>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f009 fb18 	bl	800a9ea <HAL_UART_Receive_IT>

    HAL_TIM_Base_Start_IT(timePort);
 80013ba:	4bae      	ldr	r3, [pc, #696]	; (8001674 <main+0x30c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f008 fe94 	bl	800a0ec <HAL_TIM_Base_Start_IT>

    set_Date(epoch);
 80013c4:	4bac      	ldr	r3, [pc, #688]	; (8001678 <main+0x310>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe1d 	bl	8001008 <set_Date>

    gsmAckFlag = initSRECQ(&gsmAck);
 80013ce:	48ab      	ldr	r0, [pc, #684]	; (800167c <main+0x314>)
 80013d0:	f7ff f94e 	bl	8000670 <initSRECQ>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4ba9      	ldr	r3, [pc, #676]	; (8001680 <main+0x318>)
 80013da:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(MOD_WAKE_GPIO_Port, MOD_WAKE_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2120      	movs	r1, #32
 80013e0:	48a8      	ldr	r0, [pc, #672]	; (8001684 <main+0x31c>)
 80013e2:	f003 fc5d 	bl	8004ca0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80013e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ea:	f002 fd75 	bl	8003ed8 <HAL_Delay>
    HAL_GPIO_WritePin(MOD_RST_GPIO_Port, MOD_RST_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2140      	movs	r1, #64	; 0x40
 80013f2:	48a4      	ldr	r0, [pc, #656]	; (8001684 <main+0x31c>)
 80013f4:	f003 fc54 	bl	8004ca0 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80013f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013fc:	f002 fd6c 	bl	8003ed8 <HAL_Delay>
    HAL_GPIO_WritePin(MOD_PWR_ON_GPIO_Port, MOD_PWR_ON_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001406:	48a0      	ldr	r0, [pc, #640]	; (8001688 <main+0x320>)
 8001408:	f003 fc4a 	bl	8004ca0 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800140c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001410:	f002 fd62 	bl	8003ed8 <HAL_Delay>

#ifdef SET_W25FLASH

    chipPresent = W25qxx_Init();
 8001414:	f002 f81a 	bl	800344c <W25qxx_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b9b      	ldr	r3, [pc, #620]	; (800168c <main+0x324>)
 800141e:	701a      	strb	r2, [r3, #0]
    if (!chipPresent) {
 8001420:	4b9a      	ldr	r3, [pc, #616]	; (800168c <main+0x324>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f083 0301 	eor.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <main+0xe0>
    	Report(NULL, true, "Unknown chipID (err=%u)%s", devError, eol);
 800142e:	4b98      	ldr	r3, [pc, #608]	; (8001690 <main+0x328>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	4b97      	ldr	r3, [pc, #604]	; (8001694 <main+0x32c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	4a96      	ldr	r2, [pc, #600]	; (8001698 <main+0x330>)
 800143e:	2101      	movs	r1, #1
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff fe41 	bl	80010c8 <Report>
 8001446:	e020      	b.n	800148a <main+0x122>
    } else {
    	cid = W25qxx_getChipID();
 8001448:	f002 fa40 	bl	80038cc <W25qxx_getChipID>
 800144c:	4603      	mov	r3, r0
 800144e:	4a93      	ldr	r2, [pc, #588]	; (800169c <main+0x334>)
 8001450:	6013      	str	r3, [r2, #0]

    	pbuf = (uint8_t *)calloc(1, page_buf_size);
 8001452:	4b93      	ldr	r3, [pc, #588]	; (80016a0 <main+0x338>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	2001      	movs	r0, #1
 800145a:	f013 fc0f 	bl	8014c7c <calloc>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b90      	ldr	r3, [pc, #576]	; (80016a4 <main+0x33c>)
 8001464:	601a      	str	r2, [r3, #0]
    	if (!pbuf) devError |= devMEM;
 8001466:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <main+0x33c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <main+0x114>
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <main+0x328>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b85      	ldr	r3, [pc, #532]	; (8001690 <main+0x328>)
 800147a:	801a      	strh	r2, [r3, #0]

    	list_sector = W25qxx_getPageSize() << 2;
 800147c:	f002 fa4a 	bl	8003914 <W25qxx_getPageSize>
 8001480:	4603      	mov	r3, r0
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	461a      	mov	r2, r3
 8001486:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <main+0x340>)
 8001488:	601a      	str	r2, [r3, #0]
	}
    int32_t esec = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t idx = MAX_SEC_PRN;
 800148e:	2340      	movs	r3, #64	; 0x40
 8001490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#endif

#ifdef SET_FAT_SD

    FRESULT rt = -1;
 8001494:	23ff      	movs	r3, #255	; 0xff
 8001496:	74fb      	strb	r3, [r7, #19]

    //f_mount(NULL, (const TCHAR *)SDPath, 1);
    HAL_Delay(1000);
 8001498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149c:	f002 fd1c 	bl	8003ed8 <HAL_Delay>

	if ((mnt = drvMount(SDPath))) {
 80014a0:	4882      	ldr	r0, [pc, #520]	; (80016ac <main+0x344>)
 80014a2:	f7ff fafd 	bl	8000aa0 <drvMount>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <main+0x348>)
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	4b80      	ldr	r3, [pc, #512]	; (80016b0 <main+0x348>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d037      	beq.n	8001526 <main+0x1be>
		//
		DWORD chislo = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
		FATFS *fs = &SDFatFS;
 80014ba:	4b7e      	ldr	r3, [pc, #504]	; (80016b4 <main+0x34c>)
 80014bc:	603b      	str	r3, [r7, #0]
		f_getfree((const TCHAR *)SDPath, &chislo, &fs);	/* Get number of free clusters on the drive */
 80014be:	463a      	mov	r2, r7
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4879      	ldr	r0, [pc, #484]	; (80016ac <main+0x344>)
 80014c6:	f011 fe90 	bl	80131ea <f_getfree>
		Report(NULL, true, "Free claster on drive '%s' is %u %s", SDPath, chislo, eol);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a71      	ldr	r2, [pc, #452]	; (8001694 <main+0x32c>)
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	9201      	str	r2, [sp, #4]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <main+0x344>)
 80014d6:	4a78      	ldr	r2, [pc, #480]	; (80016b8 <main+0x350>)
 80014d8:	2101      	movs	r1, #1
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fdf4 	bl	80010c8 <Report>
		//------------------------------------------------------------------------
		if ((rt = dirList(dirName)) == FR_OK) {
 80014e0:	4b76      	ldr	r3, [pc, #472]	; (80016bc <main+0x354>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb75 	bl	8000bd4 <dirList>
 80014ea:	4603      	mov	r3, r0
 80014ec:	74fb      	strb	r3, [r7, #19]
 80014ee:	7cfb      	ldrb	r3, [r7, #19]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <main+0x198>
			//
			//sprintf(strf, "Project atb_f429 %s (atb-mini)%s\n", VERSION, eol);
			//wrFile(cfg, strf, true);
			//
			//HAL_Delay(500);
			rdFile(cfg);
 80014f4:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <main+0x358>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbdb 	bl	8000cb4 <rdFile>
 80014fe:	e021      	b.n	8001544 <main+0x1dc>
			//
		} else {
			Report(__func__, true, "Error dirlist('%s%s')='%s'%s", SDPath, dirName, fsErrName(rt), eol);
 8001500:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <main+0x354>)
 8001502:	681c      	ldr	r4, [r3, #0]
 8001504:	7cfb      	ldrb	r3, [r7, #19]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f996 	bl	8000838 <fsErrName>
 800150c:	4602      	mov	r2, r0
 800150e:	4b61      	ldr	r3, [pc, #388]	; (8001694 <main+0x32c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	9201      	str	r2, [sp, #4]
 8001516:	9400      	str	r4, [sp, #0]
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <main+0x344>)
 800151a:	4a6a      	ldr	r2, [pc, #424]	; (80016c4 <main+0x35c>)
 800151c:	2101      	movs	r1, #1
 800151e:	486a      	ldr	r0, [pc, #424]	; (80016c8 <main+0x360>)
 8001520:	f7ff fdd2 	bl	80010c8 <Report>
 8001524:	e00e      	b.n	8001544 <main+0x1dc>
		}
		//------------------------------------------------------------------------
		//if (f_mount(NULL, (const TCHAR *)SDPath, 1) == FR_OK) mnt = false;
		//Report(__func__, true, "Umount drive '%.*s'%s", sizeof(SDPath), SDPath, eol);
	} else {
		Report(__func__, true, "Mount disk Error '%s'%s", fsErrName(mnt), eol);
 8001526:	4b62      	ldr	r3, [pc, #392]	; (80016b0 <main+0x348>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f984 	bl	8000838 <fsErrName>
 8001530:	4602      	mov	r2, r0
 8001532:	4b58      	ldr	r3, [pc, #352]	; (8001694 <main+0x32c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	4a64      	ldr	r2, [pc, #400]	; (80016cc <main+0x364>)
 800153c:	2101      	movs	r1, #1
 800153e:	4862      	ldr	r0, [pc, #392]	; (80016c8 <main+0x360>)
 8001540:	f7ff fdc2 	bl	80010c8 <Report>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	int32_t snext = -1;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001548:	61fb      	str	r3, [r7, #28]
    //uint32_t tmr = get_tmr(2);
    const uint32_t waits = 180;
 800154a:	23b4      	movs	r3, #180	; 0xb4
 800154c:	60fb      	str	r3, [r7, #12]
    int pval = -1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001552:	61bb      	str	r3, [r7, #24]
    uint32_t rst_tmr = 0;//get_ms250(_1s);
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

    strob = get_tmr(waits);//set timer to 3 minutes
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fceb 	bl	8000f34 <get_tmr>
 800155e:	4603      	mov	r3, r0
 8001560:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <main+0x368>)
 8001562:	6013      	str	r3, [r2, #0]

    cmd = sGetMsg;//sNone;//sModRst;
 8001564:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <main+0x36c>)
 8001566:	2209      	movs	r2, #9
 8001568:	701a      	strb	r2, [r3, #0]

    while (!QuitLoop) {
 800156a:	e350      	b.n	8001c0e <main+0x8a6>

      if (gsmAckFlag) {//command to GSM module queue is ready
 800156c:	4b44      	ldr	r3, [pc, #272]	; (8001680 <main+0x318>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <main+0x234>
    	  atAck[0] = '\0';
 8001574:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <main+0x370>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
    	  if (getSRECQ(atAck, &gsmAck) >= 0) {
 800157a:	4940      	ldr	r1, [pc, #256]	; (800167c <main+0x314>)
 800157c:	4856      	ldr	r0, [pc, #344]	; (80016d8 <main+0x370>)
 800157e:	f7ff f8e7 	bl	8000750 <getSRECQ>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	db09      	blt.n	800159c <main+0x234>
    		  if (strlen(atAck)) Report(NULL, false, "%s\n", atAck);
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <main+0x370>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <main+0x234>
 8001590:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <main+0x370>)
 8001592:	4a52      	ldr	r2, [pc, #328]	; (80016dc <main+0x374>)
 8001594:	2100      	movs	r1, #0
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fd96 	bl	80010c8 <Report>
		  tmr = get_tmr(30);
		  sprintf(oBuf, "msec=%lu Packet number=%d (err=%u)%s", HAL_GetTick(), np++, devError, eol);
		  if (snext) Report(NULL, true, "%s", oBuf);
	  }*/

	  switch (cmd) {
 800159c:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <main+0x36c>)
 800159e:	f993 3000 	ldrsb.w	r3, [r3]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f200 82cd 	bhi.w	8001b42 <main+0x7da>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <main+0x248>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	08001787 	.word	0x08001787
 80015b4:	08001b43 	.word	0x08001b43
 80015b8:	080016f9 	.word	0x080016f9
 80015bc:	08001b43 	.word	0x08001b43
 80015c0:	08001a3b 	.word	0x08001a3b
 80015c4:	08001aa3 	.word	0x08001aa3
 80015c8:	08001acb 	.word	0x08001acb
 80015cc:	08001acb 	.word	0x08001acb
 80015d0:	08001b03 	.word	0x08001b03
 80015d4:	08001621 	.word	0x08001621
 80015d8:	0800180b 	.word	0x0800180b
 80015dc:	0800189f 	.word	0x0800189f
 80015e0:	08001991 	.word	0x08001991
 80015e4:	080018ef 	.word	0x080018ef
 80015e8:	080019e1 	.word	0x080019e1
 80015ec:	080015f1 	.word	0x080015f1
	  	  case sRestart:
	  		  QuitLoop = true;
 80015f0:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <main+0x378>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	  		  Report(NULL, true, "Go go restart STM32F429...%s", eol);
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <main+0x32c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a3a      	ldr	r2, [pc, #232]	; (80016e4 <main+0x37c>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fd62 	bl	80010c8 <Report>
	  		  if (mnt) {
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <main+0x348>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d007      	beq.n	800161c <main+0x2b4>
	  			  f_mount(NULL, (const TCHAR *)SDPath, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	4927      	ldr	r1, [pc, #156]	; (80016ac <main+0x344>)
 8001610:	2000      	movs	r0, #0
 8001612:	f011 f929 	bl	8012868 <f_mount>
	  			  mnt = false;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <main+0x348>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  NVIC_SystemReset();
 800161c:	f7ff f812 	bl	8000644 <__NVIC_SystemReset>
	  		  break;
		  break;
	  	  case sGetMsg:
	  		  //tmr = get_tmr(0);
	  		  sprintf(oBuf, "msec=%lu Packet number=%d (err=%u)%s", HAL_GetTick(), np++, devError, eol);
 8001620:	f002 fc4e 	bl	8003ec0 <HAL_GetTick>
 8001624:	4601      	mov	r1, r0
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <main+0x380>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	482e      	ldr	r0, [pc, #184]	; (80016e8 <main+0x380>)
 800162e:	6002      	str	r2, [r0, #0]
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <main+0x328>)
 8001632:	8812      	ldrh	r2, [r2, #0]
 8001634:	4610      	mov	r0, r2
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <main+0x32c>)
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	9201      	str	r2, [sp, #4]
 800163c:	9000      	str	r0, [sp, #0]
 800163e:	460a      	mov	r2, r1
 8001640:	492a      	ldr	r1, [pc, #168]	; (80016ec <main+0x384>)
 8001642:	482b      	ldr	r0, [pc, #172]	; (80016f0 <main+0x388>)
 8001644:	f013 fd1c 	bl	8015080 <siprintf>
	  		  if (snext) Report(NULL, true, "%s", oBuf);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <main+0x2f2>
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <main+0x388>)
 8001650:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <main+0x38c>)
 8001652:	2101      	movs	r1, #1
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fd37 	bl	80010c8 <Report>
	  		  cmd = sNone;
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <main+0x36c>)
 800165c:	22ff      	movs	r2, #255	; 0xff
 800165e:	701a      	strb	r2, [r3, #0]
		  break;
 8001660:	e26f      	b.n	8001b42 <main+0x7da>
 8001662:	bf00      	nop
 8001664:	20000004 	.word	0x20000004
 8001668:	20001071 	.word	0x20001071
 800166c:	20000010 	.word	0x20000010
 8001670:	2000086d 	.word	0x2000086d
 8001674:	20000000 	.word	0x20000000
 8001678:	20000018 	.word	0x20000018
 800167c:	200017a8 	.word	0x200017a8
 8001680:	200017fb 	.word	0x200017fb
 8001684:	40020000 	.word	0x40020000
 8001688:	40021000 	.word	0x40021000
 800168c:	20001488 	.word	0x20001488
 8001690:	20000564 	.word	0x20000564
 8001694:	20000020 	.word	0x20000020
 8001698:	08015d98 	.word	0x08015d98
 800169c:	2000148c 	.word	0x2000148c
 80016a0:	2000003c 	.word	0x2000003c
 80016a4:	2000149c 	.word	0x2000149c
 80016a8:	20001490 	.word	0x20001490
 80016ac:	20001944 	.word	0x20001944
 80016b0:	200014a0 	.word	0x200014a0
 80016b4:	20001948 	.word	0x20001948
 80016b8:	08015db4 	.word	0x08015db4
 80016bc:	2000002c 	.word	0x2000002c
 80016c0:	20000028 	.word	0x20000028
 80016c4:	08015dd8 	.word	0x08015dd8
 80016c8:	080161f0 	.word	0x080161f0
 80016cc:	08015df8 	.word	0x08015df8
 80016d0:	20001484 	.word	0x20001484
 80016d4:	20000024 	.word	0x20000024
 80016d8:	2000066c 	.word	0x2000066c
 80016dc:	08015e10 	.word	0x08015e10
 80016e0:	20001481 	.word	0x20001481
 80016e4:	08015e14 	.word	0x08015e14
 80016e8:	20001474 	.word	0x20001474
 80016ec:	08015e34 	.word	0x08015e34
 80016f0:	20001074 	.word	0x20001074
 80016f4:	08015c40 	.word	0x08015c40
	  	  case sErase:
#ifdef SET_W25FLASH
	  		  if (chipPresent) {
 80016f8:	4b93      	ldr	r3, [pc, #588]	; (8001948 <main+0x5e0>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d02c      	beq.n	800175a <main+0x3f2>
	  			  if (esector == W25qxx_getSectorCount()) {
 8001700:	f002 f8f0 	bl	80038e4 <W25qxx_getSectorCount>
 8001704:	4602      	mov	r2, r0
 8001706:	4b91      	ldr	r3, [pc, #580]	; (800194c <main+0x5e4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d115      	bne.n	800173a <main+0x3d2>
	  				  if (snext == -1) {
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001714:	d12d      	bne.n	8001772 <main+0x40a>
	  					  snext = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
	  					  idx = MAX_SEC_PRN;
 800171a:	2340      	movs	r3, #64	; 0x40
 800171c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  					  //wt = 1;
	  					  Report(NULL, true, "Start erase all sector's (%u)...%s", W25qxx_getSectorCount(), eol);
 8001720:	f002 f8e0 	bl	80038e4 <W25qxx_getSectorCount>
 8001724:	4602      	mov	r2, r0
 8001726:	4b8a      	ldr	r3, [pc, #552]	; (8001950 <main+0x5e8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	4a89      	ldr	r2, [pc, #548]	; (8001954 <main+0x5ec>)
 8001730:	2101      	movs	r1, #1
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fcc8 	bl	80010c8 <Report>
 8001738:	e01b      	b.n	8001772 <main+0x40a>
	  				  }
	  			  } else {
	  				  W25qxx_EraseSector(esector, 1);
 800173a:	4b84      	ldr	r3, [pc, #528]	; (800194c <main+0x5e4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f8f3 	bl	800392c <W25qxx_EraseSector>
	  				  cmd = sRead;
 8001746:	4b84      	ldr	r3, [pc, #528]	; (8001958 <main+0x5f0>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
	  				  strob = get_tmr(waits);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fbf1 	bl	8000f34 <get_tmr>
 8001752:	4603      	mov	r3, r0
 8001754:	4a81      	ldr	r2, [pc, #516]	; (800195c <main+0x5f4>)
 8001756:	6013      	str	r3, [r2, #0]
	  				  break;
 8001758:	e1f3      	b.n	8001b42 <main+0x7da>
	  			  }
	  			  //tmr = get_tmr(period);
	  		  } else Report(NULL, true, "Unknown chipID (err=%u)%s", devError, eol);
 800175a:	4b81      	ldr	r3, [pc, #516]	; (8001960 <main+0x5f8>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <main+0x5e8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4613      	mov	r3, r2
 8001768:	4a7e      	ldr	r2, [pc, #504]	; (8001964 <main+0x5fc>)
 800176a:	2101      	movs	r1, #1
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff fcab 	bl	80010c8 <Report>
#endif
	  		  strob = get_tmr(waits);
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff fbde 	bl	8000f34 <get_tmr>
 8001778:	4603      	mov	r3, r0
 800177a:	4a78      	ldr	r2, [pc, #480]	; (800195c <main+0x5f4>)
 800177c:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 800177e:	4b76      	ldr	r3, [pc, #472]	; (8001958 <main+0x5f0>)
 8001780:	22ff      	movs	r2, #255	; 0xff
 8001782:	701a      	strb	r2, [r3, #0]
	  	  break;
 8001784:	e1dd      	b.n	8001b42 <main+0x7da>
	  	  case sRead:
#ifdef SET_W25FLASH
	  		  if (chipPresent) {
 8001786:	4b70      	ldr	r3, [pc, #448]	; (8001948 <main+0x5e0>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d027      	beq.n	80017de <main+0x476>
	  			  if (pbuf) {
 800178e:	4b76      	ldr	r3, [pc, #472]	; (8001968 <main+0x600>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d02f      	beq.n	80017f6 <main+0x48e>
	  				  W25qxx_ReadPage(pbuf, rpage, 0, page_buf_size);
 8001796:	4b74      	ldr	r3, [pc, #464]	; (8001968 <main+0x600>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	4b74      	ldr	r3, [pc, #464]	; (800196c <main+0x604>)
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	4b74      	ldr	r3, [pc, #464]	; (8001970 <main+0x608>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f002 fa20 	bl	8003be8 <W25qxx_ReadPage>
	  				  Report(NULL, 1, "Read page #%lu sector #%lu:%s", rpage, W25qxx_PageToSector(rpage), eol);
 80017a8:	4b70      	ldr	r3, [pc, #448]	; (800196c <main+0x604>)
 80017aa:	681c      	ldr	r4, [r3, #0]
 80017ac:	4b6f      	ldr	r3, [pc, #444]	; (800196c <main+0x604>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 f937 	bl	8003a24 <W25qxx_PageToSector>
 80017b6:	4602      	mov	r2, r0
 80017b8:	4b65      	ldr	r3, [pc, #404]	; (8001950 <main+0x5e8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	4623      	mov	r3, r4
 80017c2:	4a6c      	ldr	r2, [pc, #432]	; (8001974 <main+0x60c>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fc7e 	bl	80010c8 <Report>
	  				  printBuffer(pbuf, page_buf_size, 32);
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <main+0x600>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a67      	ldr	r2, [pc, #412]	; (8001970 <main+0x608>)
 80017d2:	6811      	ldr	r1, [r2, #0]
 80017d4:	2220      	movs	r2, #32
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fb3a 	bl	8000e50 <printBuffer>
 80017dc:	e00b      	b.n	80017f6 <main+0x48e>
	  			  }
	  			  //tmr = get_tmr(period);
	  	  	  } else Report(NULL, true, "Unknown chipID (err=%u)%s", devError, eol);
 80017de:	4b60      	ldr	r3, [pc, #384]	; (8001960 <main+0x5f8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b5a      	ldr	r3, [pc, #360]	; (8001950 <main+0x5e8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <main+0x5fc>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff fc69 	bl	80010c8 <Report>
#endif
	  		  strob = get_tmr(waits);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fb9c 	bl	8000f34 <get_tmr>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a57      	ldr	r2, [pc, #348]	; (800195c <main+0x5f4>)
 8001800:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 8001802:	4b55      	ldr	r3, [pc, #340]	; (8001958 <main+0x5f0>)
 8001804:	22ff      	movs	r2, #255	; 0xff
 8001806:	701a      	strb	r2, [r3, #0]
	  	  break;
 8001808:	e19b      	b.n	8001b42 <main+0x7da>
	  	  case sFill:
#ifdef SET_W25FLASH
	  		  if (chipPresent) {
 800180a:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <main+0x5e0>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d02f      	beq.n	8001872 <main+0x50a>
	  			  if (pbuf) {
 8001812:	4b55      	ldr	r3, [pc, #340]	; (8001968 <main+0x600>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d037      	beq.n	800188a <main+0x522>
	  				  W25qxx_FillPage(byte_fill, rpage, 0, W25qxx_getPageSize());
 800181a:	4b57      	ldr	r3, [pc, #348]	; (8001978 <main+0x610>)
 800181c:	781c      	ldrb	r4, [r3, #0]
 800181e:	4b53      	ldr	r3, [pc, #332]	; (800196c <main+0x604>)
 8001820:	681d      	ldr	r5, [r3, #0]
 8001822:	f002 f877 	bl	8003914 <W25qxx_getPageSize>
 8001826:	4603      	mov	r3, r0
 8001828:	2200      	movs	r2, #0
 800182a:	4629      	mov	r1, r5
 800182c:	4620      	mov	r0, r4
 800182e:	f002 f90f 	bl	8003a50 <W25qxx_FillPage>
	  				  Report(NULL, 1, "Fill page #%lu sector #%lu to 0x%X%s", rpage, W25qxx_PageToSector(rpage), byte_fill, eol);
 8001832:	4b4e      	ldr	r3, [pc, #312]	; (800196c <main+0x604>)
 8001834:	681c      	ldr	r4, [r3, #0]
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <main+0x604>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f002 f8f2 	bl	8003a24 <W25qxx_PageToSector>
 8001840:	4602      	mov	r2, r0
 8001842:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <main+0x610>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4619      	mov	r1, r3
 8001848:	4b41      	ldr	r3, [pc, #260]	; (8001950 <main+0x5e8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	9101      	str	r1, [sp, #4]
 8001850:	9200      	str	r2, [sp, #0]
 8001852:	4623      	mov	r3, r4
 8001854:	4a49      	ldr	r2, [pc, #292]	; (800197c <main+0x614>)
 8001856:	2101      	movs	r1, #1
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fc35 	bl	80010c8 <Report>
	  				  cmd = sRead;
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <main+0x5f0>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
	  				  strob = get_tmr(waits);
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f7ff fb65 	bl	8000f34 <get_tmr>
 800186a:	4603      	mov	r3, r0
 800186c:	4a3b      	ldr	r2, [pc, #236]	; (800195c <main+0x5f4>)
 800186e:	6013      	str	r3, [r2, #0]
	  				  break;
 8001870:	e167      	b.n	8001b42 <main+0x7da>
	  			  }
	  			  //tmr = get_tmr(period);
	  		  } else Report(NULL, true, "Unknown chipID (err=%u)%s", devError, eol);
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <main+0x5f8>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <main+0x5e8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	4a38      	ldr	r2, [pc, #224]	; (8001964 <main+0x5fc>)
 8001882:	2101      	movs	r1, #1
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fc1f 	bl	80010c8 <Report>
#endif
	  		  strob = get_tmr(waits);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff fb52 	bl	8000f34 <get_tmr>
 8001890:	4603      	mov	r3, r0
 8001892:	4a32      	ldr	r2, [pc, #200]	; (800195c <main+0x5f4>)
 8001894:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <main+0x5f0>)
 8001898:	22ff      	movs	r2, #255	; 0xff
 800189a:	701a      	strb	r2, [r3, #0]
	  	  break;
 800189c:	e151      	b.n	8001b42 <main+0x7da>
	  	  case sRdDir:
#ifdef SET_FAT_SD
	  		  if (strlen(str_name)) {
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <main+0x618>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d019      	beq.n	80018da <main+0x572>
	  			  if (!mnt) mnt = drvMount(SDPath);
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <main+0x61c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f083 0301 	eor.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <main+0x55a>
 80018b4:	4834      	ldr	r0, [pc, #208]	; (8001988 <main+0x620>)
 80018b6:	f7ff f8f3 	bl	8000aa0 <drvMount>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <main+0x61c>)
 80018c0:	701a      	strb	r2, [r3, #0]
	  			  if (mnt) dirList(str_name);
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <main+0x61c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <main+0x568>
 80018ca:	482d      	ldr	r0, [pc, #180]	; (8001980 <main+0x618>)
 80018cc:	f7ff f982 	bl	8000bd4 <dirList>
	  			  memset(str_name, 0, sizeof(str_name));
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	2100      	movs	r1, #0
 80018d4:	482a      	ldr	r0, [pc, #168]	; (8001980 <main+0x618>)
 80018d6:	f013 fac5 	bl	8014e64 <memset>
	  			  //tmr = get_tmr(period);
	  		  }
#endif
	  		  strob = get_tmr(waits);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff fb2a 	bl	8000f34 <get_tmr>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <main+0x5f4>)
 80018e4:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <main+0x5f0>)
 80018e8:	22ff      	movs	r2, #255	; 0xff
 80018ea:	701a      	strb	r2, [r3, #0]
	  	  break;
 80018ec:	e129      	b.n	8001b42 <main+0x7da>
	  	  case sMkDir:
#ifdef SET_FAT_SD
	  		  if (strlen(str_name)) {
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <main+0x618>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d01e      	beq.n	8001934 <main+0x5cc>
	  			  if (!mnt) mnt = drvMount(SDPath);
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <main+0x61c>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <main+0x5aa>
 8001904:	4820      	ldr	r0, [pc, #128]	; (8001988 <main+0x620>)
 8001906:	f7ff f8cb 	bl	8000aa0 <drvMount>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <main+0x61c>)
 8001910:	701a      	strb	r2, [r3, #0]
	  			  if (mnt) {
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <main+0x61c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <main+0x5cc>
	  				  f_mkdir(str_name);
 800191a:	4819      	ldr	r0, [pc, #100]	; (8001980 <main+0x618>)
 800191c:	f011 fdc5 	bl	80134aa <f_mkdir>
	  				  dirList(dirName);
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <main+0x624>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f955 	bl	8000bd4 <dirList>
	  				  memset(str_name, 0, sizeof(str_name));
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	2100      	movs	r1, #0
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <main+0x618>)
 8001930:	f013 fa98 	bl	8014e64 <memset>
	  				  //tmr = get_tmr(period);
	  			  }
	  		  }
#endif
	  		  strob = get_tmr(waits);
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f7ff fafd 	bl	8000f34 <get_tmr>
 800193a:	4603      	mov	r3, r0
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <main+0x5f4>)
 800193e:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <main+0x5f0>)
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	701a      	strb	r2, [r3, #0]
	  	  break;
 8001946:	e0fc      	b.n	8001b42 <main+0x7da>
 8001948:	20001488 	.word	0x20001488
 800194c:	20001494 	.word	0x20001494
 8001950:	20000020 	.word	0x20000020
 8001954:	08015e5c 	.word	0x08015e5c
 8001958:	20000024 	.word	0x20000024
 800195c:	20001484 	.word	0x20001484
 8001960:	20000564 	.word	0x20000564
 8001964:	08015d98 	.word	0x08015d98
 8001968:	2000149c 	.word	0x2000149c
 800196c:	20001498 	.word	0x20001498
 8001970:	2000003c 	.word	0x2000003c
 8001974:	08015e80 	.word	0x08015e80
 8001978:	20000026 	.word	0x20000026
 800197c:	08015ea0 	.word	0x08015ea0
 8001980:	200016a4 	.word	0x200016a4
 8001984:	200014a0 	.word	0x200014a0
 8001988:	20001944 	.word	0x20001944
 800198c:	2000002c 	.word	0x2000002c
	  	  case sRdFile:
#ifdef SET_FAT_SD
	  		  if (strlen(str_name)) {
 8001990:	4ba4      	ldr	r3, [pc, #656]	; (8001c24 <main+0x8bc>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d019      	beq.n	80019cc <main+0x664>
	  			  if (!mnt) mnt = drvMount(SDPath);
 8001998:	4ba3      	ldr	r3, [pc, #652]	; (8001c28 <main+0x8c0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <main+0x64c>
 80019a6:	48a1      	ldr	r0, [pc, #644]	; (8001c2c <main+0x8c4>)
 80019a8:	f7ff f87a 	bl	8000aa0 <drvMount>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b9d      	ldr	r3, [pc, #628]	; (8001c28 <main+0x8c0>)
 80019b2:	701a      	strb	r2, [r3, #0]
	  			  if (mnt) rdFile(str_name);
 80019b4:	4b9c      	ldr	r3, [pc, #624]	; (8001c28 <main+0x8c0>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <main+0x65a>
 80019bc:	4899      	ldr	r0, [pc, #612]	; (8001c24 <main+0x8bc>)
 80019be:	f7ff f979 	bl	8000cb4 <rdFile>
	  			  memset(str_name, 0, sizeof(str_name));
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	2100      	movs	r1, #0
 80019c6:	4897      	ldr	r0, [pc, #604]	; (8001c24 <main+0x8bc>)
 80019c8:	f013 fa4c 	bl	8014e64 <memset>
	  			  //tmr = get_tmr(period);
	  		  }
#endif
	  		  strob = get_tmr(waits);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fab1 	bl	8000f34 <get_tmr>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a96      	ldr	r2, [pc, #600]	; (8001c30 <main+0x8c8>)
 80019d6:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 80019d8:	4b96      	ldr	r3, [pc, #600]	; (8001c34 <main+0x8cc>)
 80019da:	22ff      	movs	r2, #255	; 0xff
 80019dc:	701a      	strb	r2, [r3, #0]
	  	  break;
 80019de:	e0b0      	b.n	8001b42 <main+0x7da>
	  	  case sRemove:
#ifdef SET_FAT_SD
	  		  if (strlen(str_name)) {
 80019e0:	4b90      	ldr	r3, [pc, #576]	; (8001c24 <main+0x8bc>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01e      	beq.n	8001a26 <main+0x6be>
	  			  if (!mnt) mnt = drvMount(SDPath);
 80019e8:	4b8f      	ldr	r3, [pc, #572]	; (8001c28 <main+0x8c0>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <main+0x69c>
 80019f6:	488d      	ldr	r0, [pc, #564]	; (8001c2c <main+0x8c4>)
 80019f8:	f7ff f852 	bl	8000aa0 <drvMount>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <main+0x8c0>)
 8001a02:	701a      	strb	r2, [r3, #0]
	  			  if (mnt) {
 8001a04:	4b88      	ldr	r3, [pc, #544]	; (8001c28 <main+0x8c0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <main+0x6be>
	  				  f_unlink(str_name);
 8001a0c:	4885      	ldr	r0, [pc, #532]	; (8001c24 <main+0x8bc>)
 8001a0e:	f011 fca1 	bl	8013354 <f_unlink>
	  				  memset(str_name, 0, sizeof(str_name));
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	2100      	movs	r1, #0
 8001a16:	4883      	ldr	r0, [pc, #524]	; (8001c24 <main+0x8bc>)
 8001a18:	f013 fa24 	bl	8014e64 <memset>
	  				  dirList(dirName);
 8001a1c:	4b86      	ldr	r3, [pc, #536]	; (8001c38 <main+0x8d0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f8d7 	bl	8000bd4 <dirList>
	  				  //tmr = get_tmr(period);
	  			  }
	  		  }
#endif
	  		  strob = get_tmr(waits);
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff fa84 	bl	8000f34 <get_tmr>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a80      	ldr	r2, [pc, #512]	; (8001c30 <main+0x8c8>)
 8001a30:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 8001a32:	4b80      	ldr	r3, [pc, #512]	; (8001c34 <main+0x8cc>)
 8001a34:	22ff      	movs	r2, #255	; 0xff
 8001a36:	701a      	strb	r2, [r3, #0]
	  	  break;
 8001a38:	e083      	b.n	8001b42 <main+0x7da>
	  	  case sModCmd:
	  	  {
	  		  int dln = strlen(atCmd);
 8001a3a:	4880      	ldr	r0, [pc, #512]	; (8001c3c <main+0x8d4>)
 8001a3c:	f7fe fbd8 	bl	80001f0 <strlen>
 8001a40:	4603      	mov	r3, r0
 8001a42:	60bb      	str	r3, [r7, #8]
	  		  if (dln) {
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d021      	beq.n	8001a8e <main+0x726>
	  			  strcat(atCmd, eol);
 8001a4a:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <main+0x8d8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	487a      	ldr	r0, [pc, #488]	; (8001c3c <main+0x8d4>)
 8001a52:	f013 fb35 	bl	80150c0 <strcat>
	  			  dln += 2;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	60bb      	str	r3, [r7, #8]
	  			  putCmd(atCmd, dln);
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	4877      	ldr	r0, [pc, #476]	; (8001c3c <main+0x8d4>)
 8001a60:	f7ff fbc8 	bl	80011f4 <putCmd>
	  			  Report(NULL, false, "%d:%.*s%s", icmd, dln - 4, atCmd + 2, eol);
 8001a64:	4b77      	ldr	r3, [pc, #476]	; (8001c44 <main+0x8dc>)
 8001a66:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	4975      	ldr	r1, [pc, #468]	; (8001c48 <main+0x8e0>)
 8001a72:	4a73      	ldr	r2, [pc, #460]	; (8001c40 <main+0x8d8>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	9202      	str	r2, [sp, #8]
 8001a78:	9101      	str	r1, [sp, #4]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a73      	ldr	r2, [pc, #460]	; (8001c4c <main+0x8e4>)
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fb20 	bl	80010c8 <Report>
	  			  //tmr = get_tmr(period);
	  			  HAL_Delay(50);
 8001a88:	2032      	movs	r0, #50	; 0x32
 8001a8a:	f002 fa25 	bl	8003ed8 <HAL_Delay>
	  		  }
	  		  strob = get_tmr(waits);
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff fa50 	bl	8000f34 <get_tmr>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <main+0x8c8>)
 8001a98:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 8001a9a:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <main+0x8cc>)
 8001a9c:	22ff      	movs	r2, #255	; 0xff
 8001a9e:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  break;
 8001aa0:	e04f      	b.n	8001b42 <main+0x7da>
	  	  case sModAck:
	  		  if (strlen(atAck)) Report(NULL, false, "%s", atAck);
 8001aa2:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <main+0x8e8>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <main+0x74e>
 8001aaa:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <main+0x8e8>)
 8001aac:	4a69      	ldr	r2, [pc, #420]	; (8001c54 <main+0x8ec>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff fb09 	bl	80010c8 <Report>
	  		  strob = get_tmr(waits);
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff fa3c 	bl	8000f34 <get_tmr>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a5c      	ldr	r2, [pc, #368]	; (8001c30 <main+0x8c8>)
 8001ac0:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <main+0x8cc>)
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	701a      	strb	r2, [r3, #0]
	  		  //tmr = get_tmr(period);
	  	  break;
 8001ac8:	e03b      	b.n	8001b42 <main+0x7da>
	  	  case sModPwrOn:
	  	  case sModPwrOff:
	  	  {
	  		  if (cmd == sModPwrOff) pval = GPIO_PIN_RESET; else pval = GPIO_PIN_SET;
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <main+0x8cc>)
 8001acc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad0:	2b07      	cmp	r3, #7
 8001ad2:	d102      	bne.n	8001ada <main+0x772>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e001      	b.n	8001ade <main+0x776>
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
	  		  HAL_GPIO_WritePin(MOD_PWR_ON_GPIO_Port, MOD_PWR_ON_Pin, pval);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae8:	485b      	ldr	r0, [pc, #364]	; (8001c58 <main+0x8f0>)
 8001aea:	f003 f8d9 	bl	8004ca0 <HAL_GPIO_WritePin>
	  		  strob = get_tmr(waits);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff fa20 	bl	8000f34 <get_tmr>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a4e      	ldr	r2, [pc, #312]	; (8001c30 <main+0x8c8>)
 8001af8:	6013      	str	r3, [r2, #0]
	  		  cmd = sNone;
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <main+0x8cc>)
 8001afc:	22ff      	movs	r2, #255	; 0xff
 8001afe:	701a      	strb	r2, [r3, #0]
	  		  //tmr = get_tmr(period);
	  	  }
	  	  break;
 8001b00:	e01f      	b.n	8001b42 <main+0x7da>
	  	  case sModRst:
	  		  pval = GPIO_PIN_SET;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61bb      	str	r3, [r7, #24]
	  		  HAL_GPIO_WritePin(MOD_RST_GPIO_Port, MOD_RST_Pin, pval);
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2140      	movs	r1, #64	; 0x40
 8001b0e:	4853      	ldr	r0, [pc, #332]	; (8001c5c <main+0x8f4>)
 8001b10:	f003 f8c6 	bl	8004ca0 <HAL_GPIO_WritePin>
	  		  Report(NULL, true, "MOD_RST_PIN=%d%s", pval, eol);
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <main+0x8d8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	; (8001c60 <main+0x8f8>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff fad1 	bl	80010c8 <Report>
	  		  strob = get_tmr(waits);
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff fa04 	bl	8000f34 <get_tmr>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a40      	ldr	r2, [pc, #256]	; (8001c30 <main+0x8c8>)
 8001b30:	6013      	str	r3, [r2, #0]
	  		  rst_tmr = get_tmr(2);
 8001b32:	2002      	movs	r0, #2
 8001b34:	f7ff f9fe 	bl	8000f34 <get_tmr>
 8001b38:	6178      	str	r0, [r7, #20]
	  		  cmd = sNone;
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <main+0x8cc>)
 8001b3c:	22ff      	movs	r2, #255	; 0xff
 8001b3e:	701a      	strb	r2, [r3, #0]
	  		  //tmr = get_tmr(period);
	  	  break;
 8001b40:	bf00      	nop
	  }

	  if (QuitLoop) break;
 8001b42:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <main+0x8fc>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f040 808f 	bne.w	8001c6c <main+0x904>

	  if (rst_tmr) {
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d019      	beq.n	8001b88 <main+0x820>
		  if (check_tmr(rst_tmr)) {
 8001b54:	6978      	ldr	r0, [r7, #20]
 8001b56:	f7ff f9fd 	bl	8000f54 <check_tmr>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <main+0x820>
			  rst_tmr = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
			  pval = GPIO_PIN_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
			  HAL_GPIO_WritePin(MOD_RST_GPIO_Port, MOD_RST_Pin, pval);
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	483a      	ldr	r0, [pc, #232]	; (8001c5c <main+0x8f4>)
 8001b72:	f003 f895 	bl	8004ca0 <HAL_GPIO_WritePin>
			  Report(NULL, true, "MOD_RST_PIN=%d%s", pval, eol);
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <main+0x8d8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4a38      	ldr	r2, [pc, #224]	; (8001c60 <main+0x8f8>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff faa0 	bl	80010c8 <Report>
		  }
	  }
#ifdef SET_W25FLASH
	  if (!snext) {
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d12d      	bne.n	8001bea <main+0x882>
		  W25qxx_EraseSector(esec++, 0);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	627a      	str	r2, [r7, #36]	; 0x24
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fec8 	bl	800392c <W25qxx_EraseSector>
		  idx--;
 8001b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  if (!idx) idx = MAX_SEC_PRN;
 8001ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <main+0x84c>
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  if (esec == W25qxx_getSectorCount()) {
 8001bb4:	f001 fe96 	bl	80038e4 <W25qxx_getSectorCount>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10e      	bne.n	8001bde <main+0x876>
			  Report(NULL, true, "Done erase all sector's (%u)%s", W25qxx_getSectorCount(), eol);
 8001bc0:	f001 fe90 	bl	80038e4 <W25qxx_getSectorCount>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <main+0x8d8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <main+0x900>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fa78 	bl	80010c8 <Report>
			  snext = -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bdc:	61fb      	str	r3, [r7, #28]
			  //wt = 100;
		  }
		  strob = get_tmr(waits);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff f9a8 	bl	8000f34 <get_tmr>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <main+0x8c8>)
 8001be8:	6013      	str	r3, [r2, #0]
#endif


	  //HAL_Delay(wt);

	  if (strob) {
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <main+0x8c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00d      	beq.n	8001c0e <main+0x8a6>
		  if (check_tmr(strob)) {
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <main+0x8c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f9ac 	bl	8000f54 <check_tmr>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <main+0x8a6>
			  QuitLoop = 0;
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <main+0x8fc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
			  strob = 0;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <main+0x8c8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    while (!QuitLoop) {
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <main+0x8fc>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f083 0301 	eor.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f aca6 	bne.w	800156c <main+0x204>
 8001c20:	e025      	b.n	8001c6e <main+0x906>
 8001c22:	bf00      	nop
 8001c24:	200016a4 	.word	0x200016a4
 8001c28:	200014a0 	.word	0x200014a0
 8001c2c:	20001944 	.word	0x20001944
 8001c30:	20001484 	.word	0x20001484
 8001c34:	20000024 	.word	0x20000024
 8001c38:	2000002c 	.word	0x2000002c
 8001c3c:	2000056c 	.word	0x2000056c
 8001c40:	20000020 	.word	0x20000020
 8001c44:	20000025 	.word	0x20000025
 8001c48:	2000056e 	.word	0x2000056e
 8001c4c:	08015ec8 	.word	0x08015ec8
 8001c50:	2000066c 	.word	0x2000066c
 8001c54:	08015c40 	.word	0x08015c40
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	08015ed4 	.word	0x08015ed4
 8001c64:	20001481 	.word	0x20001481
 8001c68:	08015ee8 	.word	0x08015ee8
	  if (QuitLoop) break;
 8001c6c:	bf00      	nop
    /* USER CODE BEGIN 3 */

    }

#ifdef SET_W25FLASH
    if (pbuf) free(pbuf);
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <main+0x938>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <main+0x918>
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <main+0x938>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f013 f8dc 	bl	8014e38 <free>
#endif

    Report(NULL, true, "Quit command received.%s", eol);
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <main+0x93c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <main+0x940>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fa1d 	bl	80010c8 <Report>

    f_mount(NULL, (const TCHAR *)SDPath, 1);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <main+0x944>)
 8001c92:	2000      	movs	r0, #0
 8001c94:	f010 fde8 	bl	8012868 <f_mount>

    LOOP_FOREVER();
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f002 f91d 	bl	8003ed8 <HAL_Delay>
 8001c9e:	e7fb      	b.n	8001c98 <main+0x930>
 8001ca0:	2000149c 	.word	0x2000149c
 8001ca4:	20000020 	.word	0x20000020
 8001ca8:	08015f08 	.word	0x08015f08
 8001cac:	20001944 	.word	0x20001944

08001cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b094      	sub	sp, #80	; 0x50
 8001cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	2230      	movs	r2, #48	; 0x30
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f013 f8d0 	bl	8014e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <SystemClock_Config+0xd0>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <SystemClock_Config+0xd0>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <SystemClock_Config+0xd0>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <SystemClock_Config+0xd4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a22      	ldr	r2, [pc, #136]	; (8001d84 <SystemClock_Config+0xd4>)
 8001cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <SystemClock_Config+0xd4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001d0c:	2305      	movs	r3, #5
 8001d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d16:	2301      	movs	r3, #1
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d24:	2319      	movs	r3, #25
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 8001d28:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001d32:	2306      	movs	r3, #6
 8001d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0320 	add.w	r3, r7, #32
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fa60 	bl	8006200 <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d46:	f000 fe1b 	bl	8002980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	2104      	movs	r1, #4
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fcc1 	bl	80066f0 <HAL_RCC_ClockConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001d74:	f000 fe04 	bl	8002980 <Error_Handler>
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3750      	adds	r7, #80	; 0x50
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <MX_RTC_Init+0xac>)
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <MX_RTC_Init+0xb0>)
 8001da4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <MX_RTC_Init+0xac>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <MX_RTC_Init+0xac>)
 8001dae:	227f      	movs	r2, #127	; 0x7f
 8001db0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <MX_RTC_Init+0xac>)
 8001db4:	22ff      	movs	r2, #255	; 0xff
 8001db6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <MX_RTC_Init+0xac>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_RTC_Init+0xac>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_RTC_Init+0xac>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dca:	481a      	ldr	r0, [pc, #104]	; (8001e34 <MX_RTC_Init+0xac>)
 8001dcc:	f005 f830 	bl	8006e30 <HAL_RTC_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001dd6:	f000 fdd3 	bl	8002980 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2201      	movs	r2, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	480f      	ldr	r0, [pc, #60]	; (8001e34 <MX_RTC_Init+0xac>)
 8001df6:	f005 f891 	bl	8006f1c <HAL_RTC_SetTime>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001e00:	f000 fdbe 	bl	8002980 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e04:	2301      	movs	r3, #1
 8001e06:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x14;
 8001e0c:	2314      	movs	r3, #20
 8001e0e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001e10:	2324      	movs	r3, #36	; 0x24
 8001e12:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e14:	463b      	mov	r3, r7
 8001e16:	2201      	movs	r2, #1
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <MX_RTC_Init+0xac>)
 8001e1c:	f005 f976 	bl	800710c <HAL_RTC_SetDate>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001e26:	f000 fdab 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200001b8 	.word	0x200001b8
 8001e38:	40002800 	.word	0x40002800

08001e3c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <MX_SDIO_SD_Init+0x44>)
 8001e44:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e5e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 48;
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e68:	2230      	movs	r2, #48	; 0x30
 8001e6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <MX_SDIO_SD_Init+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDIO_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	200001d8 	.word	0x200001d8
 8001e80:	40012c00 	.word	0x40012c00

08001e84 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI4_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI4_Init+0x64>)
 8001ed6:	f006 fed8 	bl	8008c8a <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fd4e 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200002bc 	.word	0x200002bc
 8001eec:	40013400 	.word	0x40013400

08001ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	463b      	mov	r3, r7
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f16:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f24:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f38:	4813      	ldr	r0, [pc, #76]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f3a:	f008 f887 	bl	800a04c <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 fd1c 	bl	8002980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f56:	f008 fa41 	bl	800a3dc <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f60:	f000 fd0e 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f72:	f008 fc5d 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f7c:	f000 fd00 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200003d4 	.word	0x200003d4

08001f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */

	//       MODEM

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_USART2_UART_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	f008 fcc4 	bl	800a950 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fce:	f000 fcd7 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000041c 	.word	0x2000041c
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <MX_USART3_UART_Init+0x50>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_USART3_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002018:	f008 fc9a 	bl	800a950 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002022:	f000 fcad 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000460 	.word	0x20000460
 8002030:	40004800 	.word	0x40004800

08002034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <MX_DMA_Init+0x98>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <MX_DMA_Init+0x98>)
 8002044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <MX_DMA_Init+0x98>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <MX_DMA_Init+0x98>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <MX_DMA_Init+0x98>)
 8002060:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <MX_DMA_Init+0x98>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	200e      	movs	r0, #14
 8002078:	f002 f82d 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800207c:	200e      	movs	r0, #14
 800207e:	f002 f846 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2011      	movs	r0, #17
 8002088:	f002 f825 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800208c:	2011      	movs	r0, #17
 800208e:	f002 f83e 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2038      	movs	r0, #56	; 0x38
 8002098:	f002 f81d 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800209c:	2038      	movs	r0, #56	; 0x38
 800209e:	f002 f836 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2039      	movs	r0, #57	; 0x39
 80020a8:	f002 f815 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80020ac:	2039      	movs	r0, #57	; 0x39
 80020ae:	f002 f82e 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	203b      	movs	r0, #59	; 0x3b
 80020b8:	f002 f80d 	bl	80040d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020bc:	203b      	movs	r0, #59	; 0x3b
 80020be:	f002 f826 	bl	800410e <HAL_NVIC_EnableIRQ>

}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	4b64      	ldr	r3, [pc, #400]	; (800227c <MX_GPIO_Init+0x1ac>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a63      	ldr	r2, [pc, #396]	; (800227c <MX_GPIO_Init+0x1ac>)
 80020f0:	f043 0310 	orr.w	r3, r3, #16
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b61      	ldr	r3, [pc, #388]	; (800227c <MX_GPIO_Init+0x1ac>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a5c      	ldr	r2, [pc, #368]	; (800227c <MX_GPIO_Init+0x1ac>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b5a      	ldr	r3, [pc, #360]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b56      	ldr	r3, [pc, #344]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a55      	ldr	r2, [pc, #340]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b53      	ldr	r3, [pc, #332]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b4f      	ldr	r3, [pc, #316]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a4e      	ldr	r2, [pc, #312]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b4c      	ldr	r3, [pc, #304]	; (800227c <MX_GPIO_Init+0x1ac>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b48      	ldr	r3, [pc, #288]	; (800227c <MX_GPIO_Init+0x1ac>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a47      	ldr	r2, [pc, #284]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b45      	ldr	r3, [pc, #276]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a40      	ldr	r2, [pc, #256]	; (800227c <MX_GPIO_Init+0x1ac>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <MX_GPIO_Init+0x1ac>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_RST_Pin|SPI4_HOLD_Pin, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	2109      	movs	r1, #9
 8002192:	483b      	ldr	r0, [pc, #236]	; (8002280 <MX_GPIO_Init+0x1b0>)
 8002194:	f002 fd84 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOD_WAKE_GPIO_Port, MOD_WAKE_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	2120      	movs	r1, #32
 800219c:	4839      	ldr	r0, [pc, #228]	; (8002284 <MX_GPIO_Init+0x1b4>)
 800219e:	f002 fd7f 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOD_RST_GPIO_Port, MOD_RST_Pin, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	4837      	ldr	r0, [pc, #220]	; (8002284 <MX_GPIO_Init+0x1b4>)
 80021a8:	f002 fd7a 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOD_PWR_ON_Pin|LED_MODE_Pin|SPI4_WP_Pin, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	f242 4102 	movw	r1, #9218	; 0x2402
 80021b2:	4833      	ldr	r0, [pc, #204]	; (8002280 <MX_GPIO_Init+0x1b0>)
 80021b4:	f002 fd74 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_CS1_GPIO_Port, SPI4_CS1_Pin, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021be:	4832      	ldr	r0, [pc, #200]	; (8002288 <MX_GPIO_Init+0x1b8>)
 80021c0:	f002 fd6e 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 80021c4:	2308      	movs	r3, #8
 80021c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	4619      	mov	r1, r3
 80021da:	4829      	ldr	r0, [pc, #164]	; (8002280 <MX_GPIO_Init+0x1b0>)
 80021dc:	f002 fbb4 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOD_WAKE_Pin */
  GPIO_InitStruct.Pin = MOD_WAKE_Pin;
 80021e0:	2320      	movs	r3, #32
 80021e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e4:	2301      	movs	r3, #1
 80021e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOD_WAKE_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	4823      	ldr	r0, [pc, #140]	; (8002284 <MX_GPIO_Init+0x1b4>)
 80021f8:	f002 fba6 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOD_RST_Pin */
  GPIO_InitStruct.Pin = MOD_RST_Pin;
 80021fc:	2340      	movs	r3, #64	; 0x40
 80021fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002204:	2301      	movs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOD_RST_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	481c      	ldr	r0, [pc, #112]	; (8002284 <MX_GPIO_Init+0x1b4>)
 8002214:	f002 fb98 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = MOD_PWR_ON_Pin;
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800221e:	2311      	movs	r3, #17
 8002220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_GPIO_Init+0x1b0>)
 8002232:	f002 fb89 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_MODE_Pin SPI4_HOLD_Pin SPI4_WP_Pin */
  GPIO_InitStruct.Pin = LED_MODE_Pin|SPI4_HOLD_Pin|SPI4_WP_Pin;
 8002236:	f242 0303 	movw	r3, #8195	; 0x2003
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002240:	2301      	movs	r3, #1
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002244:	2301      	movs	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	480c      	ldr	r0, [pc, #48]	; (8002280 <MX_GPIO_Init+0x1b0>)
 8002250:	f002 fb7a 	bl	8004948 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_CS1_Pin */
  GPIO_InitStruct.Pin = SPI4_CS1_Pin;
 8002254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225a:	2301      	movs	r3, #1
 800225c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800225e:	2301      	movs	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002262:	2302      	movs	r3, #2
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI4_CS1_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4806      	ldr	r0, [pc, #24]	; (8002288 <MX_GPIO_Init+0x1b8>)
 800226e:	f002 fb6b 	bl	8004948 <HAL_GPIO_Init>

}
 8002272:	bf00      	nop
 8002274:	3730      	adds	r7, #48	; 0x30
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40021000 	.word	0x40021000
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400

0800228c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM2) {
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229c:	d118      	bne.n	80022d0 <HAL_TIM_PeriodElapsedCallback+0x44>
		vatra++;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80022a6:	6013      	str	r3, [r2, #0]
		if ((vatra & 3) == 3) {
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d109      	bne.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			seconda++;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80022bc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_MODE_GPIO_Port, LED_MODE_Pin);
 80022be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c2:	4807      	ldr	r0, [pc, #28]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80022c4:	f002 fd05 	bl	8004cd2 <HAL_GPIO_TogglePin>
		}
		//
		CDC_Recv((uint8_t *)rxVCP, &lenVCP);
 80022c8:	4906      	ldr	r1, [pc, #24]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80022ca:	4807      	ldr	r0, [pc, #28]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80022cc:	f012 f897 	bl	80143fe <CDC_Recv>

  /* USER CODE END Callback 0 */
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20001478 	.word	0x20001478
 80022dc:	2000147c 	.word	0x2000147c
 80022e0:	40021000 	.word	0x40021000
 80022e4:	20001724 	.word	0x20001724
 80022e8:	20001728 	.word	0x20001728

080022ec <HAL_UART_TxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) uartRdy = 1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_UART_TxCpltCallback+0x38>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d103      	bne.n	8002306 <HAL_UART_TxCpltCallback+0x1a>
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_UART_TxCpltCallback+0x3c>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
	else
	if (huart->Instance == USART2) uartRdyMod = 1;
}
 8002304:	e007      	b.n	8002316 <HAL_UART_TxCpltCallback+0x2a>
	if (huart->Instance == USART2) uartRdyMod = 1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_UART_TxCpltCallback+0x40>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d102      	bne.n	8002316 <HAL_UART_TxCpltCallback+0x2a>
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <HAL_UART_TxCpltCallback+0x44>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40004800 	.word	0x40004800
 8002328:	20000015 	.word	0x20000015
 800232c:	40004400 	.word	0x40004400
 8002330:	20000014 	.word	0x20000014

08002334 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a9d      	ldr	r2, [pc, #628]	; (80025b8 <HAL_UART_RxCpltCallback+0x284>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 8086 	bne.w	8002454 <HAL_UART_RxCpltCallback+0x120>
		//
		if ((uRxByteMod > 0x0d) && (uRxByteMod < 0x80)) {
 8002348:	4b9c      	ldr	r3, [pc, #624]	; (80025bc <HAL_UART_RxCpltCallback+0x288>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b0d      	cmp	r3, #13
 8002350:	d91a      	bls.n	8002388 <HAL_UART_RxCpltCallback+0x54>
 8002352:	4b9a      	ldr	r3, [pc, #616]	; (80025bc <HAL_UART_RxCpltCallback+0x288>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	b25b      	sxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	db14      	blt.n	8002388 <HAL_UART_RxCpltCallback+0x54>
			if (uRxByteMod >= 0x20) adone = 1;
 800235e:	4b97      	ldr	r3, [pc, #604]	; (80025bc <HAL_UART_RxCpltCallback+0x288>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b1f      	cmp	r3, #31
 8002366:	d902      	bls.n	800236e <HAL_UART_RxCpltCallback+0x3a>
 8002368:	4b95      	ldr	r3, [pc, #596]	; (80025c0 <HAL_UART_RxCpltCallback+0x28c>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
			if (adone) RxBufMod[rx_uk_mod] = (char)uRxByteMod;
 800236e:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_UART_RxCpltCallback+0x28c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_UART_RxCpltCallback+0x54>
 8002376:	4b93      	ldr	r3, [pc, #588]	; (80025c4 <HAL_UART_RxCpltCallback+0x290>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <HAL_UART_RxCpltCallback+0x288>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2d9      	uxtb	r1, r3
 8002384:	4b90      	ldr	r3, [pc, #576]	; (80025c8 <HAL_UART_RxCpltCallback+0x294>)
 8002386:	5499      	strb	r1, [r3, r2]
		}
		//
		if (adone) {
 8002388:	4b8d      	ldr	r3, [pc, #564]	; (80025c0 <HAL_UART_RxCpltCallback+0x28c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d05b      	beq.n	8002448 <HAL_UART_RxCpltCallback+0x114>
			if ( (uRxByteMod == 0x0a) || (uRxByteMod == 0x3e) ) {// '\n' || '>'
 8002390:	4b8a      	ldr	r3, [pc, #552]	; (80025bc <HAL_UART_RxCpltCallback+0x288>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b0a      	cmp	r3, #10
 8002398:	d004      	beq.n	80023a4 <HAL_UART_RxCpltCallback+0x70>
 800239a:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_UART_RxCpltCallback+0x288>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b3e      	cmp	r3, #62	; 0x3e
 80023a2:	d14a      	bne.n	800243a <HAL_UART_RxCpltCallback+0x106>
				//if (uRxByteMod != 0x3e) strcat(RxBufMod, "\r\n");//0x0D 0x0A
				//if (strstr(RxBufMod, "OK")) {
					int len = strlen(RxBufMod);
 80023a4:	4888      	ldr	r0, [pc, #544]	; (80025c8 <HAL_UART_RxCpltCallback+0x294>)
 80023a6:	f7fd ff23 	bl	80001f0 <strlen>
 80023aa:	4603      	mov	r3, r0
 80023ac:	613b      	str	r3, [r7, #16]
					if (gsmAckFlag) {
 80023ae:	4b87      	ldr	r3, [pc, #540]	; (80025cc <HAL_UART_RxCpltCallback+0x298>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d037      	beq.n	8002426 <HAL_UART_RxCpltCallback+0xf2>
						// Блок помещает в очередь ответов на команду очередное сообщение от модуля GSM
						char *from = (char *)calloc(1, len + 1);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	3301      	adds	r3, #1
 80023ba:	4619      	mov	r1, r3
 80023bc:	2001      	movs	r0, #1
 80023be:	f012 fc5d 	bl	8014c7c <calloc>
 80023c2:	4603      	mov	r3, r0
 80023c4:	60fb      	str	r3, [r7, #12]
						if (from) {
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d025      	beq.n	8002418 <HAL_UART_RxCpltCallback+0xe4>
							memcpy(from, RxBufMod, len);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	461a      	mov	r2, r3
 80023d0:	497d      	ldr	r1, [pc, #500]	; (80025c8 <HAL_UART_RxCpltCallback+0x294>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f012 fd38 	bl	8014e48 <memcpy>
							if (putSRECQ(from, &gsmAck) < 0) {
 80023d8:	497d      	ldr	r1, [pc, #500]	; (80025d0 <HAL_UART_RxCpltCallback+0x29c>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f7fe f97c 	bl	80006d8 <putSRECQ>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da0a      	bge.n	80023fc <HAL_UART_RxCpltCallback+0xc8>
								devError |= devQue;
 80023e6:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <HAL_UART_RxCpltCallback+0x2a0>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b78      	ldr	r3, [pc, #480]	; (80025d4 <HAL_UART_RxCpltCallback+0x2a0>)
 80023f2:	801a      	strh	r2, [r3, #0]
								free(from);
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f012 fd1f 	bl	8014e38 <free>
 80023fa:	e014      	b.n	8002426 <HAL_UART_RxCpltCallback+0xf2>
							} else {
								if (devError & devQue) devError &= ~devQue;
 80023fc:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <HAL_UART_RxCpltCallback+0x2a0>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00e      	beq.n	8002426 <HAL_UART_RxCpltCallback+0xf2>
 8002408:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <HAL_UART_RxCpltCallback+0x2a0>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <HAL_UART_RxCpltCallback+0x2a0>)
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	e006      	b.n	8002426 <HAL_UART_RxCpltCallback+0xf2>
							}
						} else {
							devError |= devMEM;
 8002418:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <HAL_UART_RxCpltCallback+0x2a0>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	b29a      	uxth	r2, r3
 8002422:	4b6c      	ldr	r3, [pc, #432]	; (80025d4 <HAL_UART_RxCpltCallback+0x2a0>)
 8002424:	801a      	strh	r2, [r3, #0]
						}
						//-----------------------------------------------------------------------------
					}
				//}
				//strcpy(atAck, RxBufMod);
				rx_uk_mod = 0;
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_UART_RxCpltCallback+0x290>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
				memset(RxBufMod, 0, sizeof(RxBufMod));
 800242c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002430:	2100      	movs	r1, #0
 8002432:	4865      	ldr	r0, [pc, #404]	; (80025c8 <HAL_UART_RxCpltCallback+0x294>)
 8002434:	f012 fd16 	bl	8014e64 <memset>
			if ( (uRxByteMod == 0x0a) || (uRxByteMod == 0x3e) ) {// '\n' || '>'
 8002438:	e006      	b.n	8002448 <HAL_UART_RxCpltCallback+0x114>
				//cmd = sModAck;
			} else rx_uk_mod++;
 800243a:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <HAL_UART_RxCpltCallback+0x290>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	3301      	adds	r3, #1
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_UART_RxCpltCallback+0x290>)
 8002446:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, (uint8_t *)&uRxByteMod, 1);
 8002448:	2201      	movs	r2, #1
 800244a:	495c      	ldr	r1, [pc, #368]	; (80025bc <HAL_UART_RxCpltCallback+0x288>)
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f008 facc 	bl	800a9ea <HAL_UART_Receive_IT>
			memset(RxBuf, 0, sizeof(RxBuf));
		} else rx_uk++;

		HAL_UART_Receive_IT(huart, (uint8_t *)&uRxByte, 1);
	}
}
 8002452:	e219      	b.n	8002888 <HAL_UART_RxCpltCallback+0x554>
	if (huart->Instance == USART3) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a5f      	ldr	r2, [pc, #380]	; (80025d8 <HAL_UART_RxCpltCallback+0x2a4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	f040 8214 	bne.w	8002888 <HAL_UART_RxCpltCallback+0x554>
		RxBuf[rx_uk & 0xff] = (char)uRxByte;
 8002460:	4b5e      	ldr	r3, [pc, #376]	; (80025dc <HAL_UART_RxCpltCallback+0x2a8>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_UART_RxCpltCallback+0x2ac>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2d9      	uxtb	r1, r3
 800246e:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002470:	5499      	strb	r1, [r3, r2]
		if ((uRxByte == 0x0a) && (rx_uk >= 2)) {//end of line
 8002472:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b0a      	cmp	r3, #10
 800247a:	f040 81f9 	bne.w	8002870 <HAL_UART_RxCpltCallback+0x53c>
 800247e:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_UART_RxCpltCallback+0x2a8>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	f240 81f3 	bls.w	8002870 <HAL_UART_RxCpltCallback+0x53c>
			char *uk = NULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
			icmd = sNone;
 800248e:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <HAL_UART_RxCpltCallback+0x2b4>)
 8002490:	22ff      	movs	r2, #255	; 0xff
 8002492:	701a      	strb	r2, [r3, #0]
			uk = strchr(RxBuf, '\r');
 8002494:	210d      	movs	r1, #13
 8002496:	4853      	ldr	r0, [pc, #332]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002498:	f012 fe21 	bl	80150de <strchr>
 800249c:	62f8      	str	r0, [r7, #44]	; 0x2c
			if (uk) *uk = '\0';
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_UART_RxCpltCallback+0x178>
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e00a      	b.n	80024c2 <HAL_UART_RxCpltCallback+0x18e>
				if ((uk = strchr(RxBuf, '\n'))) *uk = '\0';
 80024ac:	210a      	movs	r1, #10
 80024ae:	484d      	ldr	r0, [pc, #308]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 80024b0:	f012 fe15 	bl	80150de <strchr>
 80024b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_UART_RxCpltCallback+0x18e>
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
			if ((uk = strstr(RxBuf, "epoch="))) {
 80024c2:	494a      	ldr	r1, [pc, #296]	; (80025ec <HAL_UART_RxCpltCallback+0x2b8>)
 80024c4:	4847      	ldr	r0, [pc, #284]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 80024c6:	f012 fe32 	bl	801512e <strstr>
 80024ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d013      	beq.n	80024fa <HAL_UART_RxCpltCallback+0x1c6>
				uint32_t ep = atol(uk + 6);
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	3306      	adds	r3, #6
 80024d6:	4618      	mov	r0, r3
 80024d8:	f012 fbcc 	bl	8014c74 <atol>
 80024dc:	4603      	mov	r3, r0
 80024de:	617b      	str	r3, [r7, #20]
				if (ep > epoch) {
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_UART_RxCpltCallback+0x2bc>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	f240 81b8 	bls.w	800285c <HAL_UART_RxCpltCallback+0x528>
					set_Date(ep);
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	f7fe fd8b 	bl	8001008 <set_Date>
					cmd = sGetMsg;
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_UART_RxCpltCallback+0x2c0>)
 80024f4:	2209      	movs	r2, #9
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e1b0      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ((uk = strstr(RxBuf, "quit"))) {
 80024fa:	493f      	ldr	r1, [pc, #252]	; (80025f8 <HAL_UART_RxCpltCallback+0x2c4>)
 80024fc:	4839      	ldr	r0, [pc, #228]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 80024fe:	f012 fe16 	bl	801512e <strstr>
 8002502:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_UART_RxCpltCallback+0x1ea>
				HAL_GPIO_WritePin(MOD_PWR_ON_GPIO_Port, MOD_PWR_ON_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002510:	483a      	ldr	r0, [pc, #232]	; (80025fc <HAL_UART_RxCpltCallback+0x2c8>)
 8002512:	f002 fbc5 	bl	8004ca0 <HAL_GPIO_WritePin>
				QuitLoop = true;
 8002516:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <HAL_UART_RxCpltCallback+0x2cc>)
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
 800251c:	e19e      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ((uk = strstr(RxBuf, "restart"))) {
 800251e:	4939      	ldr	r1, [pc, #228]	; (8002604 <HAL_UART_RxCpltCallback+0x2d0>)
 8002520:	4830      	ldr	r0, [pc, #192]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002522:	f012 fe04 	bl	801512e <strstr>
 8002526:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_UART_RxCpltCallback+0x216>
				if (!QuitLoop) {
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_UART_RxCpltCallback+0x2cc>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_UART_RxCpltCallback+0x212>
					cmd = sRestart;
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_UART_RxCpltCallback+0x2c0>)
 8002540:	220f      	movs	r2, #15
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e18a      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
					NVIC_SystemReset();
 8002546:	f7fe f87d 	bl	8000644 <__NVIC_SystemReset>
			} else if ((uk = strstr(RxBuf, "get"))) {
 800254a:	492f      	ldr	r1, [pc, #188]	; (8002608 <HAL_UART_RxCpltCallback+0x2d4>)
 800254c:	4825      	ldr	r0, [pc, #148]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 800254e:	f012 fdee 	bl	801512e <strstr>
 8002552:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_UART_RxCpltCallback+0x22e>
				cmd = sGetMsg;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_UART_RxCpltCallback+0x2c0>)
 800255c:	2209      	movs	r2, #9
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e17c      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ( ((uk = strstr(RxBuf, "m:"))) || ((uk = strstr(RxBuf, "M:"))) ) {
 8002562:	492a      	ldr	r1, [pc, #168]	; (800260c <HAL_UART_RxCpltCallback+0x2d8>)
 8002564:	481f      	ldr	r0, [pc, #124]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002566:	f012 fde2 	bl	801512e <strstr>
 800256a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_UART_RxCpltCallback+0x250>
 8002572:	4927      	ldr	r1, [pc, #156]	; (8002610 <HAL_UART_RxCpltCallback+0x2dc>)
 8002574:	481b      	ldr	r0, [pc, #108]	; (80025e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002576:	f012 fdda 	bl	801512e <strstr>
 800257a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8089 	beq.w	8002696 <HAL_UART_RxCpltCallback+0x362>
				uk += 2;
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	3302      	adds	r3, #2
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (strstr(uk, "AT")) {
 800258a:	4922      	ldr	r1, [pc, #136]	; (8002614 <HAL_UART_RxCpltCallback+0x2e0>)
 800258c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800258e:	f012 fdce 	bl	801512e <strstr>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d043      	beq.n	8002620 <HAL_UART_RxCpltCallback+0x2ec>
					sprintf(atCmd, "\r\n%s", uk);
 8002598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259a:	491f      	ldr	r1, [pc, #124]	; (8002618 <HAL_UART_RxCpltCallback+0x2e4>)
 800259c:	481f      	ldr	r0, [pc, #124]	; (800261c <HAL_UART_RxCpltCallback+0x2e8>)
 800259e:	f012 fd6f 	bl	8015080 <siprintf>
					icmd = getCmdInd(atCmd);
 80025a2:	481e      	ldr	r0, [pc, #120]	; (800261c <HAL_UART_RxCpltCallback+0x2e8>)
 80025a4:	f000 f9f2 	bl	800298c <getCmdInd>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_UART_RxCpltCallback+0x2b4>)
 80025ae:	701a      	strb	r2, [r3, #0]
					cmd = sModCmd;
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_UART_RxCpltCallback+0x2c0>)
 80025b2:	2204      	movs	r2, #4
 80025b4:	701a      	strb	r2, [r3, #0]
				if (strstr(uk, "AT")) {
 80025b6:	e151      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
 80025b8:	40004400 	.word	0x40004400
 80025bc:	2000086d 	.word	0x2000086d
 80025c0:	200017fc 	.word	0x200017fc
 80025c4:	2000086c 	.word	0x2000086c
 80025c8:	2000076c 	.word	0x2000076c
 80025cc:	200017fb 	.word	0x200017fb
 80025d0:	200017a8 	.word	0x200017a8
 80025d4:	20000564 	.word	0x20000564
 80025d8:	40004800 	.word	0x40004800
 80025dc:	20001070 	.word	0x20001070
 80025e0:	20001071 	.word	0x20001071
 80025e4:	20000870 	.word	0x20000870
 80025e8:	20000025 	.word	0x20000025
 80025ec:	08015f24 	.word	0x08015f24
 80025f0:	20000018 	.word	0x20000018
 80025f4:	20000024 	.word	0x20000024
 80025f8:	08015f2c 	.word	0x08015f2c
 80025fc:	40021000 	.word	0x40021000
 8002600:	20001481 	.word	0x20001481
 8002604:	08015f34 	.word	0x08015f34
 8002608:	08015f3c 	.word	0x08015f3c
 800260c:	08015f40 	.word	0x08015f40
 8002610:	08015f44 	.word	0x08015f44
 8002614:	08015f48 	.word	0x08015f48
 8002618:	08015f4c 	.word	0x08015f4c
 800261c:	2000056c 	.word	0x2000056c
				} else if (strstr(uk, "PWR_ON")) {//MOD PWR = 1
 8002620:	499b      	ldr	r1, [pc, #620]	; (8002890 <HAL_UART_RxCpltCallback+0x55c>)
 8002622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002624:	f012 fd83 	bl	801512e <strstr>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_UART_RxCpltCallback+0x302>
					cmd = sModPwrOn;
 800262e:	4b99      	ldr	r3, [pc, #612]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002630:	2206      	movs	r2, #6
 8002632:	701a      	strb	r2, [r3, #0]
				if (strstr(uk, "AT")) {
 8002634:	e112      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
				} else if (strstr(uk, "PWR_OFF")) {//MOD PWR = 0
 8002636:	4998      	ldr	r1, [pc, #608]	; (8002898 <HAL_UART_RxCpltCallback+0x564>)
 8002638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800263a:	f012 fd78 	bl	801512e <strstr>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_UART_RxCpltCallback+0x318>
					cmd = sModPwrOff;
 8002644:	4b93      	ldr	r3, [pc, #588]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002646:	2207      	movs	r2, #7
 8002648:	701a      	strb	r2, [r3, #0]
				if (strstr(uk, "AT")) {
 800264a:	e107      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
				} else if (strstr(uk, "RST")) {//MOD RESET = 0
 800264c:	4993      	ldr	r1, [pc, #588]	; (800289c <HAL_UART_RxCpltCallback+0x568>)
 800264e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002650:	f012 fd6d 	bl	801512e <strstr>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_UART_RxCpltCallback+0x32e>
					cmd = sModRst;
 800265a:	4b8e      	ldr	r3, [pc, #568]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 800265c:	2208      	movs	r2, #8
 800265e:	701a      	strb	r2, [r3, #0]
				if (strstr(uk, "AT")) {
 8002660:	e0fc      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
				} else if (strstr(uk, "Z")) {//Ctrl+Z
 8002662:	215a      	movs	r1, #90	; 0x5a
 8002664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002666:	f012 fd3a 	bl	80150de <strchr>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_UART_RxCpltCallback+0x34e>
					sprintf(atCmd, "%c\r\n", 0x1a);
 8002670:	221a      	movs	r2, #26
 8002672:	498b      	ldr	r1, [pc, #556]	; (80028a0 <HAL_UART_RxCpltCallback+0x56c>)
 8002674:	488b      	ldr	r0, [pc, #556]	; (80028a4 <HAL_UART_RxCpltCallback+0x570>)
 8002676:	f012 fd03 	bl	8015080 <siprintf>
					cmd = sModCmd;
 800267a:	4b86      	ldr	r3, [pc, #536]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 800267c:	2204      	movs	r2, #4
 800267e:	701a      	strb	r2, [r3, #0]
				if (strstr(uk, "AT")) {
 8002680:	e0ec      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
					sprintf(atCmd, "%s%c", uk, 0x1a);
 8002682:	231a      	movs	r3, #26
 8002684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002686:	4988      	ldr	r1, [pc, #544]	; (80028a8 <HAL_UART_RxCpltCallback+0x574>)
 8002688:	4886      	ldr	r0, [pc, #536]	; (80028a4 <HAL_UART_RxCpltCallback+0x570>)
 800268a:	f012 fcf9 	bl	8015080 <siprintf>
					cmd = sModCmd;
 800268e:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002690:	2204      	movs	r2, #4
 8002692:	701a      	strb	r2, [r3, #0]
				if (strstr(uk, "AT")) {
 8002694:	e0e2      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			else if ((uk = strstr(RxBuf, "cat="))) {
 8002696:	4985      	ldr	r1, [pc, #532]	; (80028ac <HAL_UART_RxCpltCallback+0x578>)
 8002698:	4885      	ldr	r0, [pc, #532]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 800269a:	f012 fd48 	bl	801512e <strstr>
 800269e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_UART_RxCpltCallback+0x388>
				uk += 4;
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	3304      	adds	r3, #4
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
				strcpy(str_name, uk);
 80026ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026ae:	4881      	ldr	r0, [pc, #516]	; (80028b4 <HAL_UART_RxCpltCallback+0x580>)
 80026b0:	f012 fd22 	bl	80150f8 <strcpy>
				cmd = sRdFile;
 80026b4:	4b77      	ldr	r3, [pc, #476]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e0cf      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ((uk = strstr(RxBuf, "mkdir="))) {
 80026bc:	497e      	ldr	r1, [pc, #504]	; (80028b8 <HAL_UART_RxCpltCallback+0x584>)
 80026be:	487c      	ldr	r0, [pc, #496]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 80026c0:	f012 fd35 	bl	801512e <strstr>
 80026c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_UART_RxCpltCallback+0x3ae>
				uk += 6;
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	3306      	adds	r3, #6
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
				strcpy(str_name, uk);
 80026d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026d4:	4877      	ldr	r0, [pc, #476]	; (80028b4 <HAL_UART_RxCpltCallback+0x580>)
 80026d6:	f012 fd0f 	bl	80150f8 <strcpy>
				cmd = sMkDir;
 80026da:	4b6e      	ldr	r3, [pc, #440]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 80026dc:	220d      	movs	r2, #13
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e0bc      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ((uk = strstr(RxBuf, "dir="))) {
 80026e2:	4976      	ldr	r1, [pc, #472]	; (80028bc <HAL_UART_RxCpltCallback+0x588>)
 80026e4:	4872      	ldr	r0, [pc, #456]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 80026e6:	f012 fd22 	bl	801512e <strstr>
 80026ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_UART_RxCpltCallback+0x3d4>
				uk += 4;
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	3304      	adds	r3, #4
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				strcpy(str_name, uk);
 80026f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026fa:	486e      	ldr	r0, [pc, #440]	; (80028b4 <HAL_UART_RxCpltCallback+0x580>)
 80026fc:	f012 fcfc 	bl	80150f8 <strcpy>
				cmd = sRdDir;
 8002700:	4b64      	ldr	r3, [pc, #400]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002702:	220b      	movs	r2, #11
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e0a9      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ((uk = strstr(RxBuf, "rm="))) {
 8002708:	496d      	ldr	r1, [pc, #436]	; (80028c0 <HAL_UART_RxCpltCallback+0x58c>)
 800270a:	4869      	ldr	r0, [pc, #420]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 800270c:	f012 fd0f 	bl	801512e <strstr>
 8002710:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_UART_RxCpltCallback+0x3fa>
				uk += 3;
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	3303      	adds	r3, #3
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
				strcpy(str_name, uk);
 800271e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002720:	4864      	ldr	r0, [pc, #400]	; (80028b4 <HAL_UART_RxCpltCallback+0x580>)
 8002722:	f012 fce9 	bl	80150f8 <strcpy>
				cmd = sRemove;
 8002726:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002728:	220e      	movs	r2, #14
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e096      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			else if ((uk = strstr(RxBuf, "erase="))) {//erase:0 //erase:max = erase:4096
 800272e:	4965      	ldr	r1, [pc, #404]	; (80028c4 <HAL_UART_RxCpltCallback+0x590>)
 8002730:	485f      	ldr	r0, [pc, #380]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 8002732:	f012 fcfc 	bl	801512e <strstr>
 8002736:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d026      	beq.n	800278c <HAL_UART_RxCpltCallback+0x458>
				if (cmd == sNone) {
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002740:	f993 3000 	ldrsb.w	r3, [r3]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	f040 8088 	bne.w	800285c <HAL_UART_RxCpltCallback+0x528>
					if (strstr(uk + 6, "max")) item = w25qxx.SectorCount;//erase all sectors
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	3306      	adds	r3, #6
 8002750:	495d      	ldr	r1, [pc, #372]	; (80028c8 <HAL_UART_RxCpltCallback+0x594>)
 8002752:	4618      	mov	r0, r3
 8002754:	f012 fceb 	bl	801512e <strstr>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_UART_RxCpltCallback+0x432>
 800275e:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <HAL_UART_RxCpltCallback+0x598>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
 8002764:	e006      	b.n	8002774 <HAL_UART_RxCpltCallback+0x440>
										  else item = atol(uk + 6);      //erase sector
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	3306      	adds	r3, #6
 800276a:	4618      	mov	r0, r3
 800276c:	f012 fa82 	bl	8014c74 <atol>
 8002770:	4603      	mov	r3, r0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
					if ((item >= 0) && (item <= w25qxx.SectorCount)) {
 8002774:	4b55      	ldr	r3, [pc, #340]	; (80028cc <HAL_UART_RxCpltCallback+0x598>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800277a:	429a      	cmp	r2, r3
 800277c:	d86e      	bhi.n	800285c <HAL_UART_RxCpltCallback+0x528>
						esector = item;
 800277e:	4a54      	ldr	r2, [pc, #336]	; (80028d0 <HAL_UART_RxCpltCallback+0x59c>)
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	6013      	str	r3, [r2, #0]
						cmd = sErase;
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e067      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ((uk = strstr(RxBuf, "read="))) {
 800278c:	4951      	ldr	r1, [pc, #324]	; (80028d4 <HAL_UART_RxCpltCallback+0x5a0>)
 800278e:	4848      	ldr	r0, [pc, #288]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 8002790:	f012 fccd 	bl	801512e <strstr>
 8002794:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_UART_RxCpltCallback+0x49a>
				if (cmd == sNone) {
 800279c:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 800279e:	f993 3000 	ldrsb.w	r3, [r3]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a6:	d159      	bne.n	800285c <HAL_UART_RxCpltCallback+0x528>
					uint32_t page = atol(uk + 5);
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	3305      	adds	r3, #5
 80027ac:	4618      	mov	r0, r3
 80027ae:	f012 fa61 	bl	8014c74 <atol>
 80027b2:	4603      	mov	r3, r0
 80027b4:	61bb      	str	r3, [r7, #24]
					if ((page >= 0) && (page < w25qxx.PageCount)) {
 80027b6:	4b45      	ldr	r3, [pc, #276]	; (80028cc <HAL_UART_RxCpltCallback+0x598>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d24d      	bcs.n	800285c <HAL_UART_RxCpltCallback+0x528>
						rpage = page;
 80027c0:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <HAL_UART_RxCpltCallback+0x5a4>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	6013      	str	r3, [r2, #0]
						cmd = sRead;
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e046      	b.n	800285c <HAL_UART_RxCpltCallback+0x528>
			} else if ((uk = strstr(RxBuf, "fill="))) {//fill=0:127
 80027ce:	4943      	ldr	r1, [pc, #268]	; (80028dc <HAL_UART_RxCpltCallback+0x5a8>)
 80027d0:	4837      	ldr	r0, [pc, #220]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 80027d2:	f012 fcac 	bl	801512e <strstr>
 80027d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03e      	beq.n	800285c <HAL_UART_RxCpltCallback+0x528>
				uk += 5;//pointer to page number
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	3305      	adds	r3, #5
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				char *uki = strchr(uk, ':');
 80027e4:	213a      	movs	r1, #58	; 0x3a
 80027e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027e8:	f012 fc79 	bl	80150de <strchr>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24
				if (uki) {
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d033      	beq.n	800285c <HAL_UART_RxCpltCallback+0x528>
					char *ukp = uki;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	623b      	str	r3, [r7, #32]
					uki++;
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3301      	adds	r3, #1
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
					if (strstr(uki, "0x")) {
 80027fe:	4938      	ldr	r1, [pc, #224]	; (80028e0 <HAL_UART_RxCpltCallback+0x5ac>)
 8002800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002802:	f012 fc94 	bl	801512e <strstr>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_UART_RxCpltCallback+0x4ee>
						uki += 2;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3302      	adds	r3, #2
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
						byte_fill = hexToBin(uki);
 8002812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002814:	f7fe fd3a 	bl	800128c <hexToBin>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_UART_RxCpltCallback+0x5b0>)
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e008      	b.n	8002834 <HAL_UART_RxCpltCallback+0x500>
					} else byte_fill = atol(uki + 1);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f012 fa24 	bl	8014c74 <atol>
 800282c:	4603      	mov	r3, r0
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_UART_RxCpltCallback+0x5b0>)
 8002832:	701a      	strb	r2, [r3, #0]
					*ukp = '\0';
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
					uint32_t page = atol(uk);
 800283a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800283c:	f012 fa1a 	bl	8014c74 <atol>
 8002840:	4603      	mov	r3, r0
 8002842:	61fb      	str	r3, [r7, #28]
					if ((page >= 0) && (page < W25qxx_getPageCount())) {
 8002844:	f001 f85a 	bl	80038fc <W25qxx_getPageCount>
 8002848:	4602      	mov	r2, r0
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	4293      	cmp	r3, r2
 800284e:	d205      	bcs.n	800285c <HAL_UART_RxCpltCallback+0x528>
						rpage = page;
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <HAL_UART_RxCpltCallback+0x5a4>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	6013      	str	r3, [r2, #0]
						cmd = sFill;
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_UART_RxCpltCallback+0x560>)
 8002858:	220a      	movs	r2, #10
 800285a:	701a      	strb	r2, [r3, #0]
			rx_uk = 0;
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_UART_RxCpltCallback+0x5b4>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
			memset(RxBuf, 0, sizeof(RxBuf));
 8002862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002866:	2100      	movs	r1, #0
 8002868:	4811      	ldr	r0, [pc, #68]	; (80028b0 <HAL_UART_RxCpltCallback+0x57c>)
 800286a:	f012 fafb 	bl	8014e64 <memset>
		if ((uRxByte == 0x0a) && (rx_uk >= 2)) {//end of line
 800286e:	e006      	b.n	800287e <HAL_UART_RxCpltCallback+0x54a>
		} else rx_uk++;
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_UART_RxCpltCallback+0x5b4>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3301      	adds	r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_UART_RxCpltCallback+0x5b4>)
 800287c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, (uint8_t *)&uRxByte, 1);
 800287e:	2201      	movs	r2, #1
 8002880:	491a      	ldr	r1, [pc, #104]	; (80028ec <HAL_UART_RxCpltCallback+0x5b8>)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f008 f8b1 	bl	800a9ea <HAL_UART_Receive_IT>
}
 8002888:	bf00      	nop
 800288a:	3730      	adds	r7, #48	; 0x30
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	08015f54 	.word	0x08015f54
 8002894:	20000024 	.word	0x20000024
 8002898:	08015f5c 	.word	0x08015f5c
 800289c:	08015f64 	.word	0x08015f64
 80028a0:	08015f68 	.word	0x08015f68
 80028a4:	2000056c 	.word	0x2000056c
 80028a8:	08015f70 	.word	0x08015f70
 80028ac:	08015f78 	.word	0x08015f78
 80028b0:	20000870 	.word	0x20000870
 80028b4:	200016a4 	.word	0x200016a4
 80028b8:	08015f80 	.word	0x08015f80
 80028bc:	08015f88 	.word	0x08015f88
 80028c0:	08015f90 	.word	0x08015f90
 80028c4:	08015f94 	.word	0x08015f94
 80028c8:	08015f9c 	.word	0x08015f9c
 80028cc:	20001904 	.word	0x20001904
 80028d0:	20001494 	.word	0x20001494
 80028d4:	08015fa0 	.word	0x08015fa0
 80028d8:	20001498 	.word	0x20001498
 80028dc:	08015fa8 	.word	0x08015fa8
 80028e0:	08015fb0 	.word	0x08015fb0
 80028e4:	20000026 	.word	0x20000026
 80028e8:	20001070 	.word	0x20001070
 80028ec:	20001071 	.word	0x20001071

080028f0 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
#ifdef SET_W25FLASH
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI4) {//FLASH
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_SPI_TxCpltCallback+0x38>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10d      	bne.n	800291e <HAL_SPI_TxCpltCallback+0x2e>
		spi_cnt++;
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_SPI_TxCpltCallback+0x3c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_SPI_TxCpltCallback+0x3c>)
 800290a:	6013      	str	r3, [r2, #0]
		spiRdy = 1;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_SPI_TxCpltCallback+0x40>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
	#ifdef SET_W25FLASH_DMA
		if (w25_withDMA) {
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_SPI_TxCpltCallback+0x44>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_SPI_TxCpltCallback+0x2e>
			W25_UNSELECT();
 800291a:	f000 fc17 	bl	800314c <W25_UNSELECT>
			//putMsg(msg_spiTxDone);
		}
	#endif
	}
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40013400 	.word	0x40013400
 800292c:	20000568 	.word	0x20000568
 8002930:	2000000c 	.word	0x2000000c
 8002934:	20001938 	.word	0x20001938

08002938 <HAL_SPI_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI4) {//FLASH
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <HAL_SPI_RxCpltCallback+0x38>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10d      	bne.n	8002966 <HAL_SPI_RxCpltCallback+0x2e>
		spi_cnt++;
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_SPI_RxCpltCallback+0x3c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_SPI_RxCpltCallback+0x3c>)
 8002952:	6013      	str	r3, [r2, #0]
		spiRdy = 1;
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_SPI_RxCpltCallback+0x40>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
	#ifdef SET_W25FLASH_DMA
		if (w25_withDMA) {
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_SPI_RxCpltCallback+0x44>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_SPI_RxCpltCallback+0x2e>
			W25_UNSELECT();
 8002962:	f000 fbf3 	bl	800314c <W25_UNSELECT>
			//putMsg(msg_spiRxDone);
		}
	#endif
	}
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40013400 	.word	0x40013400
 8002974:	20000568 	.word	0x20000568
 8002978:	2000000c 	.word	0x2000000c
 800297c:	20001938 	.word	0x20001938

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002984:	b672      	cpsid	i
}
 8002986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002988:	e7fe      	b.n	8002988 <Error_Handler+0x8>
	...

0800298c <getCmdInd>:


//-------------------------------------------------------------------------------------------

int8_t getCmdInd(const char *at)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
int8_t i = GSM_CMD_MAX;
 8002994:	2316      	movs	r3, #22
 8002996:	73fb      	strb	r3, [r7, #15]

	while (--i >= 0) {
 8002998:	e011      	b.n	80029be <getCmdInd+0x32>
		if (strstr(at, at_cmd[i].cmd)) return i;
 800299a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <getCmdInd+0x50>)
 80029a8:	4413      	add	r3, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f012 fbbe 	bl	801512e <strstr>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <getCmdInd+0x32>
 80029b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029bc:	e009      	b.n	80029d2 <getCmdInd+0x46>
	while (--i >= 0) {
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	dae5      	bge.n	800299a <getCmdInd+0xe>
	}

	return i;
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	080161f8 	.word	0x080161f8

080029e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_MspInit+0x4c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <HAL_MspInit+0x4c>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_MspInit+0x4c>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_MspInit+0x4c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <HAL_MspInit+0x4c>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_MspInit+0x4c>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800

08002a30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	; 0x38
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	2230      	movs	r2, #48	; 0x30
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f012 fa0f 	bl	8014e64 <memset>
  if(hrtc->Instance==RTC)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_RTC_MspInit+0x4c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a50:	2320      	movs	r3, #32
 8002a52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 f826 	bl	8006ab0 <HAL_RCCEx_PeriphCLKConfig>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a6a:	f7ff ff89 	bl	8002980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RTC_MspInit+0x50>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a74:	bf00      	nop
 8002a76:	3738      	adds	r7, #56	; 0x38
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40002800 	.word	0x40002800
 8002a80:	42470e3c 	.word	0x42470e3c

08002a84 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4d      	ldr	r2, [pc, #308]	; (8002bd8 <HAL_SD_MspInit+0x154>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f040 8094 	bne.w	8002bd0 <HAL_SD_MspInit+0x14c>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	4a4a      	ldr	r2, [pc, #296]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002ab2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab8:	4b48      	ldr	r3, [pc, #288]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a43      	ldr	r2, [pc, #268]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	4a3c      	ldr	r2, [pc, #240]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	6313      	str	r3, [r2, #48]	; 0x30
 8002af0:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_SD_MspInit+0x158>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002afc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002b00:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002b0e:	230c      	movs	r3, #12
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	4831      	ldr	r0, [pc, #196]	; (8002be0 <HAL_SD_MspInit+0x15c>)
 8002b1a:	f001 ff15 	bl	8004948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002b2e:	230c      	movs	r3, #12
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	482a      	ldr	r0, [pc, #168]	; (8002be4 <HAL_SD_MspInit+0x160>)
 8002b3a:	f001 ff05 	bl	8004948 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream3;
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_SD_MspInit+0x168>)
 8002b42:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b4a:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4c:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5e:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b66:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b6e:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b72:	2220      	movs	r2, #32
 8002b74:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b7e:	2204      	movs	r2, #4
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b84:	2203      	movs	r2, #3
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8002b98:	4813      	ldr	r0, [pc, #76]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002b9a:	f001 fad3 	bl	8004144 <HAL_DMA_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8002ba4:	f7ff feec 	bl	8002980 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a0f      	ldr	r2, [pc, #60]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
 8002bae:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002bb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <HAL_SD_MspInit+0x164>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2031      	movs	r0, #49	; 0x31
 8002bc6:	f001 fa86 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002bca:	2031      	movs	r0, #49	; 0x31
 8002bcc:	f001 fa9f 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40020c00 	.word	0x40020c00
 8002be8:	2000025c 	.word	0x2000025c
 8002bec:	40026458 	.word	0x40026458

08002bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <HAL_SPI_MspInit+0x150>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f040 8092 	bne.w	8002d38 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_SPI_MspInit+0x154>)
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_SPI_MspInit+0x154>)
 8002c1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c22:	6453      	str	r3, [r2, #68]	; 0x44
 8002c24:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_SPI_MspInit+0x154>)
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <HAL_SPI_MspInit+0x154>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4a42      	ldr	r2, [pc, #264]	; (8002d44 <HAL_SPI_MspInit+0x154>)
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c40:	4b40      	ldr	r3, [pc, #256]	; (8002d44 <HAL_SPI_MspInit+0x154>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002c4c:	2364      	movs	r3, #100	; 0x64
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002c5c:	2305      	movs	r3, #5
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4619      	mov	r1, r3
 8002c66:	4838      	ldr	r0, [pc, #224]	; (8002d48 <HAL_SPI_MspInit+0x158>)
 8002c68:	f001 fe6e 	bl	8004948 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c6e:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <HAL_SPI_MspInit+0x160>)
 8002c70:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c78:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c7a:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c7c:	2240      	movs	r2, #64	; 0x40
 8002c7e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c80:	4b32      	ldr	r3, [pc, #200]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c86:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c94:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ca0:	4b2a      	ldr	r3, [pc, #168]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002ca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ca6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ca8:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002cae:	4827      	ldr	r0, [pc, #156]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002cb0:	f001 fa48 	bl	8004144 <HAL_DMA_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8002cba:	f7ff fe61 	bl	8002980 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002cc2:	649a      	str	r2, [r3, #72]	; 0x48
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <HAL_SPI_MspInit+0x15c>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002ccc:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_SPI_MspInit+0x168>)
 8002cce:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8002cd0:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cd6:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cea:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002d00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d04:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002d0c:	4811      	ldr	r0, [pc, #68]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002d0e:	f001 fa19 	bl	8004144 <HAL_DMA_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002d18:	f7ff fe32 	bl	8002980 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002d20:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <HAL_SPI_MspInit+0x164>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2054      	movs	r0, #84	; 0x54
 8002d2e:	f001 f9d2 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002d32:	2054      	movs	r0, #84	; 0x54
 8002d34:	f001 f9eb 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40013400 	.word	0x40013400
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	20000314 	.word	0x20000314
 8002d50:	40026428 	.word	0x40026428
 8002d54:	20000374 	.word	0x20000374
 8002d58:	40026410 	.word	0x40026410

08002d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d115      	bne.n	8002d9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_TIM_Base_MspInit+0x48>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_TIM_Base_MspInit+0x48>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_TIM_Base_MspInit+0x48>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	201c      	movs	r0, #28
 8002d90:	f001 f9a1 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d94:	201c      	movs	r0, #28
 8002d96:	f001 f9ba 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a69      	ldr	r2, [pc, #420]	; (8002f6c <HAL_UART_MspInit+0x1c4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d163      	bne.n	8002e92 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b65      	ldr	r3, [pc, #404]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a60      	ldr	r2, [pc, #384]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b5e      	ldr	r3, [pc, #376]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e02:	2378      	movs	r3, #120	; 0x78
 8002e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e12:	2307      	movs	r3, #7
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4855      	ldr	r0, [pc, #340]	; (8002f74 <HAL_UART_MspInit+0x1cc>)
 8002e1e:	f001 fd93 	bl	8004948 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e22:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e24:	4a55      	ldr	r2, [pc, #340]	; (8002f7c <HAL_UART_MspInit+0x1d4>)
 8002e26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e28:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e30:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e36:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e42:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e44:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e50:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e5e:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e64:	4844      	ldr	r0, [pc, #272]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e66:	f001 f96d 	bl	8004144 <HAL_DMA_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002e70:	f7ff fd86 	bl	8002980 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
 8002e7a:	4a3f      	ldr	r2, [pc, #252]	; (8002f78 <HAL_UART_MspInit+0x1d0>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	2026      	movs	r0, #38	; 0x26
 8002e86:	f001 f926 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e8a:	2026      	movs	r0, #38	; 0x26
 8002e8c:	f001 f93f 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e90:	e068      	b.n	8002f64 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <HAL_UART_MspInit+0x1d8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d163      	bne.n	8002f64 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002ec2:	f043 0308 	orr.w	r3, r3, #8
 8002ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_UART_MspInit+0x1c8>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ed4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ee6:	2307      	movs	r3, #7
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eea:	f107 031c 	add.w	r3, r7, #28
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4820      	ldr	r0, [pc, #128]	; (8002f74 <HAL_UART_MspInit+0x1cc>)
 8002ef2:	f001 fd29 	bl	8004948 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002ef8:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <HAL_UART_MspInit+0x1e0>)
 8002efa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f02:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f24:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f30:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f38:	4812      	ldr	r0, [pc, #72]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f3a:	f001 f903 	bl	8004144 <HAL_DMA_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002f44:	f7ff fd1c 	bl	8002980 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f4e:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_UART_MspInit+0x1dc>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	2027      	movs	r0, #39	; 0x27
 8002f5a:	f001 f8bc 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f5e:	2027      	movs	r0, #39	; 0x27
 8002f60:	f001 f8d5 	bl	800410e <HAL_NVIC_EnableIRQ>
}
 8002f64:	bf00      	nop
 8002f66:	3730      	adds	r7, #48	; 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	200004a4 	.word	0x200004a4
 8002f7c:	400260a0 	.word	0x400260a0
 8002f80:	40004800 	.word	0x40004800
 8002f84:	20000504 	.word	0x20000504
 8002f88:	40026058 	.word	0x40026058

08002f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <NMI_Handler+0x4>

08002f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <HardFault_Handler+0x4>

08002f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <MemManage_Handler+0x4>

08002f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <BusFault_Handler+0x4>

08002fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <UsageFault_Handler+0x4>

08002faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd8:	f000 ff5e 	bl	8003e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <DMA1_Stream3_IRQHandler+0x10>)
 8002fe6:	f001 fa45 	bl	8004474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000504 	.word	0x20000504

08002ff4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <DMA1_Stream6_IRQHandler+0x10>)
 8002ffa:	f001 fa3b 	bl	8004474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200004a4 	.word	0x200004a4

08003008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <TIM2_IRQHandler+0x10>)
 800300e:	f007 f8dd 	bl	800a1cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200003d4 	.word	0x200003d4

0800301c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <USART2_IRQHandler+0x10>)
 8003022:	f007 fd91 	bl	800ab48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000041c 	.word	0x2000041c

08003030 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <USART3_IRQHandler+0x10>)
 8003036:	f007 fd87 	bl	800ab48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000460 	.word	0x20000460

08003044 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <SDIO_IRQHandler+0x10>)
 800304a:	f004 fe03 	bl	8007c54 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200001d8 	.word	0x200001d8

08003058 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <DMA2_Stream0_IRQHandler+0x10>)
 800305e:	f001 fa09 	bl	8004474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000374 	.word	0x20000374

0800306c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <DMA2_Stream1_IRQHandler+0x10>)
 8003072:	f001 f9ff 	bl	8004474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000314 	.word	0x20000314

08003080 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8003084:	4802      	ldr	r0, [pc, #8]	; (8003090 <DMA2_Stream3_IRQHandler+0x10>)
 8003086:	f001 f9f5 	bl	8004474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	2000025c 	.word	0x2000025c

08003094 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <OTG_FS_IRQHandler+0x10>)
 800309a:	f001 ff84 	bl	8004fa6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20002994 	.word	0x20002994

080030a8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <SPI4_IRQHandler+0x10>)
 80030ae:	f006 fc1d 	bl	80098ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200002bc 	.word	0x200002bc

080030bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <_sbrk+0x5c>)
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <_sbrk+0x60>)
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <_sbrk+0x64>)
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <_sbrk+0x68>)
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d207      	bcs.n	80030fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030ec:	f011 fdce 	bl	8014c8c <__errno>
 80030f0:	4603      	mov	r3, r0
 80030f2:	220c      	movs	r2, #12
 80030f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030fa:	e009      	b.n	8003110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <_sbrk+0x64>)
 800310c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20030000 	.word	0x20030000
 800311c:	00001800 	.word	0x00001800
 8003120:	20001900 	.word	0x20001900
 8003124:	200030d0 	.word	0x200030d0

08003128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <SystemInit+0x20>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	4a05      	ldr	r2, [pc, #20]	; (8003148 <SystemInit+0x20>)
 8003134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <W25_UNSELECT>:

bool wp_status = false;
//------------------------------------------------------------------------------------------

void W25_SELECT()   { W25_SEL(); }
void W25_UNSELECT() { W25_UNSEL(); }
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003156:	4802      	ldr	r0, [pc, #8]	; (8003160 <W25_UNSELECT+0x14>)
 8003158:	f001 fda2 	bl	8004ca0 <HAL_GPIO_WritePin>
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40020400 	.word	0x40020400

08003164 <wpDisable>:


//------------------------------------------------------------------------------------------
void wpDisable()
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI4_WP_GPIO_Port, SPI4_WP_Pin, GPIO_PIN_SET);
 8003168:	2201      	movs	r2, #1
 800316a:	2102      	movs	r1, #2
 800316c:	4803      	ldr	r0, [pc, #12]	; (800317c <wpDisable+0x18>)
 800316e:	f001 fd97 	bl	8004ca0 <HAL_GPIO_WritePin>
	wp_status = false;
 8003172:	4b03      	ldr	r3, [pc, #12]	; (8003180 <wpDisable+0x1c>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	2000193a 	.word	0x2000193a

08003184 <all_chipID>:
{
	return wp_status;
}
//------------------------------------------------------------------------------------------
const char *all_chipID(uint32_t idx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	switch (idx) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	2b0d      	cmp	r3, #13
 8003192:	d83b      	bhi.n	800320c <all_chipID+0x88>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <all_chipID+0x18>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031d5 	.word	0x080031d5
 80031a0:	080031d9 	.word	0x080031d9
 80031a4:	080031dd 	.word	0x080031dd
 80031a8:	080031e1 	.word	0x080031e1
 80031ac:	080031e5 	.word	0x080031e5
 80031b0:	080031e9 	.word	0x080031e9
 80031b4:	080031ed 	.word	0x080031ed
 80031b8:	080031f1 	.word	0x080031f1
 80031bc:	080031f5 	.word	0x080031f5
 80031c0:	080031f9 	.word	0x080031f9
 80031c4:	080031fd 	.word	0x080031fd
 80031c8:	08003201 	.word	0x08003201
 80031cc:	08003205 	.word	0x08003205
 80031d0:	08003209 	.word	0x08003209
		case 1:
			return "W25Q10";
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <all_chipID+0x98>)
 80031d6:	e01a      	b.n	800320e <all_chipID+0x8a>
		case 2:
			return "W25Q20";
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <all_chipID+0x9c>)
 80031da:	e018      	b.n	800320e <all_chipID+0x8a>
		case 3:
			return "W25Q40";
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <all_chipID+0xa0>)
 80031de:	e016      	b.n	800320e <all_chipID+0x8a>
		case 4:
			return "W25Q80";
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <all_chipID+0xa4>)
 80031e2:	e014      	b.n	800320e <all_chipID+0x8a>
		case 5:
			return "W25Q16";
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <all_chipID+0xa8>)
 80031e6:	e012      	b.n	800320e <all_chipID+0x8a>
		case 6:
			return "W25Q32";
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <all_chipID+0xac>)
 80031ea:	e010      	b.n	800320e <all_chipID+0x8a>
		case 7:
			return "W25Q64";
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <all_chipID+0xb0>)
 80031ee:	e00e      	b.n	800320e <all_chipID+0x8a>
		case 8:
			return "W25Q128";
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <all_chipID+0xb4>)
 80031f2:	e00c      	b.n	800320e <all_chipID+0x8a>
		case 9:
			return "W25Q256";
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <all_chipID+0xb8>)
 80031f6:	e00a      	b.n	800320e <all_chipID+0x8a>
		case 10:
			return "W25Q512";
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <all_chipID+0xbc>)
 80031fa:	e008      	b.n	800320e <all_chipID+0x8a>
		case 11:
			return "MX25L8035";
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <all_chipID+0xc0>)
 80031fe:	e006      	b.n	800320e <all_chipID+0x8a>
		case 12:
			return "S25FL128";
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <all_chipID+0xc4>)
 8003202:	e004      	b.n	800320e <all_chipID+0x8a>
		case 13:
			return "S25FL256";
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <all_chipID+0xc8>)
 8003206:	e002      	b.n	800320e <all_chipID+0x8a>
		case 14:
			return "S25FL512";
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <all_chipID+0xcc>)
 800320a:	e000      	b.n	800320e <all_chipID+0x8a>
	}
	return "???";
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <all_chipID+0xd0>)
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	08015fb4 	.word	0x08015fb4
 8003220:	08015fbc 	.word	0x08015fbc
 8003224:	08015fc4 	.word	0x08015fc4
 8003228:	08015fcc 	.word	0x08015fcc
 800322c:	08015fd4 	.word	0x08015fd4
 8003230:	08015fdc 	.word	0x08015fdc
 8003234:	08015fe4 	.word	0x08015fe4
 8003238:	08015fec 	.word	0x08015fec
 800323c:	08015ff4 	.word	0x08015ff4
 8003240:	08015ffc 	.word	0x08015ffc
 8003244:	08016004 	.word	0x08016004
 8003248:	08016010 	.word	0x08016010
 800324c:	0801601c 	.word	0x0801601c
 8003250:	08016028 	.word	0x08016028
 8003254:	08016034 	.word	0x08016034

08003258 <W25qxx_Spi>:
//------------------------------------------------------------------------------------------
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af02      	add	r7, sp, #8
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
uint8_t ret;

    HAL_SPI_TransmitReceive(portFLASH, &Data, &ret, 1, min_wait_ms);//HAL_MAX_DELAY);
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <W25qxx_Spi+0x2c>)
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <W25qxx_Spi+0x30>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f107 020f 	add.w	r2, r7, #15
 800326e:	1df9      	adds	r1, r7, #7
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	2301      	movs	r3, #1
 8003274:	f005 ffdf 	bl	8009236 <HAL_SPI_TransmitReceive>

    return ret;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000008 	.word	0x20000008
 8003288:	20000034 	.word	0x20000034

0800328c <W25qxx_Reset>:
//------------------------------------------------------------------------------------------
void W25qxx_Reset(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003290:	2001      	movs	r0, #1
 8003292:	f000 fe21 	bl	8003ed8 <HAL_Delay>

#ifdef W25_HARD_RESET

	W25_RST(GPIO_PIN_SET);
 8003296:	2201      	movs	r2, #1
 8003298:	2108      	movs	r1, #8
 800329a:	480d      	ldr	r0, [pc, #52]	; (80032d0 <W25qxx_Reset+0x44>)
 800329c:	f001 fd00 	bl	8004ca0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f000 fe19 	bl	8003ed8 <HAL_Delay>
	W25_RST(GPIO_PIN_RESET);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2108      	movs	r1, #8
 80032aa:	4809      	ldr	r0, [pc, #36]	; (80032d0 <W25qxx_Reset+0x44>)
 80032ac:	f001 fcf8 	bl	8004ca0 <HAL_GPIO_WritePin>
	W25qxx_Delay(2);
 80032b0:	2002      	movs	r0, #2
 80032b2:	f000 fe11 	bl	8003ed8 <HAL_Delay>
	W25_RST(GPIO_PIN_SET);
 80032b6:	2201      	movs	r2, #1
 80032b8:	2108      	movs	r1, #8
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <W25qxx_Reset+0x44>)
 80032bc:	f001 fcf0 	bl	8004ca0 <HAL_GPIO_WritePin>
	W25qxx_Delay(2);
 80032c0:	2002      	movs	r0, #2
 80032c2:	f000 fe09 	bl	8003ed8 <HAL_Delay>
		W25qxx_Spi(CHIP_RESET);
	W25_UNSEL();

#endif

	W25qxx_Delay(100);
 80032c6:	2064      	movs	r0, #100	; 0x64
 80032c8:	f000 fe06 	bl	8003ed8 <HAL_Delay>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000

080032d4 <W25qxx_ReadID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_ReadID(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
uint32_t Temp[3] = {0};
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]

    W25_SEL();//set to 0
 80032e4:	2200      	movs	r2, #0
 80032e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ea:	4816      	ldr	r0, [pc, #88]	; (8003344 <W25qxx_ReadID+0x70>)
 80032ec:	f001 fcd8 	bl	8004ca0 <HAL_GPIO_WritePin>

    W25qxx_Spi(JEDEC_ID);
 80032f0:	209f      	movs	r0, #159	; 0x9f
 80032f2:	f7ff ffb1 	bl	8003258 <W25qxx_Spi>
    Temp[0] = W25qxx_Spi(dummy_byte);
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <W25qxx_ReadID+0x74>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ffac 	bl	8003258 <W25qxx_Spi>
 8003300:	4603      	mov	r3, r0
 8003302:	607b      	str	r3, [r7, #4]
    Temp[1] = W25qxx_Spi(dummy_byte);
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <W25qxx_ReadID+0x74>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffa5 	bl	8003258 <W25qxx_Spi>
 800330e:	4603      	mov	r3, r0
 8003310:	60bb      	str	r3, [r7, #8]
    Temp[2] = W25qxx_Spi(dummy_byte);
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <W25qxx_ReadID+0x74>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff9e 	bl	8003258 <W25qxx_Spi>
 800331c:	4603      	mov	r3, r0
 800331e:	60fb      	str	r3, [r7, #12]

    W25_UNSEL();//set to 1
 8003320:	2201      	movs	r2, #1
 8003322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003326:	4807      	ldr	r0, [pc, #28]	; (8003344 <W25qxx_ReadID+0x70>)
 8003328:	f001 fcba 	bl	8004ca0 <HAL_GPIO_WritePin>

    return ((Temp[0] << 16) | (Temp[1] << 8) | Temp[2]);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	041a      	lsls	r2, r3, #16
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4313      	orrs	r3, r2
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40020400 	.word	0x40020400
 8003348:	20001939 	.word	0x20001939

0800334c <W25qxx_ReadEID>:

    W25_UNSEL();
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadEID(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
	uint8_t dat[] = {READ_EID, dummy_byte, dummy_byte};
 8003352:	23ab      	movs	r3, #171	; 0xab
 8003354:	713b      	strb	r3, [r7, #4]
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <W25qxx_ReadEID+0x5c>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	717b      	strb	r3, [r7, #5]
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <W25qxx_ReadEID+0x5c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	71bb      	strb	r3, [r7, #6]
	uint8_t in[2];
    W25_SEL();
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003368:	4810      	ldr	r0, [pc, #64]	; (80033ac <W25qxx_ReadEID+0x60>)
 800336a:	f001 fc99 	bl	8004ca0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(portFLASH, dat, sizeof(dat), min_wait_ms);
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <W25qxx_ReadEID+0x64>)
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <W25qxx_ReadEID+0x68>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	1d39      	adds	r1, r7, #4
 8003378:	2203      	movs	r2, #3
 800337a:	f005 fd0f 	bl	8008d9c <HAL_SPI_Transmit>
    HAL_SPI_Receive(portFLASH, in, 2, min_wait_ms);
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <W25qxx_ReadEID+0x64>)
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <W25qxx_ReadEID+0x68>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4639      	mov	r1, r7
 8003388:	2202      	movs	r2, #2
 800338a:	f005 fe43 	bl	8009014 <HAL_SPI_Receive>

    w25qxx.EID = in[1];
 800338e:	787a      	ldrb	r2, [r7, #1]
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <W25qxx_ReadEID+0x6c>)
 8003392:	735a      	strb	r2, [r3, #13]

    W25_UNSEL();
 8003394:	2201      	movs	r2, #1
 8003396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800339a:	4804      	ldr	r0, [pc, #16]	; (80033ac <W25qxx_ReadEID+0x60>)
 800339c:	f001 fc80 	bl	8004ca0 <HAL_GPIO_WritePin>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20001939 	.word	0x20001939
 80033ac:	40020400 	.word	0x40020400
 80033b0:	20000008 	.word	0x20000008
 80033b4:	20000034 	.word	0x20000034
 80033b8:	20001904 	.word	0x20001904

080033bc <W25qxx_WriteEnable>:
//------------------------------------------------------------------------------------------
void W25qxx_WriteEnable(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
    W25_SEL();
 80033c0:	2200      	movs	r2, #0
 80033c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <W25qxx_WriteEnable+0x2c>)
 80033c8:	f001 fc6a 	bl	8004ca0 <HAL_GPIO_WritePin>

    W25qxx_Spi(WRITE_ENABLE);
 80033cc:	2006      	movs	r0, #6
 80033ce:	f7ff ff43 	bl	8003258 <W25qxx_Spi>

    W25_UNSEL();
 80033d2:	2201      	movs	r2, #1
 80033d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d8:	4803      	ldr	r0, [pc, #12]	; (80033e8 <W25qxx_WriteEnable+0x2c>)
 80033da:	f001 fc61 	bl	8004ca0 <HAL_GPIO_WritePin>

    W25qxx_Delay(1);
 80033de:	2001      	movs	r0, #1
 80033e0:	f000 fd7a 	bl	8003ed8 <HAL_Delay>
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40020400 	.word	0x40020400

080033ec <W25qxx_WaitForWriteEnd>:

    W25_UNSEL();
}
//------------------------------------------------------------------------------------------
void W25qxx_WaitForWriteEnd(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 80033f0:	2001      	movs	r0, #1
 80033f2:	f000 fd71 	bl	8003ed8 <HAL_Delay>

    W25_SEL();
 80033f6:	2200      	movs	r2, #0
 80033f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033fc:	4810      	ldr	r0, [pc, #64]	; (8003440 <W25qxx_WaitForWriteEnd+0x54>)
 80033fe:	f001 fc4f 	bl	8004ca0 <HAL_GPIO_WritePin>

    W25qxx_Spi(READ_STAT_REG1);
 8003402:	2005      	movs	r0, #5
 8003404:	f7ff ff28 	bl	8003258 <W25qxx_Spi>
    do
    {
        w25qxx.StatusRegister1 = W25qxx_Spi(dummy_byte);
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <W25qxx_WaitForWriteEnd+0x58>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff23 	bl	8003258 <W25qxx_Spi>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <W25qxx_WaitForWriteEnd+0x5c>)
 8003418:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        W25qxx_Delay(1);
 800341c:	2001      	movs	r0, #1
 800341e:	f000 fd5b 	bl	8003ed8 <HAL_Delay>
    } while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <W25qxx_WaitForWriteEnd+0x5c>)
 8003424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1eb      	bne.n	8003408 <W25qxx_WaitForWriteEnd+0x1c>

    W25_UNSEL();
 8003430:	2201      	movs	r2, #1
 8003432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003436:	4802      	ldr	r0, [pc, #8]	; (8003440 <W25qxx_WaitForWriteEnd+0x54>)
 8003438:	f001 fc32 	bl	8004ca0 <HAL_GPIO_WritePin>
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40020400 	.word	0x40020400
 8003444:	20001939 	.word	0x20001939
 8003448:	20001904 	.word	0x20001904

0800344c <W25qxx_Init>:
//------------------------------------------------------------------------------------------
bool W25qxx_Init(void)
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	b09b      	sub	sp, #108	; 0x6c
 8003450:	af0e      	add	r7, sp, #56	; 0x38

	wpDisable();
 8003452:	f7ff fe87 	bl	8003164 <wpDisable>
	HAL_GPIO_WritePin(SPI4_HOLD_GPIO_Port, SPI4_HOLD_Pin, GPIO_PIN_SET);
 8003456:	2201      	movs	r2, #1
 8003458:	2101      	movs	r1, #1
 800345a:	4891      	ldr	r0, [pc, #580]	; (80036a0 <W25qxx_Init+0x254>)
 800345c:	f001 fc20 	bl	8004ca0 <HAL_GPIO_WritePin>

	W25qxx_Reset();
 8003460:	f7ff ff14 	bl	800328c <W25qxx_Reset>

    w25qxx.Lock = 1;
 8003464:	4b8f      	ldr	r3, [pc, #572]	; (80036a4 <W25qxx_Init+0x258>)
 8003466:	2201      	movs	r2, #1
 8003468:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    bool ret = false;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    W25_UNSEL();
 8003472:	2201      	movs	r2, #1
 8003474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003478:	488b      	ldr	r0, [pc, #556]	; (80036a8 <W25qxx_Init+0x25c>)
 800347a:	f001 fc11 	bl	8004ca0 <HAL_GPIO_WritePin>

    uint32_t id = W25qxx_ReadID();
 800347e:	f7ff ff29 	bl	80032d4 <W25qxx_ReadID>
 8003482:	62b8      	str	r0, [r7, #40]	; 0x28
    w25qxx.Jedec = id;
 8003484:	4a87      	ldr	r2, [pc, #540]	; (80036a4 <W25qxx_Init+0x258>)
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	f8c2 3009 	str.w	r3, [r2, #9]

//#ifdef W25QXX_DEBUG
        Report(NULL, true, "chipID:0x%06X%s", id, eol);
 800348c:	4b87      	ldr	r3, [pc, #540]	; (80036ac <W25qxx_Init+0x260>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	4a86      	ldr	r2, [pc, #536]	; (80036b0 <W25qxx_Init+0x264>)
 8003496:	2101      	movs	r1, #1
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd fe15 	bl	80010c8 <Report>
//#endif
        uint8_t man = (id >> 16);
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        id &= 0xffff;
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
        if (man == 0xef) {// ef 401X -> w25.....
 80034ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b0:	2bef      	cmp	r3, #239	; 0xef
 80034b2:	d118      	bne.n	80034e6 <W25qxx_Init+0x9a>
            if ((id >> 8) == 0x40) {
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d111      	bne.n	80034e0 <W25qxx_Init+0x94>
                id &= 0xff;
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
                if ((id > 0x10) && (id <= 0x20)) {
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d955      	bls.n	8003574 <W25qxx_Init+0x128>
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d852      	bhi.n	8003574 <W25qxx_Init+0x128>
                    id -= 0x10;//0x4010..0x4018
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	3b10      	subs	r3, #16
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (id > 0x0a) id = 0;
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	2b0a      	cmp	r3, #10
 80034d8:	d94c      	bls.n	8003574 <W25qxx_Init+0x128>
 80034da:	2300      	movs	r3, #0
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034de:	e049      	b.n	8003574 <W25qxx_Init+0x128>
                }
            } else {
                id = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e4:	e046      	b.n	8003574 <W25qxx_Init+0x128>
            }
        } else if (man == 0xc2) {//0xc2 2014
 80034e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ea:	2bc2      	cmp	r3, #194	; 0xc2
 80034ec:	d116      	bne.n	800351c <W25qxx_Init+0xd0>
            dummy_byte = FLASH_ZERO_BYTE;
 80034ee:	4b71      	ldr	r3, [pc, #452]	; (80036b4 <W25qxx_Init+0x268>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
            if ((id >> 8) == 0x20) {
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d10c      	bne.n	8003516 <W25qxx_Init+0xca>
                id &= 0xff;
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
                if (id == 0x14)
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	2b14      	cmp	r3, #20
 8003506:	d103      	bne.n	8003510 <W25qxx_Init+0xc4>
                    id -= 9;//0x14 - 0x0b
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	3b09      	subs	r3, #9
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
 800350e:	e031      	b.n	8003574 <W25qxx_Init+0x128>
                else
                    id = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
 8003514:	e02e      	b.n	8003574 <W25qxx_Init+0x128>
            } else {
                id = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	e02b      	b.n	8003574 <W25qxx_Init+0x128>
            }
        } else if (man == 0x01) {//0x01 0x20 0x18  ...  0x01 0x02 0x20
 800351c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003520:	2b01      	cmp	r3, #1
 8003522:	d125      	bne.n	8003570 <W25qxx_Init+0x124>
            dummy_byte = FLASH_ZERO_BYTE;
 8003524:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <W25qxx_Init+0x268>)
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
            if ((id >> 8) == 0x20) {
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	2b20      	cmp	r3, #32
 8003530:	d10b      	bne.n	800354a <W25qxx_Init+0xfe>
                id &= 0xff;
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	b2db      	uxtb	r3, r3
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
                if (id == 0x18) id = S25FL128;//MAX_KNOWN_FLASH - 2;//0x14 - 0x0b
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b18      	cmp	r3, #24
 800353c:	d102      	bne.n	8003544 <W25qxx_Init+0xf8>
 800353e:	230c      	movs	r3, #12
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
 8003542:	e017      	b.n	8003574 <W25qxx_Init+0x128>
                           else id = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
 8003548:	e014      	b.n	8003574 <W25qxx_Init+0x128>
            } else if ((id >> 8) == 0x02) {
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	2b02      	cmp	r3, #2
 8003550:	d10b      	bne.n	800356a <W25qxx_Init+0x11e>
            	id &= 0xff;
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	b2db      	uxtb	r3, r3
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
            	if (id == 0x20) id = S25FL512;//MAX_KNOWN_FLASH - 1;//s25fl512
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	2b20      	cmp	r3, #32
 800355c:	d102      	bne.n	8003564 <W25qxx_Init+0x118>
 800355e:	230e      	movs	r3, #14
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
 8003562:	e007      	b.n	8003574 <W25qxx_Init+0x128>
            		       else id = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
 8003568:	e004      	b.n	8003574 <W25qxx_Init+0x128>
            } else id = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	e001      	b.n	8003574 <W25qxx_Init+0x128>
        } else id = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28

        if ((id >= MAX_KNOWN_FLASH) || !id) goto out_label;
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2b0e      	cmp	r3, #14
 8003578:	f200 8187 	bhi.w	800388a <W25qxx_Init+0x43e>
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8183 	beq.w	800388a <W25qxx_Init+0x43e>

        w25qxx.ID         = id;              //W25Q10...W25Q512, MX25..
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	b2da      	uxtb	r2, r3
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <W25qxx_Init+0x258>)
 800358a:	701a      	strb	r2, [r3, #0]
        w25qxx.BlockCount = all_chipBLK[id]; //0..1024, 256
 800358c:	4a4a      	ldr	r2, [pc, #296]	; (80036b8 <W25qxx_Init+0x26c>)
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003594:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <W25qxx_Init+0x258>)
 8003596:	6213      	str	r3, [r2, #32]

        if (id >= S25FL128) W25qxx_ReadEID();
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	2b0b      	cmp	r3, #11
 800359c:	d901      	bls.n	80035a2 <W25qxx_Init+0x156>
 800359e:	f7ff fed5 	bl	800334c <W25qxx_ReadEID>

        char *stz = (char *)calloc(1, MAX_UART_BUF);
 80035a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035a6:	2001      	movs	r0, #1
 80035a8:	f011 fb68 	bl	8014c7c <calloc>
 80035ac:	4603      	mov	r3, r0
 80035ae:	623b      	str	r3, [r7, #32]
        if (stz) {
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8138 	beq.w	8003828 <W25qxx_Init+0x3dc>
            sprintf(stz, "Chip idx=%lu %s", id, all_chipID(id));
 80035b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035ba:	f7ff fde3 	bl	8003184 <all_chipID>
 80035be:	4603      	mov	r3, r0
 80035c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c2:	493e      	ldr	r1, [pc, #248]	; (80036bc <W25qxx_Init+0x270>)
 80035c4:	6a38      	ldr	r0, [r7, #32]
 80035c6:	f011 fd5b 	bl	8015080 <siprintf>
            if (id >= S25FL128) sprintf(stz+strlen(stz), "%c", ((w25qxx.EID >= 0x17) && (w25qxx.EID <= 0x19)) ? 'S' : '?');
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2b0b      	cmp	r3, #11
 80035ce:	d914      	bls.n	80035fa <W25qxx_Init+0x1ae>
 80035d0:	6a38      	ldr	r0, [r7, #32]
 80035d2:	f7fc fe0d 	bl	80001f0 <strlen>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	1898      	adds	r0, r3, r2
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <W25qxx_Init+0x258>)
 80035de:	7b5b      	ldrb	r3, [r3, #13]
 80035e0:	2b16      	cmp	r3, #22
 80035e2:	d905      	bls.n	80035f0 <W25qxx_Init+0x1a4>
 80035e4:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <W25qxx_Init+0x258>)
 80035e6:	7b5b      	ldrb	r3, [r3, #13]
 80035e8:	2b19      	cmp	r3, #25
 80035ea:	d801      	bhi.n	80035f0 <W25qxx_Init+0x1a4>
 80035ec:	2353      	movs	r3, #83	; 0x53
 80035ee:	e000      	b.n	80035f2 <W25qxx_Init+0x1a6>
 80035f0:	233f      	movs	r3, #63	; 0x3f
 80035f2:	461a      	mov	r2, r3
 80035f4:	4932      	ldr	r1, [pc, #200]	; (80036c0 <W25qxx_Init+0x274>)
 80035f6:	f011 fd43 	bl	8015080 <siprintf>
            if (id) {
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80e5 	beq.w	80037cc <W25qxx_Init+0x380>
            	w25qxx.PageSize = 256;
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <W25qxx_Init+0x258>)
 8003604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003608:	81da      	strh	r2, [r3, #14]
            	w25qxx.SectorSize = 4096;
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <W25qxx_Init+0x258>)
 800360c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003610:	615a      	str	r2, [r3, #20]
            	switch (w25qxx.ID) {
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <W25qxx_Init+0x258>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b0e      	cmp	r3, #14
 8003618:	d006      	beq.n	8003628 <W25qxx_Init+0x1dc>
 800361a:	2b0e      	cmp	r3, #14
 800361c:	dc6e      	bgt.n	80036fc <W25qxx_Init+0x2b0>
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d021      	beq.n	8003666 <W25qxx_Init+0x21a>
 8003622:	2b0d      	cmp	r3, #13
 8003624:	d04e      	beq.n	80036c4 <W25qxx_Init+0x278>
 8003626:	e069      	b.n	80036fc <W25qxx_Init+0x2b0>
            		case S25FL512:
            			w25qxx.PageSize = 512;
 8003628:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <W25qxx_Init+0x258>)
 800362a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362e:	81da      	strh	r2, [r3, #14]
            			w25qxx.CapacityInKiloByte = 64 * 1024;
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <W25qxx_Init+0x258>)
 8003632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
            			w25qxx.SectorCount = (w25qxx.CapacityInKiloByte * 1024) / w25qxx.SectorSize;
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <W25qxx_Init+0x258>)
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	029a      	lsls	r2, r3, #10
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <W25qxx_Init+0x258>)
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <W25qxx_Init+0x258>)
 8003648:	6193      	str	r3, [r2, #24]
            			w25qxx.PageCount = (w25qxx.CapacityInKiloByte * 1024) / w25qxx.PageSize;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <W25qxx_Init+0x258>)
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	029b      	lsls	r3, r3, #10
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <W25qxx_Init+0x258>)
 8003652:	89d2      	ldrh	r2, [r2, #14]
 8003654:	fbb3 f3f2 	udiv	r3, r3, r2
 8003658:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <W25qxx_Init+0x258>)
 800365a:	6113      	str	r3, [r2, #16]
            			w25qxx.BlockSize = 256 * 1024;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <W25qxx_Init+0x258>)
 800365e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003662:	61da      	str	r2, [r3, #28]
            	    break;
 8003664:	e069      	b.n	800373a <W25qxx_Init+0x2ee>
            		case S25FL128:
            			w25qxx.CapacityInKiloByte = ((128 * 1024 * 1024) / 8) / 1024;
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <W25qxx_Init+0x258>)
 8003668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800366c:	625a      	str	r2, [r3, #36]	; 0x24
            			w25qxx.SectorCount = w25qxx.CapacityInKiloByte / (w25qxx.SectorSize / 1024);
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <W25qxx_Init+0x258>)
 8003670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <W25qxx_Init+0x258>)
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	0a9b      	lsrs	r3, r3, #10
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <W25qxx_Init+0x258>)
 800367e:	6193      	str	r3, [r2, #24]
            			w25qxx.PageCount = (w25qxx.CapacityInKiloByte * 1024) / w25qxx.PageSize;
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <W25qxx_Init+0x258>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <W25qxx_Init+0x258>)
 8003688:	89d2      	ldrh	r2, [r2, #14]
 800368a:	fbb3 f3f2 	udiv	r3, r3, r2
 800368e:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <W25qxx_Init+0x258>)
 8003690:	6113      	str	r3, [r2, #16]
            			w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <W25qxx_Init+0x258>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	4a02      	ldr	r2, [pc, #8]	; (80036a4 <W25qxx_Init+0x258>)
 800369a:	61d3      	str	r3, [r2, #28]
            		break;
 800369c:	e04d      	b.n	800373a <W25qxx_Init+0x2ee>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	20001904 	.word	0x20001904
 80036a8:	40020400 	.word	0x40020400
 80036ac:	20000020 	.word	0x20000020
 80036b0:	08016038 	.word	0x08016038
 80036b4:	20001939 	.word	0x20001939
 80036b8:	08016840 	.word	0x08016840
 80036bc:	08016048 	.word	0x08016048
 80036c0:	08016058 	.word	0x08016058
            		case S25FL256:
            			w25qxx.CapacityInKiloByte = ((256 * 1024 * 1024) / 8) / 1024;
 80036c4:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <W25qxx_Init+0x458>)
 80036c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24
            			w25qxx.SectorCount = w25qxx.CapacityInKiloByte / (w25qxx.SectorSize / 1024);
 80036cc:	4b75      	ldr	r3, [pc, #468]	; (80038a4 <W25qxx_Init+0x458>)
 80036ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d0:	4b74      	ldr	r3, [pc, #464]	; (80038a4 <W25qxx_Init+0x458>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	0a9b      	lsrs	r3, r3, #10
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	4a72      	ldr	r2, [pc, #456]	; (80038a4 <W25qxx_Init+0x458>)
 80036dc:	6193      	str	r3, [r2, #24]
            			w25qxx.PageCount = (w25qxx.CapacityInKiloByte * 1024) / w25qxx.PageSize;
 80036de:	4b71      	ldr	r3, [pc, #452]	; (80038a4 <W25qxx_Init+0x458>)
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	029b      	lsls	r3, r3, #10
 80036e4:	4a6f      	ldr	r2, [pc, #444]	; (80038a4 <W25qxx_Init+0x458>)
 80036e6:	89d2      	ldrh	r2, [r2, #14]
 80036e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ec:	4a6d      	ldr	r2, [pc, #436]	; (80038a4 <W25qxx_Init+0x458>)
 80036ee:	6113      	str	r3, [r2, #16]
            			w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80036f0:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <W25qxx_Init+0x458>)
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4a6b      	ldr	r2, [pc, #428]	; (80038a4 <W25qxx_Init+0x458>)
 80036f8:	61d3      	str	r3, [r2, #28]
                	break;
 80036fa:	e01e      	b.n	800373a <W25qxx_Init+0x2ee>
            			default: {
            				w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80036fc:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <W25qxx_Init+0x458>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	4a68      	ldr	r2, [pc, #416]	; (80038a4 <W25qxx_Init+0x458>)
 8003704:	6193      	str	r3, [r2, #24]
            				w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003706:	4b67      	ldr	r3, [pc, #412]	; (80038a4 <W25qxx_Init+0x458>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	4a66      	ldr	r2, [pc, #408]	; (80038a4 <W25qxx_Init+0x458>)
 800370c:	6952      	ldr	r2, [r2, #20]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a64      	ldr	r2, [pc, #400]	; (80038a4 <W25qxx_Init+0x458>)
 8003714:	89d2      	ldrh	r2, [r2, #14]
 8003716:	fbb3 f3f2 	udiv	r3, r3, r2
 800371a:	4a62      	ldr	r2, [pc, #392]	; (80038a4 <W25qxx_Init+0x458>)
 800371c:	6113      	str	r3, [r2, #16]
            				w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800371e:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <W25qxx_Init+0x458>)
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	4a60      	ldr	r2, [pc, #384]	; (80038a4 <W25qxx_Init+0x458>)
 8003724:	6952      	ldr	r2, [r2, #20]
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <W25qxx_Init+0x458>)
 800372e:	6253      	str	r3, [r2, #36]	; 0x24
            				w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003730:	4b5c      	ldr	r3, [pc, #368]	; (80038a4 <W25qxx_Init+0x458>)
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4a5b      	ldr	r2, [pc, #364]	; (80038a4 <W25qxx_Init+0x458>)
 8003738:	61d3      	str	r3, [r2, #28]
            			}
                }
                sprintf(stz+strlen(stz),
 800373a:	6a38      	ldr	r0, [r7, #32]
 800373c:	f7fc fd58 	bl	80001f0 <strlen>
 8003740:	4602      	mov	r2, r0
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	eb03 0c02 	add.w	ip, r3, r2
 8003748:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <W25qxx_Init+0x45c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	61fb      	str	r3, [r7, #28]
"%s\tPage Size:\t%u bytes%s\tPage Count:\t%lu%s\tSector Size:\t%lu bytes%s\
\tSector Count:\t%lu%s\tBlock Size:\t%lu bytes%s\tBlock Count:\t%lu%s\tCapacity:\t%lu KBytes%s",
                    eol,
					w25qxx.PageSize, eol,
 800374e:	4b55      	ldr	r3, [pc, #340]	; (80038a4 <W25qxx_Init+0x458>)
 8003750:	89db      	ldrh	r3, [r3, #14]
                sprintf(stz+strlen(stz),
 8003752:	469e      	mov	lr, r3
 8003754:	4b54      	ldr	r3, [pc, #336]	; (80038a8 <W25qxx_Init+0x45c>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4b52      	ldr	r3, [pc, #328]	; (80038a4 <W25qxx_Init+0x458>)
 800375a:	691c      	ldr	r4, [r3, #16]
 800375c:	4b52      	ldr	r3, [pc, #328]	; (80038a8 <W25qxx_Init+0x45c>)
 800375e:	681d      	ldr	r5, [r3, #0]
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <W25qxx_Init+0x458>)
 8003762:	695e      	ldr	r6, [r3, #20]
 8003764:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <W25qxx_Init+0x45c>)
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	61b9      	str	r1, [r7, #24]
 800376a:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <W25qxx_Init+0x458>)
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <W25qxx_Init+0x45c>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	613a      	str	r2, [r7, #16]
 8003776:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <W25qxx_Init+0x458>)
 8003778:	69d9      	ldr	r1, [r3, #28]
 800377a:	60f9      	str	r1, [r7, #12]
 800377c:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <W25qxx_Init+0x45c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <W25qxx_Init+0x458>)
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <W25qxx_Init+0x45c>)
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	4b45      	ldr	r3, [pc, #276]	; (80038a4 <W25qxx_Init+0x458>)
 800378e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003790:	4b45      	ldr	r3, [pc, #276]	; (80038a8 <W25qxx_Init+0x45c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	930c      	str	r3, [sp, #48]	; 0x30
 8003796:	920b      	str	r2, [sp, #44]	; 0x2c
 8003798:	910a      	str	r1, [sp, #40]	; 0x28
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	9209      	str	r2, [sp, #36]	; 0x24
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	9308      	str	r3, [sp, #32]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	9107      	str	r1, [sp, #28]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	9206      	str	r2, [sp, #24]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	9305      	str	r3, [sp, #20]
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	9104      	str	r1, [sp, #16]
 80037b2:	9603      	str	r6, [sp, #12]
 80037b4:	9502      	str	r5, [sp, #8]
 80037b6:	9401      	str	r4, [sp, #4]
 80037b8:	9000      	str	r0, [sp, #0]
 80037ba:	4673      	mov	r3, lr
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	493b      	ldr	r1, [pc, #236]	; (80038ac <W25qxx_Init+0x460>)
 80037c0:	4660      	mov	r0, ip
 80037c2:	f011 fc5d 	bl	8015080 <siprintf>
					w25qxx.SectorSize, eol,
					w25qxx.SectorCount, eol,
					w25qxx.BlockSize, eol,
					w25qxx.BlockCount, eol,
					w25qxx.CapacityInKiloByte, eol );
                ret = true;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }

            if (id >= S25FL128)
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	2b0b      	cmp	r3, #11
 80037d0:	d921      	bls.n	8003816 <W25qxx_Init+0x3ca>
            	sprintf(stz+strlen(stz), "EID: 0x%02X -> %s%c%s",
 80037d2:	6a38      	ldr	r0, [r7, #32]
 80037d4:	f7fc fd0c 	bl	80001f0 <strlen>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	189c      	adds	r4, r3, r2
            			                 w25qxx.EID,
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <W25qxx_Init+0x458>)
 80037e0:	7b5b      	ldrb	r3, [r3, #13]
            	sprintf(stz+strlen(stz), "EID: 0x%02X -> %s%c%s",
 80037e2:	461d      	mov	r5, r3
 80037e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037e6:	f7ff fccd 	bl	8003184 <all_chipID>
 80037ea:	4601      	mov	r1, r0
										 all_chipID(id),
										 ((w25qxx.EID >= 0x17) && (w25qxx.EID <= 0x19)) ? 'S' : '?',
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <W25qxx_Init+0x458>)
 80037ee:	7b5b      	ldrb	r3, [r3, #13]
            	sprintf(stz+strlen(stz), "EID: 0x%02X -> %s%c%s",
 80037f0:	2b16      	cmp	r3, #22
 80037f2:	d905      	bls.n	8003800 <W25qxx_Init+0x3b4>
										 ((w25qxx.EID >= 0x17) && (w25qxx.EID <= 0x19)) ? 'S' : '?',
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <W25qxx_Init+0x458>)
 80037f6:	7b5b      	ldrb	r3, [r3, #13]
 80037f8:	2b19      	cmp	r3, #25
 80037fa:	d801      	bhi.n	8003800 <W25qxx_Init+0x3b4>
            	sprintf(stz+strlen(stz), "EID: 0x%02X -> %s%c%s",
 80037fc:	2353      	movs	r3, #83	; 0x53
 80037fe:	e000      	b.n	8003802 <W25qxx_Init+0x3b6>
 8003800:	233f      	movs	r3, #63	; 0x3f
 8003802:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <W25qxx_Init+0x45c>)
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	460b      	mov	r3, r1
 800380c:	462a      	mov	r2, r5
 800380e:	4928      	ldr	r1, [pc, #160]	; (80038b0 <W25qxx_Init+0x464>)
 8003810:	4620      	mov	r0, r4
 8003812:	f011 fc35 	bl	8015080 <siprintf>
										 eol);
//#ifdef W25QXX_DEBUG
            Report(NULL, true, "%s", stz);
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <W25qxx_Init+0x468>)
 800381a:	2101      	movs	r1, #1
 800381c:	2000      	movs	r0, #0
 800381e:	f7fd fc53 	bl	80010c8 <Report>
//#endif
            free(stz);
 8003822:	6a38      	ldr	r0, [r7, #32]
 8003824:	f011 fb08 	bl	8014e38 <free>
        }

        if (w25qxx.CapacityInKiloByte >= 32768) page_hdr_bytes++;
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <W25qxx_Init+0x458>)
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003830:	d304      	bcc.n	800383c <W25qxx_Init+0x3f0>
 8003832:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <W25qxx_Init+0x46c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <W25qxx_Init+0x46c>)
 800383a:	6013      	str	r3, [r2, #0]
        page_buf_size = w25qxx.PageSize;
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <W25qxx_Init+0x458>)
 800383e:	89db      	ldrh	r3, [r3, #14]
 8003840:	461a      	mov	r2, r3
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <W25qxx_Init+0x470>)
 8003844:	601a      	str	r2, [r3, #0]
        size_pageTmp = w25qxx.PageSize + page_hdr_bytes + 2;
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <W25qxx_Init+0x458>)
 8003848:	89db      	ldrh	r3, [r3, #14]
 800384a:	461a      	mov	r2, r3
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <W25qxx_Init+0x46c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4413      	add	r3, r2
 8003852:	3302      	adds	r3, #2
 8003854:	4a1a      	ldr	r2, [pc, #104]	; (80038c0 <W25qxx_Init+0x474>)
 8003856:	6013      	str	r3, [r2, #0]
        pageTmp = (uint8_t *)calloc(1, size_pageTmp);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <W25qxx_Init+0x474>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4619      	mov	r1, r3
 800385e:	2001      	movs	r0, #1
 8003860:	f011 fa0c 	bl	8014c7c <calloc>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <W25qxx_Init+0x478>)
 800386a:	601a      	str	r2, [r3, #0]
        if (!pageTmp) {
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <W25qxx_Init+0x478>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10c      	bne.n	800388e <W25qxx_Init+0x442>
        	devError |= devMEM;
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <W25qxx_Init+0x47c>)
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	b29a      	uxth	r2, r3
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <W25qxx_Init+0x47c>)
 8003880:	801a      	strh	r2, [r3, #0]
        	ret = false;
 8003882:	2300      	movs	r3, #0
 8003884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003888:	e002      	b.n	8003890 <W25qxx_Init+0x444>
        if ((id >= MAX_KNOWN_FLASH) || !id) goto out_label;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <W25qxx_Init+0x444>
        }


out_label:
 800388e:	bf00      	nop

    w25qxx.Lock = 0;
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <W25qxx_Init+0x458>)
 8003892:	2200      	movs	r2, #0
 8003894:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    return ret;
 8003898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800389c:	4618      	mov	r0, r3
 800389e:	3734      	adds	r7, #52	; 0x34
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a4:	20001904 	.word	0x20001904
 80038a8:	20000020 	.word	0x20000020
 80038ac:	0801605c 	.word	0x0801605c
 80038b0:	080160f8 	.word	0x080160f8
 80038b4:	08016110 	.word	0x08016110
 80038b8:	20000038 	.word	0x20000038
 80038bc:	2000003c 	.word	0x2000003c
 80038c0:	20001934 	.word	0x20001934
 80038c4:	20001930 	.word	0x20001930
 80038c8:	20000564 	.word	0x20000564

080038cc <W25qxx_getChipID>:
//------------------------------------------------------------------------------------------
uint32_t W25qxx_getChipID()
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
	return (uint32_t)w25qxx.ID;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <W25qxx_getChipID+0x14>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20001904 	.word	0x20001904

080038e4 <W25qxx_getSectorCount>:
uint32_t W25qxx_getSectorCount()
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	return w25qxx.SectorCount;
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <W25qxx_getSectorCount+0x14>)
 80038ea:	699b      	ldr	r3, [r3, #24]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20001904 	.word	0x20001904

080038fc <W25qxx_getPageCount>:
uint32_t W25qxx_getSectorSize()
{
	return w25qxx.SectorSize;
}
uint32_t W25qxx_getPageCount()
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
	return w25qxx.PageCount;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <W25qxx_getPageCount+0x14>)
 8003902:	691b      	ldr	r3, [r3, #16]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20001904 	.word	0x20001904

08003914 <W25qxx_getPageSize>:
uint32_t W25qxx_getPageSize()
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	return w25qxx.PageSize;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <W25qxx_getPageSize+0x14>)
 800391a:	89db      	ldrh	r3, [r3, #14]
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20001904 	.word	0x20001904

0800392c <W25qxx_EraseSector>:
    for (uint32_t s = 0; s < W25qxx_getSectorCount(); s++)
        W25qxx_FillSector(byte, s, 0, W25qxx_getSectorSize());
}
//------------------------------------------------------------------------------------------
void W25qxx_EraseSector(uint32_t SectorAddr, uint8_t prn)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	70fb      	strb	r3, [r7, #3]
    while (w25qxx.Lock) W25qxx_Delay(1);
 8003938:	e002      	b.n	8003940 <W25qxx_EraseSector+0x14>
 800393a:	2001      	movs	r0, #1
 800393c:	f000 facc 	bl	8003ed8 <HAL_Delay>
 8003940:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <W25qxx_EraseSector+0xdc>)
 8003942:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f7      	bne.n	800393a <W25qxx_EraseSector+0xe>

    w25qxx.Lock = 1;
 800394a:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <W25qxx_EraseSector+0xdc>)
 800394c:	2201      	movs	r2, #1
 800394e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    uint32_t StartTime;
//#ifdef W25QXX_DEBUG
    if (prn) {
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <W25qxx_EraseSector+0x3e>
    	StartTime = HAL_GetTick();
 8003958:	f000 fab2 	bl	8003ec0 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]
    	Report(__func__, true, "%u Begin...", SectorAddr);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <W25qxx_EraseSector+0xe0>)
 8003962:	2101      	movs	r1, #1
 8003964:	482a      	ldr	r0, [pc, #168]	; (8003a10 <W25qxx_EraseSector+0xe4>)
 8003966:	f7fd fbaf 	bl	80010c8 <Report>
    }
//#endif

    W25qxx_WaitForWriteEnd();
 800396a:	f7ff fd3f 	bl	80033ec <W25qxx_WaitForWriteEnd>
    SectorAddr = SectorAddr * w25qxx.SectorSize;
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <W25qxx_EraseSector+0xdc>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	607b      	str	r3, [r7, #4]
    W25qxx_WriteEnable();
 800397a:	f7ff fd1f 	bl	80033bc <W25qxx_WriteEnable>

    W25_SEL();
 800397e:	2200      	movs	r2, #0
 8003980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003984:	4823      	ldr	r0, [pc, #140]	; (8003a14 <W25qxx_EraseSector+0xe8>)
 8003986:	f001 f98b 	bl	8004ca0 <HAL_GPIO_WritePin>
    W25qxx_Spi(SECTOR_ERASE);
 800398a:	2020      	movs	r0, #32
 800398c:	f7ff fc64 	bl	8003258 <W25qxx_Spi>
    //if (w25qxx.CapacityInKiloByte >= 32768) W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
    W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0c1b      	lsrs	r3, r3, #16
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fc5e 	bl	8003258 <W25qxx_Spi>
    W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fc58 	bl	8003258 <W25qxx_Spi>
    W25qxx_Spi(SectorAddr & 0xFF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fc53 	bl	8003258 <W25qxx_Spi>
    W25_UNSEL();
 80039b2:	2201      	movs	r2, #1
 80039b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039b8:	4816      	ldr	r0, [pc, #88]	; (8003a14 <W25qxx_EraseSector+0xe8>)
 80039ba:	f001 f971 	bl	8004ca0 <HAL_GPIO_WritePin>

    W25qxx_WaitForWriteEnd();
 80039be:	f7ff fd15 	bl	80033ec <W25qxx_WaitForWriteEnd>

//#ifdef W25QXX_DEBUG
    if (prn) {
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d014      	beq.n	80039f2 <W25qxx_EraseSector+0xc6>
    	uint32_t dur = HAL_GetTick() - StartTime;
 80039c8:	f000 fa7a 	bl	8003ec0 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	60bb      	str	r3, [r7, #8]
    	Report(NULL, false, " done after %u ms (%u sec)%s", dur, dur / 1000, eol);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <W25qxx_EraseSector+0xec>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <W25qxx_EraseSector+0xf0>)
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	9201      	str	r2, [sp, #4]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4a0d      	ldr	r2, [pc, #52]	; (8003a20 <W25qxx_EraseSector+0xf4>)
 80039ea:	2100      	movs	r1, #0
 80039ec:	2000      	movs	r0, #0
 80039ee:	f7fd fb6b 	bl	80010c8 <Report>
    }
//#endif
    W25qxx_Delay(1);
 80039f2:	2001      	movs	r0, #1
 80039f4:	f000 fa70 	bl	8003ed8 <HAL_Delay>

    w25qxx.Lock = 0;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <W25qxx_EraseSector+0xdc>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20001904 	.word	0x20001904
 8003a0c:	08016140 	.word	0x08016140
 8003a10:	0801687c 	.word	0x0801687c
 8003a14:	40020400 	.word	0x40020400
 8003a18:	10624dd3 	.word	0x10624dd3
 8003a1c:	20000020 	.word	0x20000020
 8003a20:	08016120 	.word	0x08016120

08003a24 <W25qxx_PageToSector>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
uint32_t W25qxx_PageToSector(uint32_t PageAddress)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
    return ((PageAddress * w25qxx.PageSize) / w25qxx.SectorSize);
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <W25qxx_PageToSector+0x28>)
 8003a2e:	89db      	ldrh	r3, [r3, #14]
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	fb03 f202 	mul.w	r2, r3, r2
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <W25qxx_PageToSector+0x28>)
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	20001904 	.word	0x20001904

08003a50 <W25qxx_FillPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_FillPage(uint8_t byte, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	73fb      	strb	r3, [r7, #15]
	if (!pageTmp || !size_pageTmp) return;
 8003a60:	4b58      	ldr	r3, [pc, #352]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a9 	beq.w	8003bbc <W25qxx_FillPage+0x16c>
 8003a6a:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <W25qxx_FillPage+0x178>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 80a4 	beq.w	8003bbc <W25qxx_FillPage+0x16c>

    while (w25qxx.Lock) W25qxx_Delay(1);
 8003a74:	e002      	b.n	8003a7c <W25qxx_FillPage+0x2c>
 8003a76:	2001      	movs	r0, #1
 8003a78:	f000 fa2e 	bl	8003ed8 <HAL_Delay>
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003a7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f7      	bne.n	8003a76 <W25qxx_FillPage+0x26>

    w25qxx.Lock = 1;
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    if ( ((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || !NumByteToWrite_up_to_PageSize )
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4413      	add	r3, r2
 8003a94:	4a4d      	ldr	r2, [pc, #308]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003a96:	89d2      	ldrh	r2, [r2, #14]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d802      	bhi.n	8003aa2 <W25qxx_FillPage+0x52>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <W25qxx_FillPage+0x5e>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003aa4:	89db      	ldrh	r3, [r3, #14]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	603b      	str	r3, [r7, #0]
    if ( (OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize )
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a45      	ldr	r2, [pc, #276]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003ab6:	89d2      	ldrh	r2, [r2, #14]
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d905      	bls.n	8003ac8 <W25qxx_FillPage+0x78>
                NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003abe:	89db      	ldrh	r3, [r3, #14]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
    uint32_t StartTime = HAL_GetTick();
#endif

    //W25qxx_WaitForWriteEnd();
    W25qxx_WriteEnable();
 8003ac8:	f7ff fc78 	bl	80033bc <W25qxx_WriteEnable>

    Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003acc:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003ace:	89db      	ldrh	r3, [r3, #14]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	60bb      	str	r3, [r7, #8]

    uint16_t lens = NumByteToWrite_up_to_PageSize + page_hdr_bytes;//PAGE_HDR_BYTES;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <W25qxx_FillPage+0x180>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = PAGE_PROG;
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1c59      	adds	r1, r3, #1
 8003af8:	6139      	str	r1, [r7, #16]
 8003afa:	4413      	add	r3, r2
 8003afc:	2202      	movs	r2, #2
 8003afe:	701a      	strb	r2, [r3, #0]
//    if (w25qxx.CapacityInKiloByte >= 32768) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	0c18      	lsrs	r0, r3, #16
 8003b04:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6139      	str	r1, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	b2c2      	uxtb	r2, r0
 8003b12:	701a      	strb	r2, [r3, #0]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	0a18      	lsrs	r0, r3, #8
 8003b18:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1c59      	adds	r1, r3, #1
 8003b20:	6139      	str	r1, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	b2c2      	uxtb	r2, r0
 8003b26:	701a      	strb	r2, [r3, #0]
    pageTmp[idx++] = Page_Address & 0xFF;
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	6139      	str	r1, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
    memset(&pageTmp[page_hdr_bytes], byte, NumByteToWrite_up_to_PageSize);
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <W25qxx_FillPage+0x180>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	7bf9      	ldrb	r1, [r7, #15]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f011 f98b 	bl	8014e64 <memset>
    //memcpy(&pageTmp[PAGE_HDR_BYTES], pBuffer, NumByteToWrite_up_to_PageSize);//w25qxx.PageSize);

    spiRdy = 0;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <W25qxx_FillPage+0x184>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]

//w25_withDMA = 1;
    W25_SEL();
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b5a:	481f      	ldr	r0, [pc, #124]	; (8003bd8 <W25qxx_FillPage+0x188>)
 8003b5c:	f001 f8a0 	bl	8004ca0 <HAL_GPIO_WritePin>
    if (w25_withDMA) {
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <W25qxx_FillPage+0x18c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <W25qxx_FillPage+0x13a>
    	HAL_SPI_Transmit_DMA(portFLASH, pageTmp, lens);
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <W25qxx_FillPage+0x190>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003b6e:	6811      	ldr	r1, [r2, #0]
 8003b70:	8afa      	ldrh	r2, [r7, #22]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 fd02 	bl	800957c <HAL_SPI_Transmit_DMA>
    	while (!spiRdy) { W25qxx_Delay(1); }
 8003b78:	e002      	b.n	8003b80 <W25qxx_FillPage+0x130>
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f000 f9ac 	bl	8003ed8 <HAL_Delay>
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <W25qxx_FillPage+0x184>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f8      	beq.n	8003b7a <W25qxx_FillPage+0x12a>
 8003b88:	e013      	b.n	8003bb2 <W25qxx_FillPage+0x162>
    	//W25_UNSEL();
//w25_withDMA = 0;
    } else {
    	HAL_SPI_Transmit(portFLASH, pageTmp, lens, min_wait_ms);
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <W25qxx_FillPage+0x190>)
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <W25qxx_FillPage+0x174>)
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <W25qxx_FillPage+0x194>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	8afa      	ldrh	r2, [r7, #22]
 8003b98:	f005 f900 	bl	8008d9c <HAL_SPI_Transmit>

    	W25_UNSEL();
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ba2:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <W25qxx_FillPage+0x188>)
 8003ba4:	f001 f87c 	bl	8004ca0 <HAL_GPIO_WritePin>

    	W25qxx_WaitForWriteEnd();
 8003ba8:	f7ff fc20 	bl	80033ec <W25qxx_WaitForWriteEnd>

    	spiRdy = 1;
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <W25qxx_FillPage+0x184>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	701a      	strb	r2, [r3, #0]
    	Report(NULL, false, "\r\n");
    	Report(NULL, true, "%s done after %u ms\r\n", __func__, StartTime);
#endif
    }

    w25qxx.Lock = 0;
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <W25qxx_FillPage+0x17c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8003bba:	e000      	b.n	8003bbe <W25qxx_FillPage+0x16e>
	if (!pageTmp || !size_pageTmp) return;
 8003bbc:	bf00      	nop
}
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20001930 	.word	0x20001930
 8003bc8:	20001934 	.word	0x20001934
 8003bcc:	20001904 	.word	0x20001904
 8003bd0:	20000038 	.word	0x20000038
 8003bd4:	2000000c 	.word	0x2000000c
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	20001938 	.word	0x20001938
 8003be0:	20000008 	.word	0x20000008
 8003be4:	20000034 	.word	0x20000034

08003be8 <W25qxx_ReadPage>:

    w25qxx.Lock = 0;
}
//------------------------------------------------------------------------------------------
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
	if (!pageTmp || !size_pageTmp) return;
 8003bf6:	4b60      	ldr	r3, [pc, #384]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80b8 	beq.w	8003d70 <W25qxx_ReadPage+0x188>
 8003c00:	4b5e      	ldr	r3, [pc, #376]	; (8003d7c <W25qxx_ReadPage+0x194>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 80b3 	beq.w	8003d70 <W25qxx_ReadPage+0x188>

    while (w25qxx.Lock) W25qxx_Delay(1);
 8003c0a:	e002      	b.n	8003c12 <W25qxx_ReadPage+0x2a>
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f000 f963 	bl	8003ed8 <HAL_Delay>
 8003c12:	4b5b      	ldr	r3, [pc, #364]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003c14:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f7      	bne.n	8003c0c <W25qxx_ReadPage+0x24>

    w25qxx.Lock = 1;
 8003c1c:	4b58      	ldr	r3, [pc, #352]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || !NumByteToRead_up_to_PageSize)
 8003c24:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003c26:	89db      	ldrh	r3, [r3, #14]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d802      	bhi.n	8003c36 <W25qxx_ReadPage+0x4e>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <W25qxx_ReadPage+0x54>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8003c36:	4b52      	ldr	r3, [pc, #328]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003c38:	89db      	ldrh	r3, [r3, #14]
 8003c3a:	603b      	str	r3, [r7, #0]
    if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	4413      	add	r3, r2
 8003c42:	4a4f      	ldr	r2, [pc, #316]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003c44:	89d2      	ldrh	r2, [r2, #14]
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d905      	bls.n	8003c56 <W25qxx_ReadPage+0x6e>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003c4a:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003c4c:	89db      	ldrh	r3, [r3, #14]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	603b      	str	r3, [r7, #0]
                 __func__, Page_Address, Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize, eol);
    //W25qxx_Delay(100);
    uint32_t StartTime = HAL_GetTick();
#endif

    Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003c58:	89db      	ldrh	r3, [r3, #14]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
    W25qxx_Spi(Page_Address & 0xFF);
    //W25qxx_Spi(0);
    HAL_SPI_Receive(portFLASH, pBuffer, NumByteToRead_up_to_PageSize, min_wait_ms);
    W25_UNSEL();
    */
    memset(pageTmp, 0, size_pageTmp);
 8003c68:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <W25qxx_ReadPage+0x194>)
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f011 f8f6 	bl	8014e64 <memset>
    uint16_t lens = NumByteToRead_up_to_PageSize + page_hdr_bytes;//PAGE_HDR_BYTES;// + 1;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <W25qxx_ReadPage+0x19c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	82fb      	strh	r3, [r7, #22]
    int idx = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
    pageTmp[idx++] = DATA_READ;//FAST_READ;
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1c59      	adds	r1, r3, #1
 8003c92:	6139      	str	r1, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	2203      	movs	r2, #3
 8003c98:	701a      	strb	r2, [r3, #0]
//    if (w25qxx.CapacityInKiloByte >= 32768) pageTmp[idx++] = (Page_Address & 0xFF000000) >> 24;
    pageTmp[idx++] = (Page_Address & 0xFF0000) >> 16;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0c18      	lsrs	r0, r3, #16
 8003c9e:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1c59      	adds	r1, r3, #1
 8003ca6:	6139      	str	r1, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	b2c2      	uxtb	r2, r0
 8003cac:	701a      	strb	r2, [r3, #0]
    pageTmp[idx++] = (Page_Address& 0xFF00) >> 8;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	0a18      	lsrs	r0, r3, #8
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	6139      	str	r1, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b2c2      	uxtb	r2, r0
 8003cc0:	701a      	strb	r2, [r3, #0]
    pageTmp[idx++] = Page_Address & 0xFF;
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1c59      	adds	r1, r3, #1
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
    //pageTmp[idx++] = 0;
    spiRdy = 0;
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <W25qxx_ReadPage+0x1a0>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]

//w25_withDMA = 1;
    W25_SEL();
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ce0:	482a      	ldr	r0, [pc, #168]	; (8003d8c <W25qxx_ReadPage+0x1a4>)
 8003ce2:	f000 ffdd 	bl	8004ca0 <HAL_GPIO_WritePin>
    if (w25_withDMA) {
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <W25qxx_ReadPage+0x1a8>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d011      	beq.n	8003d12 <W25qxx_ReadPage+0x12a>
    	HAL_SPI_TransmitReceive_DMA(portFLASH, pageTmp, pageTmp, lens);
 8003cee:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <W25qxx_ReadPage+0x1ac>)
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	8afb      	ldrh	r3, [r7, #22]
 8003cfc:	f005 fcf4 	bl	80096e8 <HAL_SPI_TransmitReceive_DMA>
    	while (!spiRdy) {
 8003d00:	e002      	b.n	8003d08 <W25qxx_ReadPage+0x120>
    		W25qxx_Delay(1);
 8003d02:	2001      	movs	r0, #1
 8003d04:	f000 f8e8 	bl	8003ed8 <HAL_Delay>
    	while (!spiRdy) {
 8003d08:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <W25qxx_ReadPage+0x1a0>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f8      	beq.n	8003d02 <W25qxx_ReadPage+0x11a>
 8003d10:	e01f      	b.n	8003d52 <W25qxx_ReadPage+0x16a>
    	}
//w25_withDMA = 0;
    } else {
    	if (HAL_SPI_TransmitReceive(portFLASH, pageTmp, pageTmp, lens, min_wait_ms) != HAL_OK) devError |= devSPI;
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <W25qxx_ReadPage+0x1ac>)
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <W25qxx_ReadPage+0x1b0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	8afc      	ldrh	r4, [r7, #22]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4623      	mov	r3, r4
 8003d28:	f005 fa85 	bl	8009236 <HAL_SPI_TransmitReceive>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <W25qxx_ReadPage+0x158>
 8003d32:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <W25qxx_ReadPage+0x1b4>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	f043 0310 	orr.w	r3, r3, #16
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <W25qxx_ReadPage+0x1b4>)
 8003d3e:	801a      	strh	r2, [r3, #0]
    	W25_UNSEL();
 8003d40:	2201      	movs	r2, #1
 8003d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d46:	4811      	ldr	r0, [pc, #68]	; (8003d8c <W25qxx_ReadPage+0x1a4>)
 8003d48:	f000 ffaa 	bl	8004ca0 <HAL_GPIO_WritePin>

    	spiRdy = 1;
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <W25qxx_ReadPage+0x1a0>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
    }
	memcpy(pBuffer, &pageTmp[page_hdr_bytes], NumByteToRead_up_to_PageSize);//w25qxx.PageSize);
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <W25qxx_ReadPage+0x190>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <W25qxx_ReadPage+0x19c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f011 f871 	bl	8014e48 <memcpy>
    	Report(NULL, false, "%s", eol);
    	Report(NULL, true, "%s done after %u ms%s", __func__, StartTime, eol);
#endif


    w25qxx.Lock = 0;
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <W25qxx_ReadPage+0x198>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8003d6e:	e000      	b.n	8003d72 <W25qxx_ReadPage+0x18a>
	if (!pageTmp || !size_pageTmp) return;
 8003d70:	bf00      	nop
}
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}
 8003d78:	20001930 	.word	0x20001930
 8003d7c:	20001934 	.word	0x20001934
 8003d80:	20001904 	.word	0x20001904
 8003d84:	20000038 	.word	0x20000038
 8003d88:	2000000c 	.word	0x2000000c
 8003d8c:	40020400 	.word	0x40020400
 8003d90:	20001938 	.word	0x20001938
 8003d94:	20000008 	.word	0x20000008
 8003d98:	20000034 	.word	0x20000034
 8003d9c:	20000564 	.word	0x20000564

08003da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dd8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003da4:	480d      	ldr	r0, [pc, #52]	; (8003ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003da6:	490e      	ldr	r1, [pc, #56]	; (8003de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dac:	e002      	b.n	8003db4 <LoopCopyDataInit>

08003dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003db2:	3304      	adds	r3, #4

08003db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003db8:	d3f9      	bcc.n	8003dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dba:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dbc:	4c0b      	ldr	r4, [pc, #44]	; (8003dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dc0:	e001      	b.n	8003dc6 <LoopFillZerobss>

08003dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dc4:	3204      	adds	r2, #4

08003dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dc8:	d3fb      	bcc.n	8003dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dca:	f7ff f9ad 	bl	8003128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dce:	f011 f80f 	bl	8014df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dd2:	f7fd fac9 	bl	8001368 <main>
  bx  lr    
 8003dd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003dd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de0:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8003de4:	08016e50 	.word	0x08016e50
  ldr r2, =_sbss
 8003de8:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8003dec:	200030d0 	.word	0x200030d0

08003df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df0:	e7fe      	b.n	8003df0 <ADC_IRQHandler>
	...

08003df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_Init+0x40>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	; (8003e34 <HAL_Init+0x40>)
 8003dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_Init+0x40>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_Init+0x40>)
 8003e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_Init+0x40>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <HAL_Init+0x40>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	f000 f94f 	bl	80040c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e22:	200f      	movs	r0, #15
 8003e24:	f000 f808 	bl	8003e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e28:	f7fe fdda 	bl	80029e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00

08003e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_InitTick+0x54>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_InitTick+0x58>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f967 	bl	800412a <HAL_SYSTICK_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00e      	b.n	8003e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b0f      	cmp	r3, #15
 8003e6a:	d80a      	bhi.n	8003e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e74:	f000 f92f 	bl	80040d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e78:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <HAL_InitTick+0x5c>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000030 	.word	0x20000030
 8003e90:	20000044 	.word	0x20000044
 8003e94:	20000040 	.word	0x20000040

08003e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_IncTick+0x20>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_IncTick+0x24>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <HAL_IncTick+0x24>)
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000044 	.word	0x20000044
 8003ebc:	2000193c 	.word	0x2000193c

08003ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_GetTick+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	2000193c 	.word	0x2000193c

08003ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff ffee 	bl	8003ec0 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef0:	d005      	beq.n	8003efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_Delay+0x44>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003efe:	bf00      	nop
 8003f00:	f7ff ffde 	bl	8003ec0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d8f7      	bhi.n	8003f00 <HAL_Delay+0x28>
  {
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000044 	.word	0x20000044

08003f20 <__NVIC_SetPriorityGrouping>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f52:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <__NVIC_SetPriorityGrouping+0x44>)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60d3      	str	r3, [r2, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_GetPriorityGrouping>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <__NVIC_GetPriorityGrouping+0x18>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 0307 	and.w	r3, r3, #7
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_EnableIRQ>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	db0b      	blt.n	8003fae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	4907      	ldr	r1, [pc, #28]	; (8003fbc <__NVIC_EnableIRQ+0x38>)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	e000e100 	.word	0xe000e100

08003fc0 <__NVIC_SetPriority>:
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	db0a      	blt.n	8003fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	490c      	ldr	r1, [pc, #48]	; (800400c <__NVIC_SetPriority+0x4c>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	0112      	lsls	r2, r2, #4
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fe8:	e00a      	b.n	8004000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4908      	ldr	r1, [pc, #32]	; (8004010 <__NVIC_SetPriority+0x50>)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3b04      	subs	r3, #4
 8003ff8:	0112      	lsls	r2, r2, #4
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	761a      	strb	r2, [r3, #24]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000e100 	.word	0xe000e100
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <NVIC_EncodePriority>:
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f1c3 0307 	rsb	r3, r3, #7
 800402e:	2b04      	cmp	r3, #4
 8004030:	bf28      	it	cs
 8004032:	2304      	movcs	r3, #4
 8004034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3304      	adds	r3, #4
 800403a:	2b06      	cmp	r3, #6
 800403c:	d902      	bls.n	8004044 <NVIC_EncodePriority+0x30>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3b03      	subs	r3, #3
 8004042:	e000      	b.n	8004046 <NVIC_EncodePriority+0x32>
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	401a      	ands	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800405c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43d9      	mvns	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	4313      	orrs	r3, r2
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	; 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800408c:	d301      	bcc.n	8004092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800408e:	2301      	movs	r3, #1
 8004090:	e00f      	b.n	80040b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004092:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <SysTick_Config+0x40>)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3b01      	subs	r3, #1
 8004098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409a:	210f      	movs	r1, #15
 800409c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a0:	f7ff ff8e 	bl	8003fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <SysTick_Config+0x40>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <SysTick_Config+0x40>)
 80040ac:	2207      	movs	r2, #7
 80040ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	e000e010 	.word	0xe000e010

080040c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff29 	bl	8003f20 <__NVIC_SetPriorityGrouping>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e8:	f7ff ff3e 	bl	8003f68 <__NVIC_GetPriorityGrouping>
 80040ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7ff ff8e 	bl	8004014 <NVIC_EncodePriority>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff5d 	bl	8003fc0 <__NVIC_SetPriority>
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff31 	bl	8003f84 <__NVIC_EnableIRQ>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ffa2 	bl	800407c <SysTick_Config>
 8004138:	4603      	mov	r3, r0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff feb6 	bl	8003ec0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e099      	b.n	8004294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004180:	e00f      	b.n	80041a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004182:	f7ff fe9d 	bl	8003ec0 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b05      	cmp	r3, #5
 800418e:	d908      	bls.n	80041a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2203      	movs	r2, #3
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e078      	b.n	8004294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e8      	bne.n	8004182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4b38      	ldr	r3, [pc, #224]	; (800429c <HAL_DMA_Init+0x158>)
 80041bc:	4013      	ands	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d107      	bne.n	800420c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	4313      	orrs	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b04      	cmp	r3, #4
 8004234:	d117      	bne.n	8004266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fb01 	bl	8004850 <DMA_CheckFifoParam>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004262:	2301      	movs	r3, #1
 8004264:	e016      	b.n	8004294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fab8 	bl	80047e4 <DMA_CalcBaseAndBitshift>
 8004274:	4603      	mov	r3, r0
 8004276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	223f      	movs	r2, #63	; 0x3f
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	f010803f 	.word	0xf010803f

080042a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_DMA_Start_IT+0x26>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e040      	b.n	8004348 <HAL_DMA_Start_IT+0xa8>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d12f      	bne.n	800433a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fa4a 	bl	8004788 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	223f      	movs	r2, #63	; 0x3f
 80042fa:	409a      	lsls	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0216 	orr.w	r2, r2, #22
 800430e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e005      	b.n	8004346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800435e:	f7ff fdaf 	bl	8003ec0 <HAL_GetTick>
 8004362:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d008      	beq.n	8004382 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e052      	b.n	8004428 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0216 	bic.w	r2, r2, #22
 8004390:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <HAL_DMA_Abort+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0208 	bic.w	r2, r2, #8
 80043c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043d2:	e013      	b.n	80043fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043d4:	f7ff fd74 	bl	8003ec0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d90c      	bls.n	80043fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2203      	movs	r2, #3
 80043ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e015      	b.n	8004428 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e4      	bne.n	80043d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	223f      	movs	r2, #63	; 0x3f
 8004410:	409a      	lsls	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d004      	beq.n	800444e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e00c      	b.n	8004468 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2205      	movs	r2, #5
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004480:	4b8e      	ldr	r3, [pc, #568]	; (80046bc <HAL_DMA_IRQHandler+0x248>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a8e      	ldr	r2, [pc, #568]	; (80046c0 <HAL_DMA_IRQHandler+0x24c>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	0a9b      	lsrs	r3, r3, #10
 800448c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	2208      	movs	r2, #8
 80044a0:	409a      	lsls	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01a      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	2208      	movs	r2, #8
 80044ce:	409a      	lsls	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e4:	2201      	movs	r2, #1
 80044e6:	409a      	lsls	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d012      	beq.n	8004516 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004502:	2201      	movs	r2, #1
 8004504:	409a      	lsls	r2, r3
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f043 0202 	orr.w	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	2204      	movs	r2, #4
 800451c:	409a      	lsls	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4013      	ands	r3, r2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d012      	beq.n	800454c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	2204      	movs	r2, #4
 800453a:	409a      	lsls	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	2210      	movs	r2, #16
 8004552:	409a      	lsls	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d043      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d03c      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	2210      	movs	r2, #16
 8004570:	409a      	lsls	r2, r3
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d018      	beq.n	80045b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d024      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
 80045a2:	e01f      	b.n	80045e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01b      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
 80045b4:	e016      	b.n	80045e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d107      	bne.n	80045d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0208 	bic.w	r2, r2, #8
 80045d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2220      	movs	r2, #32
 80045ea:	409a      	lsls	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 808f 	beq.w	8004714 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8087 	beq.w	8004714 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	2220      	movs	r2, #32
 800460c:	409a      	lsls	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b05      	cmp	r3, #5
 800461c:	d136      	bne.n	800468c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0216 	bic.w	r2, r2, #22
 800462c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800463c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <HAL_DMA_IRQHandler+0x1da>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0208 	bic.w	r2, r2, #8
 800465c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	223f      	movs	r2, #63	; 0x3f
 8004664:	409a      	lsls	r2, r3
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467e:	2b00      	cmp	r3, #0
 8004680:	d07e      	beq.n	8004780 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
        }
        return;
 800468a:	e079      	b.n	8004780 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01d      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d031      	beq.n	8004714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
 80046b8:	e02c      	b.n	8004714 <HAL_DMA_IRQHandler+0x2a0>
 80046ba:	bf00      	nop
 80046bc:	20000030 	.word	0x20000030
 80046c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d023      	beq.n	8004714 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
 80046d4:	e01e      	b.n	8004714 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0210 	bic.w	r2, r2, #16
 80046f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	2b00      	cmp	r3, #0
 800471a:	d032      	beq.n	8004782 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d022      	beq.n	800476e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2205      	movs	r2, #5
 800472c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	3301      	adds	r3, #1
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	429a      	cmp	r2, r3
 800474a:	d307      	bcc.n	800475c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f2      	bne.n	8004740 <HAL_DMA_IRQHandler+0x2cc>
 800475a:	e000      	b.n	800475e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800475c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
 800477e:	e000      	b.n	8004782 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004780:	bf00      	nop
    }
  }
}
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d108      	bne.n	80047c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047c6:	e007      	b.n	80047d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	3b10      	subs	r3, #16
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <DMA_CalcBaseAndBitshift+0x64>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <DMA_CalcBaseAndBitshift+0x68>)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b03      	cmp	r3, #3
 8004810:	d909      	bls.n	8004826 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	1d1a      	adds	r2, r3, #4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	; 0x58
 8004824:	e007      	b.n	8004836 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	aaaaaaab 	.word	0xaaaaaaab
 800484c:	08016890 	.word	0x08016890

08004850 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11f      	bne.n	80048aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d856      	bhi.n	800491e <DMA_CheckFifoParam+0xce>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <DMA_CheckFifoParam+0x28>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	08004889 	.word	0x08004889
 800487c:	0800489b 	.word	0x0800489b
 8004880:	08004889 	.word	0x08004889
 8004884:	0800491f 	.word	0x0800491f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d046      	beq.n	8004922 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004898:	e043      	b.n	8004922 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048a2:	d140      	bne.n	8004926 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a8:	e03d      	b.n	8004926 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b2:	d121      	bne.n	80048f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d837      	bhi.n	800492a <DMA_CheckFifoParam+0xda>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <DMA_CheckFifoParam+0x70>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048d7 	.word	0x080048d7
 80048c8:	080048d1 	.word	0x080048d1
 80048cc:	080048e9 	.word	0x080048e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
      break;
 80048d4:	e030      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d025      	beq.n	800492e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e6:	e022      	b.n	800492e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048f0:	d11f      	bne.n	8004932 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048f6:	e01c      	b.n	8004932 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d903      	bls.n	8004906 <DMA_CheckFifoParam+0xb6>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d003      	beq.n	800490c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004904:	e018      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      break;
 800490a:	e015      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00e      	beq.n	8004936 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	e00b      	b.n	8004936 <DMA_CheckFifoParam+0xe6>
      break;
 800491e:	bf00      	nop
 8004920:	e00a      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      break;
 8004922:	bf00      	nop
 8004924:	e008      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      break;
 8004926:	bf00      	nop
 8004928:	e006      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      break;
 800492a:	bf00      	nop
 800492c:	e004      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
 8004930:	e002      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      break;   
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <DMA_CheckFifoParam+0xe8>
      break;
 8004936:	bf00      	nop
    }
  } 
  
  return status; 
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop

08004948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004948:	b480      	push	{r7}
 800494a:	b089      	sub	sp, #36	; 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	e177      	b.n	8004c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004964:	2201      	movs	r2, #1
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4013      	ands	r3, r2
 8004976:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	429a      	cmp	r2, r3
 800497e:	f040 8166 	bne.w	8004c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d005      	beq.n	800499a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004996:	2b02      	cmp	r3, #2
 8004998:	d130      	bne.n	80049fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049d0:	2201      	movs	r2, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 0201 	and.w	r2, r3, #1
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d017      	beq.n	8004a38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	2203      	movs	r2, #3
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d123      	bne.n	8004a8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	08da      	lsrs	r2, r3, #3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3208      	adds	r2, #8
 8004a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	220f      	movs	r2, #15
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	08da      	lsrs	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3208      	adds	r2, #8
 8004a86:	69b9      	ldr	r1, [r7, #24]
 8004a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	2203      	movs	r2, #3
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0203 	and.w	r2, r3, #3
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80c0 	beq.w	8004c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b66      	ldr	r3, [pc, #408]	; (8004c6c <HAL_GPIO_Init+0x324>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	4a65      	ldr	r2, [pc, #404]	; (8004c6c <HAL_GPIO_Init+0x324>)
 8004ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004adc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ade:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <HAL_GPIO_Init+0x324>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aea:	4a61      	ldr	r2, [pc, #388]	; (8004c70 <HAL_GPIO_Init+0x328>)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	3302      	adds	r3, #2
 8004af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	220f      	movs	r2, #15
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a58      	ldr	r2, [pc, #352]	; (8004c74 <HAL_GPIO_Init+0x32c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d037      	beq.n	8004b86 <HAL_GPIO_Init+0x23e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_GPIO_Init+0x330>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d031      	beq.n	8004b82 <HAL_GPIO_Init+0x23a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a56      	ldr	r2, [pc, #344]	; (8004c7c <HAL_GPIO_Init+0x334>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d02b      	beq.n	8004b7e <HAL_GPIO_Init+0x236>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a55      	ldr	r2, [pc, #340]	; (8004c80 <HAL_GPIO_Init+0x338>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d025      	beq.n	8004b7a <HAL_GPIO_Init+0x232>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a54      	ldr	r2, [pc, #336]	; (8004c84 <HAL_GPIO_Init+0x33c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01f      	beq.n	8004b76 <HAL_GPIO_Init+0x22e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a53      	ldr	r2, [pc, #332]	; (8004c88 <HAL_GPIO_Init+0x340>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d019      	beq.n	8004b72 <HAL_GPIO_Init+0x22a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <HAL_GPIO_Init+0x344>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_GPIO_Init+0x226>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a51      	ldr	r2, [pc, #324]	; (8004c90 <HAL_GPIO_Init+0x348>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00d      	beq.n	8004b6a <HAL_GPIO_Init+0x222>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a50      	ldr	r2, [pc, #320]	; (8004c94 <HAL_GPIO_Init+0x34c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <HAL_GPIO_Init+0x21e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4f      	ldr	r2, [pc, #316]	; (8004c98 <HAL_GPIO_Init+0x350>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_GPIO_Init+0x21a>
 8004b5e:	2309      	movs	r3, #9
 8004b60:	e012      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b62:	230a      	movs	r3, #10
 8004b64:	e010      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b66:	2308      	movs	r3, #8
 8004b68:	e00e      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b6a:	2307      	movs	r3, #7
 8004b6c:	e00c      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b6e:	2306      	movs	r3, #6
 8004b70:	e00a      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b72:	2305      	movs	r3, #5
 8004b74:	e008      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b76:	2304      	movs	r3, #4
 8004b78:	e006      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e004      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_GPIO_Init+0x240>
 8004b86:	2300      	movs	r3, #0
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	f002 0203 	and.w	r2, r2, #3
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	4093      	lsls	r3, r2
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b98:	4935      	ldr	r1, [pc, #212]	; (8004c70 <HAL_GPIO_Init+0x328>)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ba6:	4b3d      	ldr	r3, [pc, #244]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bca:	4a34      	ldr	r2, [pc, #208]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bf4:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bfa:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4013      	ands	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_GPIO_Init+0x354>)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3301      	adds	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b0f      	cmp	r3, #15
 8004c58:	f67f ae84 	bls.w	8004964 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	3724      	adds	r7, #36	; 0x24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40020000 	.word	0x40020000
 8004c78:	40020400 	.word	0x40020400
 8004c7c:	40020800 	.word	0x40020800
 8004c80:	40020c00 	.word	0x40020c00
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40021400 	.word	0x40021400
 8004c8c:	40021800 	.word	0x40021800
 8004c90:	40021c00 	.word	0x40021c00
 8004c94:	40022000 	.word	0x40022000
 8004c98:	40022400 	.word	0x40022400
 8004c9c:	40013c00 	.word	0x40013c00

08004ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
 8004cac:	4613      	mov	r3, r2
 8004cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb0:	787b      	ldrb	r3, [r7, #1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cbc:	e003      	b.n	8004cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	041a      	lsls	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	619a      	str	r2, [r3, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43d9      	mvns	r1, r3
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	619a      	str	r2, [r3, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d08:	b08f      	sub	sp, #60	; 0x3c
 8004d0a:	af0a      	add	r7, sp, #40	; 0x28
 8004d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e10f      	b.n	8004f38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f00f fc8a 	bl	801464c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f007 fd47 	bl	800c7ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	687e      	ldr	r6, [r7, #4]
 8004d64:	466d      	mov	r5, sp
 8004d66:	f106 0410 	add.w	r4, r6, #16
 8004d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d7a:	1d33      	adds	r3, r6, #4
 8004d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d7e:	6838      	ldr	r0, [r7, #0]
 8004d80:	f007 fc1e 	bl	800c5c0 <USB_CoreInit>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0d0      	b.n	8004f38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f007 fd35 	bl	800c80c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	e04a      	b.n	8004e3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	333d      	adds	r3, #61	; 0x3d
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dbc:	7bfa      	ldrb	r2, [r7, #15]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	333c      	adds	r3, #60	; 0x3c
 8004dcc:	7bfa      	ldrb	r2, [r7, #15]
 8004dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	b298      	uxth	r0, r3
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3344      	adds	r3, #68	; 0x44
 8004de4:	4602      	mov	r2, r0
 8004de6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	3340      	adds	r3, #64	; 0x40
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dfc:	7bfa      	ldrb	r2, [r7, #15]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3348      	adds	r3, #72	; 0x48
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	334c      	adds	r3, #76	; 0x4c
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	3354      	adds	r3, #84	; 0x54
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
 8004e3e:	7bfa      	ldrb	r2, [r7, #15]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d3af      	bcc.n	8004da8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e044      	b.n	8004ed8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e4e:	7bfa      	ldrb	r2, [r7, #15]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e7a:	7bfa      	ldrb	r2, [r7, #15]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ea6:	7bfa      	ldrb	r2, [r7, #15]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
 8004ed8:	7bfa      	ldrb	r2, [r7, #15]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d3b5      	bcc.n	8004e4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	687e      	ldr	r6, [r7, #4]
 8004eea:	466d      	mov	r5, sp
 8004eec:	f106 0410 	add.w	r4, r6, #16
 8004ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f00:	1d33      	adds	r3, r6, #4
 8004f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f04:	6838      	ldr	r0, [r7, #0]
 8004f06:	f007 fccd 	bl	800c8a4 <USB_DevInit>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e00d      	b.n	8004f38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f008 fe1c 	bl	800db6e <USB_DevDisconnect>

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_PCD_Start+0x1c>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e020      	b.n	8004f9e <HAL_PCD_Start+0x5e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d109      	bne.n	8004f80 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d005      	beq.n	8004f80 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f007 fc1f 	bl	800c7c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f008 fdcc 	bl	800db2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fa6:	b590      	push	{r4, r7, lr}
 8004fa8:	b08d      	sub	sp, #52	; 0x34
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f008 fe8a 	bl	800dcd6 <USB_GetMode>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 848a 	bne.w	80058de <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f008 fdee 	bl	800dbb0 <USB_ReadInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8480 	beq.w	80058dc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	0a1b      	lsrs	r3, r3, #8
 8004fe6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f008 fddb 	bl	800dbb0 <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d107      	bne.n	8005014 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f002 0202 	and.w	r2, r2, #2
 8005012:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f008 fdc9 	bl	800dbb0 <USB_ReadInterrupts>
 800501e:	4603      	mov	r3, r0
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b10      	cmp	r3, #16
 8005026:	d161      	bne.n	80050ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0210 	bic.w	r2, r2, #16
 8005036:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	3304      	adds	r3, #4
 8005056:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	0c5b      	lsrs	r3, r3, #17
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	2b02      	cmp	r3, #2
 8005062:	d124      	bne.n	80050ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d035      	beq.n	80050dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800507a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	6a38      	ldr	r0, [r7, #32]
 8005084:	f008 fc00 	bl	800d888 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005094:	441a      	add	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6a1a      	ldr	r2, [r3, #32]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a6:	441a      	add	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	621a      	str	r2, [r3, #32]
 80050ac:	e016      	b.n	80050dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	0c5b      	lsrs	r3, r3, #17
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	2b06      	cmp	r3, #6
 80050b8:	d110      	bne.n	80050dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050c0:	2208      	movs	r2, #8
 80050c2:	4619      	mov	r1, r3
 80050c4:	6a38      	ldr	r0, [r7, #32]
 80050c6:	f008 fbdf 	bl	800d888 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d6:	441a      	add	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699a      	ldr	r2, [r3, #24]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0210 	orr.w	r2, r2, #16
 80050ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f008 fd5d 	bl	800dbb0 <USB_ReadInterrupts>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005100:	f040 80a7 	bne.w	8005252 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f008 fd62 	bl	800dbd6 <USB_ReadDevAllOutEpInterrupt>
 8005112:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005114:	e099      	b.n	800524a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 808e 	beq.w	800523e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f008 fd86 	bl	800dc3e <USB_ReadDevOutEPInterrupt>
 8005132:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	461a      	mov	r2, r3
 800514c:	2301      	movs	r3, #1
 800514e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fec2 	bl	8005edc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	461a      	mov	r2, r3
 8005170:	2308      	movs	r3, #8
 8005172:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 ff98 	bl	80060ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	2310      	movs	r3, #16
 8005196:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d030      	beq.n	8005204 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d109      	bne.n	80051c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	78db      	ldrb	r3, [r3, #3]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d108      	bne.n	80051f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f00f fb33 	bl	8014858 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fe:	461a      	mov	r2, r3
 8005200:	2302      	movs	r3, #2
 8005202:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	461a      	mov	r2, r3
 800521c:	2320      	movs	r3, #32
 800521e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	3301      	adds	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	f47f af62 	bne.w	8005116 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f008 fcaa 	bl	800dbb0 <USB_ReadInterrupts>
 800525c:	4603      	mov	r3, r0
 800525e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005266:	f040 80db 	bne.w	8005420 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f008 fccb 	bl	800dc0a <USB_ReadDevAllInEpInterrupt>
 8005274:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800527a:	e0cd      	b.n	8005418 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80c2 	beq.w	800540c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f008 fcf1 	bl	800dc7a <USB_ReadDevInEPInterrupt>
 8005298:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d057      	beq.n	8005354 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	43db      	mvns	r3, r3
 80052be:	69f9      	ldr	r1, [r7, #28]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	461a      	mov	r2, r3
 80052d6:	2301      	movs	r3, #1
 80052d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d132      	bne.n	8005348 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e6:	4613      	mov	r3, r2
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	334c      	adds	r3, #76	; 0x4c
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4403      	add	r3, r0
 8005302:	3348      	adds	r3, #72	; 0x48
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4419      	add	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4403      	add	r3, r0
 8005316:	334c      	adds	r3, #76	; 0x4c
 8005318:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d113      	bne.n	8005348 <HAL_PCD_IRQHandler+0x3a2>
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	3354      	adds	r3, #84	; 0x54
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005340:	461a      	mov	r2, r3
 8005342:	2101      	movs	r1, #1
 8005344:	f008 fcf8 	bl	800dd38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f00f f9fd 	bl	801474e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536a:	461a      	mov	r2, r3
 800536c:	2308      	movs	r3, #8
 800536e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	461a      	mov	r2, r3
 8005388:	2310      	movs	r3, #16
 800538a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	461a      	mov	r2, r3
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d023      	beq.n	80053fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b4:	6a38      	ldr	r0, [r7, #32]
 80053b6:	f007 fbd9 	bl	800cb6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	3338      	adds	r3, #56	; 0x38
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	3304      	adds	r3, #4
 80053cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	78db      	ldrb	r3, [r3, #3]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d108      	bne.n	80053e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f00f fa4a 	bl	801487c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	2302      	movs	r3, #2
 80053f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fcdb 	bl	8005dc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	3301      	adds	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f af2e 	bne.w	800527c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f008 fbc3 	bl	800dbb0 <USB_ReadInterrupts>
 800542a:	4603      	mov	r3, r0
 800542c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005434:	d122      	bne.n	800547c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005450:	2b01      	cmp	r3, #1
 8005452:	d108      	bne.n	8005466 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800545c:	2100      	movs	r1, #0
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fec2 	bl	80061e8 <HAL_PCDEx_LPM_Callback>
 8005464:	e002      	b.n	800546c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f00f f9e8 	bl	801483c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800547a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f008 fb95 	bl	800dbb0 <USB_ReadInterrupts>
 8005486:	4603      	mov	r3, r0
 8005488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005490:	d112      	bne.n	80054b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f00f f9a4 	bl	80147f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f008 fb77 	bl	800dbb0 <USB_ReadInterrupts>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	f040 80b7 	bne.w	800563e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2110      	movs	r1, #16
 80054ea:	4618      	mov	r0, r3
 80054ec:	f007 fb3e 	bl	800cb6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f4:	e046      	b.n	8005584 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	461a      	mov	r2, r3
 8005504:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005508:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005524:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005528:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	461a      	mov	r2, r3
 8005538:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005558:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005578:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800557c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	3301      	adds	r3, #1
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558a:	429a      	cmp	r2, r3
 800558c:	d3b3      	bcc.n	80054f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ba:	f043 030b 	orr.w	r3, r3, #11
 80055be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d0:	f043 030b 	orr.w	r3, r3, #11
 80055d4:	6453      	str	r3, [r2, #68]	; 0x44
 80055d6:	e015      	b.n	8005604 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fe:	f043 030b 	orr.w	r3, r3, #11
 8005602:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005612:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005616:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005628:	461a      	mov	r2, r3
 800562a:	f008 fb85 	bl	800dd38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800563c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f008 fab4 	bl	800dbb0 <USB_ReadInterrupts>
 8005648:	4603      	mov	r3, r0
 800564a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005652:	d124      	bne.n	800569e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f008 fb4a 	bl	800dcf2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f007 faff 	bl	800cc66 <USB_GetDevSpeed>
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681c      	ldr	r4, [r3, #0]
 8005674:	f001 f9e8 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8005678:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	4620      	mov	r0, r4
 8005684:	f006 fffe 	bl	800c684 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f00f f888 	bl	801479e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800569c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f008 fa84 	bl	800dbb0 <USB_ReadInterrupts>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d10a      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f00f f865 	bl	8014782 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f002 0208 	and.w	r2, r2, #8
 80056c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f008 fa6f 	bl	800dbb0 <USB_ReadInterrupts>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	d122      	bne.n	8005722 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e8:	2301      	movs	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
 80056ec:	e014      	b.n	8005718 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	b2db      	uxtb	r3, r3
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb27 	bl	8005d60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	3301      	adds	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	429a      	cmp	r2, r3
 8005720:	d3e5      	bcc.n	80056ee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f008 fa42 	bl	800dbb0 <USB_ReadInterrupts>
 800572c:	4603      	mov	r3, r0
 800572e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005736:	d13b      	bne.n	80057b0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005738:	2301      	movs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	e02b      	b.n	8005796 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3340      	adds	r3, #64	; 0x40
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d115      	bne.n	8005790 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005764:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005766:	2b00      	cmp	r3, #0
 8005768:	da12      	bge.n	8005790 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576e:	4613      	mov	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	333f      	adds	r3, #63	; 0x3f
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005786:	b2db      	uxtb	r3, r3
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fae8 	bl	8005d60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	3301      	adds	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579c:	429a      	cmp	r2, r3
 800579e:	d3ce      	bcc.n	800573e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80057ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f008 f9fb 	bl	800dbb0 <USB_ReadInterrupts>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c4:	d155      	bne.n	8005872 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c6:	2301      	movs	r3, #1
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ca:	e045      	b.n	8005858 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d12e      	bne.n	8005852 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da2b      	bge.n	8005852 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005806:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800580a:	429a      	cmp	r2, r3
 800580c:	d121      	bne.n	8005852 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005820:	2201      	movs	r2, #1
 8005822:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584e:	6053      	str	r3, [r2, #4]
            break;
 8005850:	e007      	b.n	8005862 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	3301      	adds	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	429a      	cmp	r2, r3
 8005860:	d3b4      	bcc.n	80057cc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f008 f99a 	bl	800dbb0 <USB_ReadInterrupts>
 800587c:	4603      	mov	r3, r0
 800587e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005886:	d10a      	bne.n	800589e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f00f f809 	bl	80148a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800589c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f008 f984 	bl	800dbb0 <USB_ReadInterrupts>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d115      	bne.n	80058de <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f00e fff9 	bl	80148bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e000      	b.n	80058de <HAL_PCD_IRQHandler+0x938>
      return;
 80058dc:	bf00      	nop
    }
  }
}
 80058de:	3734      	adds	r7, #52	; 0x34
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd90      	pop	{r4, r7, pc}

080058e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_PCD_SetAddress+0x1a>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e013      	b.n	8005926 <HAL_PCD_SetAddress+0x42>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f008 f8e2 	bl	800dae0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	4608      	mov	r0, r1
 8005938:	4611      	mov	r1, r2
 800593a:	461a      	mov	r2, r3
 800593c:	4603      	mov	r3, r0
 800593e:	70fb      	strb	r3, [r7, #3]
 8005940:	460b      	mov	r3, r1
 8005942:	803b      	strh	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800594c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005950:	2b00      	cmp	r3, #0
 8005952:	da0f      	bge.n	8005974 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	f003 020f 	and.w	r2, r3, #15
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	3338      	adds	r3, #56	; 0x38
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	3304      	adds	r3, #4
 800596a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	705a      	strb	r2, [r3, #1]
 8005972:	e00f      	b.n	8005994 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 020f 	and.w	r2, r3, #15
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	3304      	adds	r3, #4
 800598c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	b2da      	uxtb	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059a0:	883a      	ldrh	r2, [r7, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	78ba      	ldrb	r2, [r7, #2]
 80059aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059be:	78bb      	ldrb	r3, [r7, #2]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d102      	bne.n	80059ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_PCD_EP_Open+0xaa>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e00e      	b.n	80059f6 <HAL_PCD_EP_Open+0xc8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68f9      	ldr	r1, [r7, #12]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f007 f962 	bl	800ccb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059f4:	7afb      	ldrb	r3, [r7, #11]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da0f      	bge.n	8005a32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	3338      	adds	r3, #56	; 0x38
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	3304      	adds	r3, #4
 8005a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	705a      	strb	r2, [r3, #1]
 8005a30:	e00f      	b.n	8005a52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	f003 020f 	and.w	r2, r3, #15
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4413      	add	r3, r2
 8005a48:	3304      	adds	r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_PCD_EP_Close+0x6e>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e00e      	b.n	8005a8a <HAL_PCD_EP_Close+0x8c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f007 f9a0 	bl	800cdc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa2:	7afb      	ldrb	r3, [r7, #11]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3304      	adds	r3, #4
 8005aba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad4:	7afb      	ldrb	r3, [r7, #11]
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aee:	7afb      	ldrb	r3, [r7, #11]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	f007 fc7f 	bl	800d408 <USB_EP0StartXfer>
 8005b0a:	e008      	b.n	8005b1e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	6979      	ldr	r1, [r7, #20]
 8005b1a:	f007 fa2d 	bl	800cf78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b4a:	681b      	ldr	r3, [r3, #0]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	460b      	mov	r3, r1
 8005b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	f003 020f 	and.w	r2, r3, #15
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	3338      	adds	r3, #56	; 0x38
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2201      	movs	r2, #1
 8005b96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b98:	7afb      	ldrb	r3, [r7, #11]
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d102      	bne.n	8005bb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bb2:	7afb      	ldrb	r3, [r7, #11]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6979      	ldr	r1, [r7, #20]
 8005bca:	f007 fc1d 	bl	800d408 <USB_EP0StartXfer>
 8005bce:	e008      	b.n	8005be2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	f007 f9cb 	bl	800cf78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d901      	bls.n	8005c0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e050      	b.n	8005cac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da0f      	bge.n	8005c32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	3338      	adds	r3, #56	; 0x38
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	3304      	adds	r3, #4
 8005c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	705a      	strb	r2, [r3, #1]
 8005c30:	e00d      	b.n	8005c4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4413      	add	r3, r2
 8005c44:	3304      	adds	r3, #4
 8005c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_PCD_EP_SetStall+0x82>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e01e      	b.n	8005cac <HAL_PCD_EP_SetStall+0xc0>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f007 fe5b 	bl	800d938 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	b2d9      	uxtb	r1, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f008 f84b 	bl	800dd38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	f003 020f 	and.w	r2, r3, #15
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d901      	bls.n	8005cd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e042      	b.n	8005d58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da0f      	bge.n	8005cfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	f003 020f 	and.w	r2, r3, #15
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	3338      	adds	r3, #56	; 0x38
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	3304      	adds	r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	705a      	strb	r2, [r3, #1]
 8005cf8:	e00f      	b.n	8005d1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3304      	adds	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_PCD_EP_ClrStall+0x86>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e00e      	b.n	8005d58 <HAL_PCD_EP_ClrStall+0xa4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f007 fe63 	bl	800da14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	da0c      	bge.n	8005d8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	f003 020f 	and.w	r2, r3, #15
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	3338      	adds	r3, #56	; 0x38
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4413      	add	r3, r2
 8005d88:	3304      	adds	r3, #4
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e00c      	b.n	8005da8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	f003 020f 	and.w	r2, r3, #15
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4413      	add	r3, r2
 8005da4:	3304      	adds	r3, #4
 8005da6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68f9      	ldr	r1, [r7, #12]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f007 fc82 	bl	800d6b8 <USB_EPStopXfer>
 8005db4:	4603      	mov	r3, r0
 8005db6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005db8:	7afb      	ldrb	r3, [r7, #11]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b08a      	sub	sp, #40	; 0x28
 8005dc6:	af02      	add	r7, sp, #8
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	3338      	adds	r3, #56	; 0x38
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	3304      	adds	r3, #4
 8005de8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1a      	ldr	r2, [r3, #32]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d901      	bls.n	8005dfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e06c      	b.n	8005ed4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d902      	bls.n	8005e16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	3303      	adds	r3, #3
 8005e1a:	089b      	lsrs	r3, r3, #2
 8005e1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e1e:	e02b      	b.n	8005e78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d902      	bls.n	8005e3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3303      	adds	r3, #3
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6919      	ldr	r1, [r3, #16]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4603      	mov	r3, r0
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	f007 fcd6 	bl	800d80c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	441a      	add	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	441a      	add	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d809      	bhi.n	8005ea2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d203      	bcs.n	8005ea2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1be      	bne.n	8005e20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d811      	bhi.n	8005ed2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	6939      	ldr	r1, [r7, #16]
 8005eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ece:	4013      	ands	r3, r2
 8005ed0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3720      	adds	r7, #32
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	333c      	adds	r3, #60	; 0x3c
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d17b      	bne.n	800600a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4a61      	ldr	r2, [pc, #388]	; (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	f240 80b9 	bls.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80b3 	beq.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f44:	6093      	str	r3, [r2, #8]
 8005f46:	e0a7      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2320      	movs	r3, #32
 8005f62:	6093      	str	r3, [r2, #8]
 8005f64:	e098      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8093 	bne.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	; (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d90f      	bls.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f96:	6093      	str	r3, [r2, #8]
 8005f98:	e07e      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	3304      	adds	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	0159      	lsls	r1, r3, #5
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d114      	bne.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	f007 fea6 	bl	800dd38 <USB_EP0_OutStart>
 8005fec:	e006      	b.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f00e fb88 	bl	8014718 <HAL_PCD_DataOutStageCallback>
 8006008:	e046      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4a26      	ldr	r2, [pc, #152]	; (80060a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d124      	bne.n	800605c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	6093      	str	r3, [r2, #8]
 8006030:	e032      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	2320      	movs	r3, #32
 800604c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f00e fb5f 	bl	8014718 <HAL_PCD_DataOutStageCallback>
 800605a:	e01d      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d114      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006084:	461a      	mov	r2, r3
 8006086:	2100      	movs	r1, #0
 8006088:	f007 fe56 	bl	800dd38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f00e fb40 	bl	8014718 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	4f54300a 	.word	0x4f54300a
 80060a8:	4f54310a 	.word	0x4f54310a

080060ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	333c      	adds	r3, #60	; 0x3c
 80060c4:	3304      	adds	r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a15      	ldr	r2, [pc, #84]	; (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d90e      	bls.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f8:	461a      	mov	r2, r3
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f00e faf7 	bl	80146f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d90c      	bls.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d108      	bne.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006120:	461a      	mov	r2, r3
 8006122:	2101      	movs	r1, #1
 8006124:	f007 fe08 	bl	800dd38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	4f54300a 	.word	0x4f54300a

08006138 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
 8006144:	4613      	mov	r3, r2
 8006146:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006156:	883b      	ldrh	r3, [r7, #0]
 8006158:	0419      	lsls	r1, r3, #16
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	430a      	orrs	r2, r1
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
 8006164:	e028      	b.n	80061b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e00d      	b.n	8006196 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3340      	adds	r3, #64	; 0x40
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	3301      	adds	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	3b01      	subs	r3, #1
 800619c:	429a      	cmp	r2, r3
 800619e:	d3ec      	bcc.n	800617a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061a0:	883b      	ldrh	r3, [r7, #0]
 80061a2:	0418      	lsls	r0, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	4302      	orrs	r2, r0
 80061b0:	3340      	adds	r3, #64	; 0x40
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e267      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d075      	beq.n	800630a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800621e:	4b88      	ldr	r3, [pc, #544]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d00c      	beq.n	8006244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b85      	ldr	r3, [pc, #532]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006232:	2b08      	cmp	r3, #8
 8006234:	d112      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006236:	4b82      	ldr	r3, [pc, #520]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006242:	d10b      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	4b7e      	ldr	r3, [pc, #504]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05b      	beq.n	8006308 <HAL_RCC_OscConfig+0x108>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d157      	bne.n	8006308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e242      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d106      	bne.n	8006274 <HAL_RCC_OscConfig+0x74>
 8006266:	4b76      	ldr	r3, [pc, #472]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a75      	ldr	r2, [pc, #468]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e01d      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800627c:	d10c      	bne.n	8006298 <HAL_RCC_OscConfig+0x98>
 800627e:	4b70      	ldr	r3, [pc, #448]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6c      	ldr	r2, [pc, #432]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e00b      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006298:	4b69      	ldr	r3, [pc, #420]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a68      	ldr	r2, [pc, #416]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b66      	ldr	r3, [pc, #408]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fd fe02 	bl	8003ec0 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fd fdfe 	bl	8003ec0 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e207      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b5b      	ldr	r3, [pc, #364]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0xc0>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fd fdee 	bl	8003ec0 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e8:	f7fd fdea 	bl	8003ec0 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	; 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e1f3      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	4b51      	ldr	r3, [pc, #324]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0xe8>
 8006306:	e000      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d063      	beq.n	80063de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006316:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006322:	4b47      	ldr	r3, [pc, #284]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800632a:	2b08      	cmp	r3, #8
 800632c:	d11c      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b44      	ldr	r3, [pc, #272]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	4b41      	ldr	r3, [pc, #260]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1c7      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4937      	ldr	r1, [pc, #220]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006366:	e03a      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006370:	4b34      	ldr	r3, [pc, #208]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fd fda3 	bl	8003ec0 <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800637e:	f7fd fd9f 	bl	8003ec0 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e1a8      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639c:	4b28      	ldr	r3, [pc, #160]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4925      	ldr	r1, [pc, #148]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	e015      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fd fd82 	bl	8003ec0 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c0:	f7fd fd7e 	bl	8003ec0 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e187      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d036      	beq.n	8006458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fd fd62 	bl	8003ec0 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006400:	f7fd fd5e 	bl	8003ec0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e167      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x200>
 800641e:	e01b      	b.n	8006458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006420:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7fd fd4b 	bl	8003ec0 <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800642c:	e00e      	b.n	800644c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800642e:	f7fd fd47 	bl	8003ec0 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d907      	bls.n	800644c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e150      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006440:	40023800 	.word	0x40023800
 8006444:	42470000 	.word	0x42470000
 8006448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800644e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ea      	bne.n	800642e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8097 	beq.w	8006594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646a:	4b81      	ldr	r3, [pc, #516]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	4b7d      	ldr	r3, [pc, #500]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	4a7c      	ldr	r2, [pc, #496]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006484:	6413      	str	r3, [r2, #64]	; 0x40
 8006486:	4b7a      	ldr	r3, [pc, #488]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b77      	ldr	r3, [pc, #476]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d118      	bne.n	80064d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a2:	4b74      	ldr	r3, [pc, #464]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a73      	ldr	r2, [pc, #460]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ae:	f7fd fd07 	bl	8003ec0 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b6:	f7fd fd03 	bl	8003ec0 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e10c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c8:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <HAL_RCC_OscConfig+0x2ea>
 80064dc:	4b64      	ldr	r3, [pc, #400]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	4a63      	ldr	r2, [pc, #396]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	; 0x70
 80064e8:	e01c      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d10c      	bne.n	800650c <HAL_RCC_OscConfig+0x30c>
 80064f2:	4b5f      	ldr	r3, [pc, #380]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a5e      	ldr	r2, [pc, #376]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 0304 	orr.w	r3, r3, #4
 80064fc:	6713      	str	r3, [r2, #112]	; 0x70
 80064fe:	4b5c      	ldr	r3, [pc, #368]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	4a5b      	ldr	r2, [pc, #364]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6713      	str	r3, [r2, #112]	; 0x70
 800650a:	e00b      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 800650c:	4b58      	ldr	r3, [pc, #352]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a57      	ldr	r2, [pc, #348]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	4b55      	ldr	r3, [pc, #340]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a54      	ldr	r2, [pc, #336]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d015      	beq.n	8006558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fd fcc8 	bl	8003ec0 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fd fcc4 	bl	8003ec0 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0cb      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654a:	4b49      	ldr	r3, [pc, #292]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ee      	beq.n	8006534 <HAL_RCC_OscConfig+0x334>
 8006556:	e014      	b.n	8006582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006558:	f7fd fcb2 	bl	8003ec0 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fd fcae 	bl	8003ec0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e0b5      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ee      	bne.n	8006560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d105      	bne.n	8006594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006588:	4b39      	ldr	r3, [pc, #228]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	4a38      	ldr	r2, [pc, #224]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80a1 	beq.w	80066e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 030c 	and.w	r3, r3, #12
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d05c      	beq.n	8006664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d141      	bne.n	8006636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fd fc82 	bl	8003ec0 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fd fc7e 	bl	8003ec0 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e087      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	4b27      	ldr	r3, [pc, #156]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69da      	ldr	r2, [r3, #28]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	3b01      	subs	r3, #1
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	491b      	ldr	r1, [pc, #108]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660e:	f7fd fc57 	bl	8003ec0 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006616:	f7fd fc53 	bl	8003ec0 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e05c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x416>
 8006634:	e054      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fd fc40 	bl	8003ec0 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006644:	f7fd fc3c 	bl	8003ec0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e045      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f0      	bne.n	8006644 <HAL_RCC_OscConfig+0x444>
 8006662:	e03d      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d107      	bne.n	800667c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e038      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000
 8006678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <HAL_RCC_OscConfig+0x4ec>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d028      	beq.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d121      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d11a      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d111      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	3b01      	subs	r3, #1
 80066c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d107      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0cc      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006704:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d90c      	bls.n	800672c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b65      	ldr	r3, [pc, #404]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b63      	ldr	r3, [pc, #396]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b8      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d020      	beq.n	800677a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b59      	ldr	r3, [pc, #356]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800675c:	4b53      	ldr	r3, [pc, #332]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a52      	ldr	r2, [pc, #328]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006768:	4b50      	ldr	r3, [pc, #320]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	494d      	ldr	r1, [pc, #308]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d044      	beq.n	8006810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d119      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e06f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e067      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b37      	ldr	r3, [pc, #220]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4934      	ldr	r1, [pc, #208]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e0:	f7fd fb6e 	bl	8003ec0 <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fd fb6a 	bl	8003ec0 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e04f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20c      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e032      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4916      	ldr	r1, [pc, #88]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490e      	ldr	r1, [pc, #56]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006876:	f000 f821 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490a      	ldr	r1, [pc, #40]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fd face 	bl	8003e38 <HAL_InitTick>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023c00 	.word	0x40023c00
 80068ac:	40023800 	.word	0x40023800
 80068b0:	08016828 	.word	0x08016828
 80068b4:	20000030 	.word	0x20000030
 80068b8:	20000040 	.word	0x20000040

080068bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b090      	sub	sp, #64	; 0x40
 80068c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
 80068c8:	2300      	movs	r3, #0
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068cc:	2300      	movs	r3, #0
 80068ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d4:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 030c 	and.w	r3, r3, #12
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d00d      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x40>
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	f200 80a1 	bhi.w	8006a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x34>
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ee:	e09b      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b53      	ldr	r3, [pc, #332]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80068f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80068f4:	e09b      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068f6:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80068f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068fa:	e098      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068fc:	4b4f      	ldr	r3, [pc, #316]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006904:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006906:	4b4d      	ldr	r3, [pc, #308]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d028      	beq.n	8006964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006912:	4b4a      	ldr	r3, [pc, #296]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	2200      	movs	r2, #0
 800691a:	623b      	str	r3, [r7, #32]
 800691c:	627a      	str	r2, [r7, #36]	; 0x24
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006924:	2100      	movs	r1, #0
 8006926:	4b47      	ldr	r3, [pc, #284]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8006928:	fb03 f201 	mul.w	r2, r3, r1
 800692c:	2300      	movs	r3, #0
 800692e:	fb00 f303 	mul.w	r3, r0, r3
 8006932:	4413      	add	r3, r2
 8006934:	4a43      	ldr	r2, [pc, #268]	; (8006a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8006936:	fba0 1202 	umull	r1, r2, r0, r2
 800693a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693c:	460a      	mov	r2, r1
 800693e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006942:	4413      	add	r3, r2
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	2200      	movs	r2, #0
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	61fa      	str	r2, [r7, #28]
 800694e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006956:	f7f9 fcf3 	bl	8000340 <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4613      	mov	r3, r2
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006962:	e053      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006964:	4b35      	ldr	r3, [pc, #212]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	099b      	lsrs	r3, r3, #6
 800696a:	2200      	movs	r2, #0
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	617a      	str	r2, [r7, #20]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006976:	f04f 0b00 	mov.w	fp, #0
 800697a:	4652      	mov	r2, sl
 800697c:	465b      	mov	r3, fp
 800697e:	f04f 0000 	mov.w	r0, #0
 8006982:	f04f 0100 	mov.w	r1, #0
 8006986:	0159      	lsls	r1, r3, #5
 8006988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800698c:	0150      	lsls	r0, r2, #5
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	ebb2 080a 	subs.w	r8, r2, sl
 8006996:	eb63 090b 	sbc.w	r9, r3, fp
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069ae:	ebb2 0408 	subs.w	r4, r2, r8
 80069b2:	eb63 0509 	sbc.w	r5, r3, r9
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	00eb      	lsls	r3, r5, #3
 80069c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c4:	00e2      	lsls	r2, r4, #3
 80069c6:	4614      	mov	r4, r2
 80069c8:	461d      	mov	r5, r3
 80069ca:	eb14 030a 	adds.w	r3, r4, sl
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	eb45 030b 	adc.w	r3, r5, fp
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069e2:	4629      	mov	r1, r5
 80069e4:	028b      	lsls	r3, r1, #10
 80069e6:	4621      	mov	r1, r4
 80069e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069ec:	4621      	mov	r1, r4
 80069ee:	028a      	lsls	r2, r1, #10
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	2200      	movs	r2, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a00:	f7f9 fc9e 	bl	8000340 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3740      	adds	r7, #64	; 0x40
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	017d7840 	.word	0x017d7840

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000030 	.word	0x20000030

08006a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a64:	f7ff fff0 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	; (8006a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	08016838 	.word	0x08016838

08006a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a8c:	f7ff ffdc 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0b5b      	lsrs	r3, r3, #13
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4903      	ldr	r1, [pc, #12]	; (8006aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	08016838 	.word	0x08016838

08006ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d075      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ae4:	4b91      	ldr	r3, [pc, #580]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aea:	f7fd f9e9 	bl	8003ec0 <HAL_GetTick>
 8006aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006af0:	e008      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006af2:	f7fd f9e5 	bl	8003ec0 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e189      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b04:	4b8a      	ldr	r3, [pc, #552]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1f0      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d009      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	019a      	lsls	r2, r3, #6
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	071b      	lsls	r3, r3, #28
 8006b28:	4981      	ldr	r1, [pc, #516]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01f      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b3c:	4b7c      	ldr	r3, [pc, #496]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	0f1b      	lsrs	r3, r3, #28
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	019a      	lsls	r2, r3, #6
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	061b      	lsls	r3, r3, #24
 8006b56:	431a      	orrs	r2, r3
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	071b      	lsls	r3, r3, #28
 8006b5c:	4974      	ldr	r1, [pc, #464]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b64:	4b72      	ldr	r3, [pc, #456]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b6a:	f023 021f 	bic.w	r2, r3, #31
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	496e      	ldr	r1, [pc, #440]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	019a      	lsls	r2, r3, #6
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	061b      	lsls	r3, r3, #24
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	071b      	lsls	r3, r3, #28
 8006b9c:	4964      	ldr	r1, [pc, #400]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ba4:	4b61      	ldr	r3, [pc, #388]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006baa:	f7fd f989 	bl	8003ec0 <HAL_GetTick>
 8006bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bb2:	f7fd f985 	bl	8003ec0 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e129      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bc4:	4b5a      	ldr	r3, [pc, #360]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d105      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d079      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006be8:	4b52      	ldr	r3, [pc, #328]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bee:	f7fd f967 	bl	8003ec0 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bf6:	f7fd f963 	bl	8003ec0 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e107      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c08:	4b49      	ldr	r3, [pc, #292]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c14:	d0ef      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d020      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c22:	4b43      	ldr	r3, [pc, #268]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	0f1b      	lsrs	r3, r3, #28
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	019a      	lsls	r2, r3, #6
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	061b      	lsls	r3, r3, #24
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	071b      	lsls	r3, r3, #28
 8006c42:	493b      	ldr	r1, [pc, #236]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c4a:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	4934      	ldr	r1, [pc, #208]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01e      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c70:	4b2f      	ldr	r3, [pc, #188]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c76:	0e1b      	lsrs	r3, r3, #24
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	019a      	lsls	r2, r3, #6
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	061b      	lsls	r3, r3, #24
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	071b      	lsls	r3, r3, #28
 8006c90:	4927      	ldr	r1, [pc, #156]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c98:	4b25      	ldr	r3, [pc, #148]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	4922      	ldr	r1, [pc, #136]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cae:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cb4:	f7fd f904 	bl	8003ec0 <HAL_GetTick>
 8006cb8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cbc:	f7fd f900 	bl	8003ec0 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0a4      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cce:	4b18      	ldr	r3, [pc, #96]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cda:	d1ef      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 808b 	beq.w	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	4a0f      	ldr	r2, [pc, #60]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d06:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a0b      	ldr	r2, [pc, #44]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d12:	f7fd f8d5 	bl	8003ec0 <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d18:	e010      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d1a:	f7fd f8d1 	bl	8003ec0 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d909      	bls.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e075      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006d2c:	42470068 	.word	0x42470068
 8006d30:	40023800 	.word	0x40023800
 8006d34:	42470070 	.word	0x42470070
 8006d38:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d3c:	4b38      	ldr	r3, [pc, #224]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0e8      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d48:	4b36      	ldr	r3, [pc, #216]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d02f      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d028      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d70:	4b2d      	ldr	r3, [pc, #180]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d76:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d7c:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d82:	4b28      	ldr	r3, [pc, #160]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d114      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d8e:	f7fd f897 	bl	8003ec0 <HAL_GetTick>
 8006d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d94:	e00a      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d96:	f7fd f893 	bl	8003ec0 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d901      	bls.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e035      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dac:	4b1d      	ldr	r3, [pc, #116]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0ee      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc4:	d10d      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006dc6:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dda:	4912      	ldr	r1, [pc, #72]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]
 8006de0:	e005      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	4a0f      	ldr	r2, [pc, #60]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006de8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006dec:	6093      	str	r3, [r2, #8]
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfa:	490a      	ldr	r1, [pc, #40]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006e14:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40007000 	.word	0x40007000
 8006e24:	40023800 	.word	0x40023800
 8006e28:	42470e40 	.word	0x42470e40
 8006e2c:	424711e0 	.word	0x424711e0

08006e30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e066      	b.n	8006f14 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7f5b      	ldrb	r3, [r3, #29]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fb fdea 	bl	8002a30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	22ca      	movs	r2, #202	; 0xca
 8006e68:	625a      	str	r2, [r3, #36]	; 0x24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2253      	movs	r2, #83	; 0x53
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa45 	bl	8007302 <RTC_EnterInitMode>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d12c      	bne.n	8006edc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6899      	ldr	r1, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68d2      	ldr	r2, [r2, #12]
 8006ebc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6919      	ldr	r1, [r3, #16]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	041a      	lsls	r2, r3, #16
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa4c 	bl	8007370 <RTC_ExitInitMode>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d113      	bne.n	8006f0a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	22ff      	movs	r2, #255	; 0xff
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f1c:	b590      	push	{r4, r7, lr}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	7f1b      	ldrb	r3, [r3, #28]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_RTC_SetTime+0x1c>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e087      	b.n	8007048 <HAL_RTC_SetTime+0x12c>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d126      	bne.n	8006f98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fa29 	bl	80073ba <RTC_ByteToBcd2>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fa22 	bl	80073ba <RTC_ByteToBcd2>
 8006f76:	4603      	mov	r3, r0
 8006f78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	789b      	ldrb	r3, [r3, #2]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fa1a 	bl	80073ba <RTC_ByteToBcd2>
 8006f86:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	78db      	ldrb	r3, [r3, #3]
 8006f90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e018      	b.n	8006fca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d102      	bne.n	8006fac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	785b      	ldrb	r3, [r3, #1]
 8006fb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006fb8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006fbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	78db      	ldrb	r3, [r3, #3]
 8006fc4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	22ca      	movs	r2, #202	; 0xca
 8006fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2253      	movs	r2, #83	; 0x53
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f991 	bl	8007302 <RTC_EnterInitMode>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006fe4:	7cfb      	ldrb	r3, [r7, #19]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d120      	bne.n	800702c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ff4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ff8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007008:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6899      	ldr	r1, [r3, #8]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	431a      	orrs	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f9a4 	bl	8007370 <RTC_ExitInitMode>
 8007028:	4603      	mov	r3, r0
 800702a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800702c:	7cfb      	ldrb	r3, [r7, #19]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	22ff      	movs	r2, #255	; 0xff
 800703e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	771a      	strb	r2, [r3, #28]

  return status;
 8007046:	7cfb      	ldrb	r3, [r7, #19]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	bd90      	pop	{r4, r7, pc}

08007050 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007082:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007086:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	0c1b      	lsrs	r3, r3, #16
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007092:	b2da      	uxtb	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	0a1b      	lsrs	r3, r3, #8
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	0d9b      	lsrs	r3, r3, #22
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11a      	bne.n	8007102 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f98f 	bl	80073f4 <RTC_Bcd2ToByte>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461a      	mov	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f986 	bl	80073f4 <RTC_Bcd2ToByte>
 80070e8:	4603      	mov	r3, r0
 80070ea:	461a      	mov	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	789b      	ldrb	r3, [r3, #2]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 f97d 	bl	80073f4 <RTC_Bcd2ToByte>
 80070fa:	4603      	mov	r3, r0
 80070fc:	461a      	mov	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	7f1b      	ldrb	r3, [r3, #28]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_RTC_SetDate+0x1c>
 8007124:	2302      	movs	r3, #2
 8007126:	e071      	b.n	800720c <HAL_RTC_SetDate+0x100>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2202      	movs	r2, #2
 8007132:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10e      	bne.n	8007158 <HAL_RTC_SetDate+0x4c>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	d008      	beq.n	8007158 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	f023 0310 	bic.w	r3, r3, #16
 800714e:	b2db      	uxtb	r3, r3
 8007150:	330a      	adds	r3, #10
 8007152:	b2da      	uxtb	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11c      	bne.n	8007198 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	78db      	ldrb	r3, [r3, #3]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f929 	bl	80073ba <RTC_ByteToBcd2>
 8007168:	4603      	mov	r3, r0
 800716a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 f922 	bl	80073ba <RTC_ByteToBcd2>
 8007176:	4603      	mov	r3, r0
 8007178:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800717a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	789b      	ldrb	r3, [r3, #2]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 f91a 	bl	80073ba <RTC_ByteToBcd2>
 8007186:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007188:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	e00e      	b.n	80071b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	78db      	ldrb	r3, [r3, #3]
 800719c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80071a4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80071aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	22ca      	movs	r2, #202	; 0xca
 80071bc:	625a      	str	r2, [r3, #36]	; 0x24
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2253      	movs	r2, #83	; 0x53
 80071c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 f89b 	bl	8007302 <RTC_EnterInitMode>
 80071cc:	4603      	mov	r3, r0
 80071ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10c      	bne.n	80071f0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80071e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f8c2 	bl	8007370 <RTC_ExitInitMode>
 80071ec:	4603      	mov	r3, r0
 80071ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	771a      	strb	r2, [r3, #28]

  return status;
 800720a:	7cfb      	ldrb	r3, [r7, #19]
}
 800720c:	4618      	mov	r0, r3
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	bd90      	pop	{r4, r7, pc}

08007214 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800722e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007232:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	0c1b      	lsrs	r3, r3, #16
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	b2db      	uxtb	r3, r3
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007256:	b2da      	uxtb	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	0b5b      	lsrs	r3, r3, #13
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	b2da      	uxtb	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d11a      	bne.n	80072a8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	78db      	ldrb	r3, [r3, #3]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 f8bc 	bl	80073f4 <RTC_Bcd2ToByte>
 800727c:	4603      	mov	r3, r0
 800727e:	461a      	mov	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	4618      	mov	r0, r3
 800728a:	f000 f8b3 	bl	80073f4 <RTC_Bcd2ToByte>
 800728e:	4603      	mov	r3, r0
 8007290:	461a      	mov	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	789b      	ldrb	r3, [r3, #2]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f8aa 	bl	80073f4 <RTC_Bcd2ToByte>
 80072a0:	4603      	mov	r3, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072cc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072ce:	f7fc fdf7 	bl	8003ec0 <HAL_GetTick>
 80072d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80072d4:	e009      	b.n	80072ea <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072d6:	f7fc fdf3 	bl	8003ec0 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072e4:	d901      	bls.n	80072ea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e007      	b.n	80072fa <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0ee      	beq.n	80072d6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d122      	bne.n	8007366 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800732e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007330:	f7fc fdc6 	bl	8003ec0 <HAL_GetTick>
 8007334:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007336:	e00c      	b.n	8007352 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007338:	f7fc fdc2 	bl	8003ec0 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007346:	d904      	bls.n	8007352 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2204      	movs	r2, #4
 800734c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <RTC_EnterInitMode+0x64>
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d1e8      	bne.n	8007338 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800738a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10a      	bne.n	80073b0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff ff89 	bl	80072b2 <HAL_RTC_WaitForSynchro>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	4603      	mov	r3, r0
 80073c2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80073c8:	e005      	b.n	80073d6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	3301      	adds	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	3b0a      	subs	r3, #10
 80073d4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	2b09      	cmp	r3, #9
 80073da:	d8f6      	bhi.n	80073ca <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	b2db      	uxtb	r3, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	0092      	lsls	r2, r2, #2
 800740c:	4413      	add	r3, r2
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	b2da      	uxtb	r2, r3
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	4413      	add	r3, r2
 800741e:	b2db      	uxtb	r3, r3
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e022      	b.n	8007484 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fb fb17 	bl	8002a84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2203      	movs	r2, #3
 800745a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f814 	bl	800748c <HAL_SD_InitCard>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e00a      	b.n	8007484 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800748c:	b5b0      	push	{r4, r5, r7, lr}
 800748e:	b08e      	sub	sp, #56	; 0x38
 8007490:	af04      	add	r7, sp, #16
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007494:	2300      	movs	r3, #0
 8007496:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800749c:	2300      	movs	r3, #0
 800749e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80074a8:	2376      	movs	r3, #118	; 0x76
 80074aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681d      	ldr	r5, [r3, #0]
 80074b0:	466c      	mov	r4, sp
 80074b2:	f107 0314 	add.w	r3, r7, #20
 80074b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80074be:	f107 0308 	add.w	r3, r7, #8
 80074c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074c4:	4628      	mov	r0, r5
 80074c6:	f004 fb07 	bl	800bad8 <SDIO_Init>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80074d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e04f      	b.n	800757c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80074dc:	4b29      	ldr	r3, [pc, #164]	; (8007584 <HAL_SD_InitCard+0xf8>)
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f004 fb3f 	bl	800bb6a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80074ec:	4b25      	ldr	r3, [pc, #148]	; (8007584 <HAL_SD_InitCard+0xf8>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80074f2:	2002      	movs	r0, #2
 80074f4:	f7fc fcf0 	bl	8003ed8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 f901 	bl	8008700 <SD_PowerON>
 80074fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e02e      	b.n	800757c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f820 	bl	8008564 <SD_InitCard>
 8007524:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e01b      	b.n	800757c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800754c:	4618      	mov	r0, r3
 800754e:	f004 fb9e 	bl	800bc8e <SDMMC_CmdBlockLength>
 8007552:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00f      	beq.n	800757a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <HAL_SD_InitCard+0xfc>)
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	431a      	orrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3728      	adds	r7, #40	; 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bdb0      	pop	{r4, r5, r7, pc}
 8007584:	422580a0 	.word	0x422580a0
 8007588:	004005ff 	.word	0x004005ff

0800758c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b092      	sub	sp, #72	; 0x48
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800759a:	f7fc fc91 	bl	8003ec0 <HAL_GetTick>
 800759e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d107      	bne.n	80075be <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e1bd      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	f040 81b0 	bne.w	800792c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d907      	bls.n	80075f0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e1a4      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2203      	movs	r2, #3
 80075f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2200      	movs	r2, #0
 80075fe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	2b01      	cmp	r3, #1
 8007606:	d002      	beq.n	800760e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	025b      	lsls	r3, r3, #9
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800760e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007612:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	025b      	lsls	r3, r3, #9
 8007618:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800761a:	2390      	movs	r3, #144	; 0x90
 800761c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800761e:	2302      	movs	r3, #2
 8007620:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007626:	2301      	movs	r3, #1
 8007628:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f107 0214 	add.w	r2, r7, #20
 8007632:	4611      	mov	r1, r2
 8007634:	4618      	mov	r0, r3
 8007636:	f004 fafe 	bl	800bc36 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d90a      	bls.n	8007656 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2202      	movs	r2, #2
 8007644:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800764c:	4618      	mov	r0, r3
 800764e:	f004 fb62 	bl	800bd16 <SDMMC_CmdReadMultiBlock>
 8007652:	6478      	str	r0, [r7, #68]	; 0x44
 8007654:	e009      	b.n	800766a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007662:	4618      	mov	r0, r3
 8007664:	f004 fb35 	bl	800bcd2 <SDMMC_CmdReadSingleBlock>
 8007668:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800766a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800766c:	2b00      	cmp	r3, #0
 800766e:	d012      	beq.n	8007696 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a7a      	ldr	r2, [pc, #488]	; (8007860 <HAL_SD_ReadBlocks+0x2d4>)
 8007676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767e:	431a      	orrs	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e151      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800769a:	e061      	b.n	8007760 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d03c      	beq.n	8007724 <HAL_SD_ReadBlocks+0x198>
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d039      	beq.n	8007724 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80076b0:	2300      	movs	r3, #0
 80076b2:	643b      	str	r3, [r7, #64]	; 0x40
 80076b4:	e033      	b.n	800771e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f004 fa37 	bl	800bb2e <SDIO_ReadFIFO>
 80076c0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	3301      	adds	r3, #1
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	3b01      	subs	r3, #1
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80076e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e2:	3301      	adds	r3, #1
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e8:	3b01      	subs	r3, #1
 80076ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	0c1b      	lsrs	r3, r3, #16
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80076f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f8:	3301      	adds	r3, #1
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fe:	3b01      	subs	r3, #1
 8007700:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	0e1b      	lsrs	r3, r3, #24
 8007706:	b2da      	uxtb	r2, r3
 8007708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770e:	3301      	adds	r3, #1
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007714:	3b01      	subs	r3, #1
 8007716:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771a:	3301      	adds	r3, #1
 800771c:	643b      	str	r3, [r7, #64]	; 0x40
 800771e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007720:	2b07      	cmp	r3, #7
 8007722:	d9c8      	bls.n	80076b6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007724:	f7fc fbcc 	bl	8003ec0 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007730:	429a      	cmp	r2, r3
 8007732:	d902      	bls.n	800773a <HAL_SD_ReadBlocks+0x1ae>
 8007734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007736:	2b00      	cmp	r3, #0
 8007738:	d112      	bne.n	8007760 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a48      	ldr	r2, [pc, #288]	; (8007860 <HAL_SD_ReadBlocks+0x2d4>)
 8007740:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e0ec      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007766:	f240 332a 	movw	r3, #810	; 0x32a
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d095      	beq.n	800769c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d022      	beq.n	80077c4 <HAL_SD_ReadBlocks+0x238>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d91f      	bls.n	80077c4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007788:	2b03      	cmp	r3, #3
 800778a:	d01b      	beq.n	80077c4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4618      	mov	r0, r3
 8007792:	f004 fb27 	bl	800bde4 <SDMMC_CmdStopTransfer>
 8007796:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800779a:	2b00      	cmp	r3, #0
 800779c:	d012      	beq.n	80077c4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <HAL_SD_ReadBlocks+0x2d4>)
 80077a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e0ba      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d012      	beq.n	80077f8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a22      	ldr	r2, [pc, #136]	; (8007860 <HAL_SD_ReadBlocks+0x2d4>)
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	f043 0208 	orr.w	r2, r3, #8
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e0a0      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d012      	beq.n	800782c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a15      	ldr	r2, [pc, #84]	; (8007860 <HAL_SD_ReadBlocks+0x2d4>)
 800780c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	f043 0202 	orr.w	r2, r3, #2
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e086      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d063      	beq.n	8007902 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a08      	ldr	r2, [pc, #32]	; (8007860 <HAL_SD_ReadBlocks+0x2d4>)
 8007840:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	f043 0220 	orr.w	r2, r3, #32
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e06c      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
 8007860:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f004 f960 	bl	800bb2e <SDIO_ReadFIFO>
 800786e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	b2da      	uxtb	r2, r3
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787a:	3301      	adds	r3, #1
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800787e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007880:	3b01      	subs	r3, #1
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	b2da      	uxtb	r2, r3
 800788a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800788e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007890:	3301      	adds	r3, #1
 8007892:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007896:	3b01      	subs	r3, #1
 8007898:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789c:	0c1b      	lsrs	r3, r3, #16
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	3301      	adds	r3, #1
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80078aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ac:	3b01      	subs	r3, #1
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	0e1b      	lsrs	r3, r3, #24
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80078ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078bc:	3301      	adds	r3, #1
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80078c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c2:	3b01      	subs	r3, #1
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80078c6:	f7fc fafb 	bl	8003ec0 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d902      	bls.n	80078dc <HAL_SD_ReadBlocks+0x350>
 80078d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d112      	bne.n	8007902 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <HAL_SD_ReadBlocks+0x3b8>)
 80078e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e01b      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_SD_ReadBlocks+0x38a>
 8007910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1a6      	bne.n	8007864 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f240 523a 	movw	r2, #1338	; 0x53a
 800791e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	e006      	b.n	800793a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3748      	adds	r7, #72	; 0x48
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	004005ff 	.word	0x004005ff

08007948 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b092      	sub	sp, #72	; 0x48
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007956:	f7fc fab3 	bl	8003ec0 <HAL_GetTick>
 800795a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d107      	bne.n	800797a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e166      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b01      	cmp	r3, #1
 8007984:	f040 8159 	bne.w	8007c3a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800798e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	441a      	add	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007998:	429a      	cmp	r2, r3
 800799a:	d907      	bls.n	80079ac <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e14d      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2203      	movs	r2, #3
 80079b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2200      	movs	r2, #0
 80079ba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d002      	beq.n	80079ca <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	025b      	lsls	r3, r3, #9
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ce:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	025b      	lsls	r3, r3, #9
 80079d4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80079d6:	2390      	movs	r3, #144	; 0x90
 80079d8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80079da:	2300      	movs	r3, #0
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80079de:	2300      	movs	r3, #0
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f107 0218 	add.w	r2, r7, #24
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f004 f920 	bl	800bc36 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d90a      	bls.n	8007a12 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2220      	movs	r2, #32
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f004 f9c8 	bl	800bd9e <SDMMC_CmdWriteMultiBlock>
 8007a0e:	6478      	str	r0, [r7, #68]	; 0x44
 8007a10:	e009      	b.n	8007a26 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2210      	movs	r2, #16
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f004 f99b 	bl	800bd5a <SDMMC_CmdWriteSingleBlock>
 8007a24:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d012      	beq.n	8007a52 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a87      	ldr	r2, [pc, #540]	; (8007c50 <HAL_SD_WriteBlocks+0x308>)
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e0fa      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007a56:	e065      	b.n	8007b24 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d040      	beq.n	8007ae8 <HAL_SD_WriteBlocks+0x1a0>
 8007a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d03d      	beq.n	8007ae8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a70:	e037      	b.n	8007ae2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a80:	3b01      	subs	r3, #1
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	021a      	lsls	r2, r3, #8
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	3301      	adds	r3, #1
 8007a94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	041a      	lsls	r2, r3, #16
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	3301      	adds	r3, #1
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	061a      	lsls	r2, r3, #24
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f107 0214 	add.w	r2, r7, #20
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f004 f836 	bl	800bb48 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ade:	3301      	adds	r3, #1
 8007ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae4:	2b07      	cmp	r3, #7
 8007ae6:	d9c4      	bls.n	8007a72 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007ae8:	f7fc f9ea 	bl	8003ec0 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d902      	bls.n	8007afe <HAL_SD_WriteBlocks+0x1b6>
 8007af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d112      	bne.n	8007b24 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a53      	ldr	r2, [pc, #332]	; (8007c50 <HAL_SD_WriteBlocks+0x308>)
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e091      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b2a:	f240 331a 	movw	r3, #794	; 0x31a
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d091      	beq.n	8007a58 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d022      	beq.n	8007b88 <HAL_SD_WriteBlocks+0x240>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d91f      	bls.n	8007b88 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d01b      	beq.n	8007b88 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f004 f945 	bl	800bde4 <SDMMC_CmdStopTransfer>
 8007b5a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d012      	beq.n	8007b88 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a3a      	ldr	r2, [pc, #232]	; (8007c50 <HAL_SD_WriteBlocks+0x308>)
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e05f      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d012      	beq.n	8007bbc <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	; (8007c50 <HAL_SD_WriteBlocks+0x308>)
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	f043 0208 	orr.w	r2, r3, #8
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e045      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d012      	beq.n	8007bf0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <HAL_SD_WriteBlocks+0x308>)
 8007bd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	f043 0202 	orr.w	r2, r3, #2
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e02b      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf6:	f003 0310 	and.w	r3, r3, #16
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d012      	beq.n	8007c24 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <HAL_SD_WriteBlocks+0x308>)
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	f043 0210 	orr.w	r2, r3, #16
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e011      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e006      	b.n	8007c48 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
  }
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3748      	adds	r7, #72	; 0x48
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	004005ff 	.word	0x004005ff

08007c54 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <HAL_SD_IRQHandler+0x2e>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f003 0308 	and.w	r3, r3, #8
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 ff5f 	bl	8008b3e <SD_Read_IT>
 8007c80:	e165      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 808f 	beq.w	8007db0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8007caa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007cae:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d039      	beq.n	8007d3e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <HAL_SD_IRQHandler+0x8a>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f004 f87e 	bl	800bde4 <SDMMC_CmdStopTransfer>
 8007ce8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f92f 	bl	8007f60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d104      	bne.n	8007d2e <HAL_SD_IRQHandler+0xda>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f006 f942 	bl	800dfb8 <HAL_SD_RxCpltCallback>
 8007d34:	e10b      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f006 f934 	bl	800dfa4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d3c:	e107      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8102 	beq.w	8007f4e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d011      	beq.n	8007d78 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f004 f843 	bl	800bde4 <SDMMC_CmdStopTransfer>
 8007d5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d008      	beq.n	8007d78 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8f4 	bl	8007f60 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f040 80e5 	bne.w	8007f4e <HAL_SD_IRQHandler+0x2fa>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f040 80df 	bne.w	8007f4e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0208 	bic.w	r2, r2, #8
 8007d9e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f006 f8fb 	bl	800dfa4 <HAL_SD_TxCpltCallback>
}
 8007dae:	e0ce      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <HAL_SD_IRQHandler+0x17c>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 ff09 	bl	8008be0 <SD_Write_IT>
 8007dce:	e0be      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dd6:	f240 233a 	movw	r3, #570	; 0x23a
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80b6 	beq.w	8007f4e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df4:	f043 0202 	orr.w	r2, r3, #2
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0e:	f043 0208 	orr.w	r2, r3, #8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	f043 0220 	orr.w	r2, r3, #32
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	f043 0210 	orr.w	r2, r3, #16
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f043 0208 	orr.w	r2, r3, #8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f240 723a 	movw	r2, #1850	; 0x73a
 8007e6c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007e7c:	f023 0302 	bic.w	r3, r3, #2
 8007e80:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f003 ffac 	bl	800bde4 <SDMMC_CmdStopTransfer>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f855 	bl	8007f60 <HAL_SD_ErrorCallback>
}
 8007eb6:	e04a      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d045      	beq.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f003 0310 	and.w	r3, r3, #16
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <HAL_SD_IRQHandler+0x282>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d011      	beq.n	8007efa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eda:	4a1f      	ldr	r2, [pc, #124]	; (8007f58 <HAL_SD_IRQHandler+0x304>)
 8007edc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fc faa4 	bl	8004430 <HAL_DMA_Abort_IT>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d02f      	beq.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fac8 	bl	8008488 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ef8:	e029      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_SD_IRQHandler+0x2ba>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d011      	beq.n	8007f32 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	4a12      	ldr	r2, [pc, #72]	; (8007f5c <HAL_SD_IRQHandler+0x308>)
 8007f14:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc fa88 	bl	8004430 <HAL_DMA_Abort_IT>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d013      	beq.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fae3 	bl	80084f6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007f30:	e00d      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f006 f822 	bl	800df90 <HAL_SD_AbortCallback>
}
 8007f4c:	e7ff      	b.n	8007f4e <HAL_SD_IRQHandler+0x2fa>
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	08008489 	.word	0x08008489
 8007f5c:	080084f7 	.word	0x080084f7

08007f60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f82:	0f9b      	lsrs	r3, r3, #30
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f8e:	0e9b      	lsrs	r3, r3, #26
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa0:	0e1b      	lsrs	r3, r3, #24
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd4:	0d1b      	lsrs	r3, r3, #20
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff2:	0bdb      	lsrs	r3, r3, #15
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008004:	0b9b      	lsrs	r3, r3, #14
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008016:	0b5b      	lsrs	r3, r3, #13
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	b2da      	uxtb	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008028:	0b1b      	lsrs	r3, r3, #12
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	b2da      	uxtb	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2200      	movs	r2, #0
 800803a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008040:	2b00      	cmp	r3, #0
 8008042:	d163      	bne.n	800810c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008048:	009a      	lsls	r2, r3, #2
 800804a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800804e:	4013      	ands	r3, r2
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008054:	0f92      	lsrs	r2, r2, #30
 8008056:	431a      	orrs	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008060:	0edb      	lsrs	r3, r3, #27
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008072:	0e1b      	lsrs	r3, r3, #24
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008084:	0d5b      	lsrs	r3, r3, #21
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008096:	0c9b      	lsrs	r3, r3, #18
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a8:	0bdb      	lsrs	r3, r3, #15
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	7e1b      	ldrb	r3, [r3, #24]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	3302      	adds	r3, #2
 80080cc:	2201      	movs	r2, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80080d6:	fb03 f202 	mul.w	r2, r3, r2
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	7a1b      	ldrb	r3, [r3, #8]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80080f8:	0a52      	lsrs	r2, r2, #9
 80080fa:	fb03 f202 	mul.w	r2, r3, r2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008108:	661a      	str	r2, [r3, #96]	; 0x60
 800810a:	e031      	b.n	8008170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008110:	2b01      	cmp	r3, #1
 8008112:	d11d      	bne.n	8008150 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008118:	041b      	lsls	r3, r3, #16
 800811a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	431a      	orrs	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	3301      	adds	r3, #1
 8008130:	029a      	lsls	r2, r3, #10
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008144:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	661a      	str	r2, [r3, #96]	; 0x60
 800814e:	e00f      	b.n	8008170 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a58      	ldr	r2, [pc, #352]	; (80082b8 <HAL_SD_GetCardCSD+0x344>)
 8008156:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e09d      	b.n	80082ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008174:	0b9b      	lsrs	r3, r3, #14
 8008176:	b2db      	uxtb	r3, r3
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008186:	09db      	lsrs	r3, r3, #7
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818e:	b2da      	uxtb	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	0fdb      	lsrs	r3, r3, #31
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b4:	0f5b      	lsrs	r3, r3, #29
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c6:	0e9b      	lsrs	r3, r3, #26
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d8:	0d9b      	lsrs	r3, r3, #22
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	0d5b      	lsrs	r3, r3, #21
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	0c1b      	lsrs	r3, r3, #16
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	0bdb      	lsrs	r3, r3, #15
 800821c:	b2db      	uxtb	r3, r3
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	0b9b      	lsrs	r3, r3, #14
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	0b5b      	lsrs	r3, r3, #13
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008256:	0b1b      	lsrs	r3, r3, #12
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	b2da      	uxtb	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826a:	0a9b      	lsrs	r3, r3, #10
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829a:	b2da      	uxtb	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	004005ff 	.word	0x004005ff

080082bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008314:	b5b0      	push	{r4, r5, r7, lr}
 8008316:	b08e      	sub	sp, #56	; 0x38
 8008318:	af04      	add	r7, sp, #16
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2203      	movs	r2, #3
 8008328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008330:	2b03      	cmp	r3, #3
 8008332:	d02e      	beq.n	8008392 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833a:	d106      	bne.n	800834a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	639a      	str	r2, [r3, #56]	; 0x38
 8008348:	e029      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008350:	d10a      	bne.n	8008368 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa8a 	bl	800886c <SD_WideBus_Enable>
 8008358:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	431a      	orrs	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	639a      	str	r2, [r3, #56]	; 0x38
 8008366:	e01a      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fac7 	bl	8008902 <SD_WideBus_Disable>
 8008374:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	; 0x38
 8008382:	e00c      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
 8008390:	e005      	b.n	800839e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a26      	ldr	r2, [pc, #152]	; (8008444 <HAL_SD_ConfigWideBusOperation+0x130>)
 80083ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083bc:	e01f      	b.n	80083fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681d      	ldr	r5, [r3, #0]
 80083e4:	466c      	mov	r4, sp
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083f2:	f107 0308 	add.w	r3, r7, #8
 80083f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083f8:	4628      	mov	r0, r5
 80083fa:	f003 fb6d 	bl	800bad8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008406:	4618      	mov	r0, r3
 8008408:	f003 fc41 	bl	800bc8e <SDMMC_CmdBlockLength>
 800840c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00c      	beq.n	800842e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a0a      	ldr	r2, [pc, #40]	; (8008444 <HAL_SD_ConfigWideBusOperation+0x130>)
 800841a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	431a      	orrs	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800843a:	4618      	mov	r0, r3
 800843c:	3728      	adds	r7, #40	; 0x28
 800843e:	46bd      	mov	sp, r7
 8008440:	bdb0      	pop	{r4, r5, r7, pc}
 8008442:	bf00      	nop
 8008444:	004005ff 	.word	0x004005ff

08008448 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008454:	f107 030c 	add.w	r3, r7, #12
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f9de 	bl	800881c <SD_SendStatus>
 8008460:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	0a5b      	lsrs	r3, r3, #9
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800847e:	693b      	ldr	r3, [r7, #16]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f240 523a 	movw	r2, #1338	; 0x53a
 800849e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff ffd1 	bl	8008448 <HAL_SD_GetCardState>
 80084a6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b06      	cmp	r3, #6
 80084ba:	d002      	beq.n	80084c2 <SD_DMATxAbort+0x3a>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b05      	cmp	r3, #5
 80084c0:	d10a      	bne.n	80084d8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f003 fc8c 	bl	800bde4 <SDMMC_CmdStopTransfer>
 80084cc:	4602      	mov	r2, r0
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d2:	431a      	orrs	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f005 fd55 	bl	800df90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084e6:	e002      	b.n	80084ee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff fd39 	bl	8007f60 <HAL_SD_ErrorCallback>
}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f240 523a 	movw	r2, #1338	; 0x53a
 800850c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff ff9a 	bl	8008448 <HAL_SD_GetCardState>
 8008514:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b06      	cmp	r3, #6
 8008528:	d002      	beq.n	8008530 <SD_DMARxAbort+0x3a>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b05      	cmp	r3, #5
 800852e:	d10a      	bne.n	8008546 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f003 fc55 	bl	800bde4 <SDMMC_CmdStopTransfer>
 800853a:	4602      	mov	r2, r0
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	431a      	orrs	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f005 fd1e 	bl	800df90 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008554:	e002      	b.n	800855c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff fd02 	bl	8007f60 <HAL_SD_ErrorCallback>
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008564:	b5b0      	push	{r4, r5, r7, lr}
 8008566:	b094      	sub	sp, #80	; 0x50
 8008568:	af04      	add	r7, sp, #16
 800856a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800856c:	2301      	movs	r3, #1
 800856e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f003 fb06 	bl	800bb86 <SDIO_GetPowerState>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008584:	e0b8      	b.n	80086f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	2b03      	cmp	r3, #3
 800858c:	d02f      	beq.n	80085ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f003 fd30 	bl	800bff8 <SDMMC_CmdSendCID>
 8008598:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800859a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80085a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a2:	e0a9      	b.n	80086f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f003 fb30 	bl	800bc10 <SDIO_GetResponse>
 80085b0:	4602      	mov	r2, r0
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2104      	movs	r1, #4
 80085bc:	4618      	mov	r0, r3
 80085be:	f003 fb27 	bl	800bc10 <SDIO_GetResponse>
 80085c2:	4602      	mov	r2, r0
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2108      	movs	r1, #8
 80085ce:	4618      	mov	r0, r3
 80085d0:	f003 fb1e 	bl	800bc10 <SDIO_GetResponse>
 80085d4:	4602      	mov	r2, r0
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	210c      	movs	r1, #12
 80085e0:	4618      	mov	r0, r3
 80085e2:	f003 fb15 	bl	800bc10 <SDIO_GetResponse>
 80085e6:	4602      	mov	r2, r0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d00d      	beq.n	8008612 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f107 020e 	add.w	r2, r7, #14
 80085fe:	4611      	mov	r1, r2
 8008600:	4618      	mov	r0, r3
 8008602:	f003 fd36 	bl	800c072 <SDMMC_CmdSetRelAdd>
 8008606:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <SD_InitCard+0xae>
    {
      return errorstate;
 800860e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008610:	e072      	b.n	80086f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	2b03      	cmp	r3, #3
 8008618:	d036      	beq.n	8008688 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800861a:	89fb      	ldrh	r3, [r7, #14]
 800861c:	461a      	mov	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f003 fd00 	bl	800c034 <SDMMC_CmdSendCSD>
 8008634:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <SD_InitCard+0xdc>
    {
      return errorstate;
 800863c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863e:	e05b      	b.n	80086f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f003 fae2 	bl	800bc10 <SDIO_GetResponse>
 800864c:	4602      	mov	r2, r0
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2104      	movs	r1, #4
 8008658:	4618      	mov	r0, r3
 800865a:	f003 fad9 	bl	800bc10 <SDIO_GetResponse>
 800865e:	4602      	mov	r2, r0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2108      	movs	r1, #8
 800866a:	4618      	mov	r0, r3
 800866c:	f003 fad0 	bl	800bc10 <SDIO_GetResponse>
 8008670:	4602      	mov	r2, r0
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	210c      	movs	r1, #12
 800867c:	4618      	mov	r0, r3
 800867e:	f003 fac7 	bl	800bc10 <SDIO_GetResponse>
 8008682:	4602      	mov	r2, r0
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2104      	movs	r1, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f003 fabe 	bl	800bc10 <SDIO_GetResponse>
 8008694:	4603      	mov	r3, r0
 8008696:	0d1a      	lsrs	r2, r3, #20
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff fc66 	bl	8007f74 <HAL_SD_GetCardCSD>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086b2:	e021      	b.n	80086f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6819      	ldr	r1, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086bc:	041b      	lsls	r3, r3, #16
 80086be:	2200      	movs	r2, #0
 80086c0:	461c      	mov	r4, r3
 80086c2:	4615      	mov	r5, r2
 80086c4:	4622      	mov	r2, r4
 80086c6:	462b      	mov	r3, r5
 80086c8:	4608      	mov	r0, r1
 80086ca:	f003 fbad 	bl	800be28 <SDMMC_CmdSelDesel>
 80086ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <SD_InitCard+0x176>
  {
    return errorstate;
 80086d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d8:	e00e      	b.n	80086f8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681d      	ldr	r5, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	466c      	mov	r4, sp
 80086e2:	f103 0210 	add.w	r2, r3, #16
 80086e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80086e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086ec:	3304      	adds	r3, #4
 80086ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086f0:	4628      	mov	r0, r5
 80086f2:	f003 f9f1 	bl	800bad8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3740      	adds	r7, #64	; 0x40
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bdb0      	pop	{r4, r5, r7, pc}

08008700 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f003 fba8 	bl	800be6e <SDMMC_CmdGoIdleState>
 800871e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	e072      	b.n	8008810 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f003 fbbb 	bl	800beaa <SDMMC_CmdOperCond>
 8008734:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00d      	beq.n	8008758 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f003 fb91 	bl	800be6e <SDMMC_CmdGoIdleState>
 800874c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	e05b      	b.n	8008810 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008762:	2b01      	cmp	r3, #1
 8008764:	d137      	bne.n	80087d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f003 fbbb 	bl	800bee8 <SDMMC_CmdAppCommand>
 8008772:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d02d      	beq.n	80087d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800877a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800877e:	e047      	b.n	8008810 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f003 fbae 	bl	800bee8 <SDMMC_CmdAppCommand>
 800878c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <SD_PowerON+0x98>
    {
      return errorstate;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	e03b      	b.n	8008810 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	491e      	ldr	r1, [pc, #120]	; (8008818 <SD_PowerON+0x118>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f003 fbc4 	bl	800bf2c <SDMMC_CmdAppOperCommand>
 80087a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087b0:	e02e      	b.n	8008810 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2100      	movs	r1, #0
 80087b8:	4618      	mov	r0, r3
 80087ba:	f003 fa29 	bl	800bc10 <SDIO_GetResponse>
 80087be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	0fdb      	lsrs	r3, r3, #31
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <SD_PowerON+0xcc>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <SD_PowerON+0xce>
 80087cc:	2300      	movs	r3, #0
 80087ce:	613b      	str	r3, [r7, #16]

    count++;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3301      	adds	r3, #1
 80087d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087dc:	4293      	cmp	r3, r2
 80087de:	d802      	bhi.n	80087e6 <SD_PowerON+0xe6>
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0cc      	beq.n	8008780 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d902      	bls.n	80087f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087f4:	e00c      	b.n	8008810 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	645a      	str	r2, [r3, #68]	; 0x44
 8008806:	e002      	b.n	800880e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	c1100000 	.word	0xc1100000

0800881c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d102      	bne.n	8008832 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800882c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008830:	e018      	b.n	8008864 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883a:	041b      	lsls	r3, r3, #16
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f003 fc38 	bl	800c0b4 <SDMMC_CmdSendStatus>
 8008844:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <SD_SendStatus+0x34>
  {
    return errorstate;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	e009      	b.n	8008864 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f003 f9da 	bl	800bc10 <SDIO_GetResponse>
 800885c:	4602      	mov	r2, r0
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008874:	2300      	movs	r3, #0
 8008876:	60fb      	str	r3, [r7, #12]
 8008878:	2300      	movs	r3, #0
 800887a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f003 f9c4 	bl	800bc10 <SDIO_GetResponse>
 8008888:	4603      	mov	r3, r0
 800888a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800888e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008892:	d102      	bne.n	800889a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008898:	e02f      	b.n	80088fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800889a:	f107 030c 	add.w	r3, r7, #12
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f879 	bl	8008998 <SD_FindSCR>
 80088a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	e023      	b.n	80088fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01c      	beq.n	80088f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f003 fb0d 	bl	800bee8 <SDMMC_CmdAppCommand>
 80088ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	e00f      	b.n	80088fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2102      	movs	r1, #2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f003 fb46 	bl	800bf72 <SDMMC_CmdBusWidth>
 80088e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	e003      	b.n	80088fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e001      	b.n	80088fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	2300      	movs	r3, #0
 8008910:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2100      	movs	r1, #0
 8008918:	4618      	mov	r0, r3
 800891a:	f003 f979 	bl	800bc10 <SDIO_GetResponse>
 800891e:	4603      	mov	r3, r0
 8008920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008928:	d102      	bne.n	8008930 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800892a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800892e:	e02f      	b.n	8008990 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008930:	f107 030c 	add.w	r3, r7, #12
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f82e 	bl	8008998 <SD_FindSCR>
 800893c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	e023      	b.n	8008990 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01c      	beq.n	800898c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895a:	041b      	lsls	r3, r3, #16
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f003 fac2 	bl	800bee8 <SDMMC_CmdAppCommand>
 8008964:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	e00f      	b.n	8008990 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2100      	movs	r1, #0
 8008976:	4618      	mov	r0, r3
 8008978:	f003 fafb 	bl	800bf72 <SDMMC_CmdBusWidth>
 800897c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	e003      	b.n	8008990 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008988:	2300      	movs	r3, #0
 800898a:	e001      	b.n	8008990 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800898c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b08f      	sub	sp, #60	; 0x3c
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80089a2:	f7fb fa8d 	bl	8003ec0 <HAL_GetTick>
 80089a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80089ac:	2300      	movs	r3, #0
 80089ae:	60bb      	str	r3, [r7, #8]
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2108      	movs	r1, #8
 80089be:	4618      	mov	r0, r3
 80089c0:	f003 f965 	bl	800bc8e <SDMMC_CmdBlockLength>
 80089c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	e0b2      	b.n	8008b36 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d8:	041b      	lsls	r3, r3, #16
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f003 fa83 	bl	800bee8 <SDMMC_CmdAppCommand>
 80089e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	e0a3      	b.n	8008b36 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80089f4:	2308      	movs	r3, #8
 80089f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80089f8:	2330      	movs	r3, #48	; 0x30
 80089fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80089fc:	2302      	movs	r3, #2
 80089fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f107 0210 	add.w	r2, r7, #16
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f003 f90f 	bl	800bc36 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f003 faca 	bl	800bfb6 <SDMMC_CmdSendSCR>
 8008a22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d02a      	beq.n	8008a80 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	e083      	b.n	8008b36 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00f      	beq.n	8008a5c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6819      	ldr	r1, [r3, #0]
 8008a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	f107 0208 	add.w	r2, r7, #8
 8008a48:	18d4      	adds	r4, r2, r3
 8008a4a:	4608      	mov	r0, r1
 8008a4c:	f003 f86f 	bl	800bb2e <SDIO_ReadFIFO>
 8008a50:	4603      	mov	r3, r0
 8008a52:	6023      	str	r3, [r4, #0]
      index++;
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	3301      	adds	r3, #1
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
 8008a5a:	e006      	b.n	8008a6a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d012      	beq.n	8008a90 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a6a:	f7fb fa29 	bl	8003ec0 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a78:	d102      	bne.n	8008a80 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a7e:	e05a      	b.n	8008b36 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a86:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0cf      	beq.n	8008a2e <SD_FindSCR+0x96>
 8008a8e:	e000      	b.n	8008a92 <SD_FindSCR+0xfa>
      break;
 8008a90:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d005      	beq.n	8008aac <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2208      	movs	r2, #8
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	e044      	b.n	8008b36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e037      	b.n	8008b36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008adc:	2320      	movs	r3, #32
 8008ade:	e02a      	b.n	8008b36 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ae8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	061a      	lsls	r2, r3, #24
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008af6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	0a1b      	lsrs	r3, r3, #8
 8008afc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	0e1b      	lsrs	r3, r3, #24
 8008b06:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	601a      	str	r2, [r3, #0]
    scr++;
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	3304      	adds	r3, #4
 8008b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	061a      	lsls	r2, r3, #24
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	021b      	lsls	r3, r3, #8
 8008b1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	0a1b      	lsrs	r3, r3, #8
 8008b24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	0e1b      	lsrs	r3, r3, #24
 8008b2e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	373c      	adds	r7, #60	; 0x3c
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd90      	pop	{r4, r7, pc}

08008b3e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d03f      	beq.n	8008bd8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e033      	b.n	8008bc6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f002 ffe3 	bl	800bb2e <SDIO_ReadFIFO>
 8008b68:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3301      	adds	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	0c1b      	lsrs	r3, r3, #16
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	0e1b      	lsrs	r3, r3, #24
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b07      	cmp	r3, #7
 8008bca:	d9c8      	bls.n	8008b5e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008bd8:	bf00      	nop
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d043      	beq.n	8008c82 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	e037      	b.n	8008c70 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	021a      	lsls	r2, r3, #8
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3301      	adds	r3, #1
 8008c22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	041a      	lsls	r2, r3, #16
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	061a      	lsls	r2, r3, #24
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f107 0208 	add.w	r2, r7, #8
 8008c62:	4611      	mov	r1, r2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 ff6f 	bl	800bb48 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b07      	cmp	r3, #7
 8008c74:	d9c4      	bls.n	8008c00 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008c82:	bf00      	nop
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e07b      	b.n	8008d94 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d108      	bne.n	8008cb6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cac:	d009      	beq.n	8008cc2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	61da      	str	r2, [r3, #28]
 8008cb4:	e005      	b.n	8008cc2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7f9 ff87 	bl	8002bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cf8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d46:	ea42 0103 	orr.w	r1, r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	f003 0104 	and.w	r1, r3, #4
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	f003 0210 	and.w	r2, r3, #16
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69da      	ldr	r2, [r3, #28]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d101      	bne.n	8008dbe <HAL_SPI_Transmit+0x22>
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e126      	b.n	800900c <HAL_SPI_Transmit+0x270>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008dc6:	f7fb f87b 	bl	8003ec0 <HAL_GetTick>
 8008dca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008dcc:	88fb      	ldrh	r3, [r7, #6]
 8008dce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d002      	beq.n	8008de2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008de0:	e10b      	b.n	8008ffa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_SPI_Transmit+0x52>
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008df2:	e102      	b.n	8008ffa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2203      	movs	r2, #3
 8008df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	88fa      	ldrh	r2, [r7, #6]
 8008e0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	88fa      	ldrh	r2, [r7, #6]
 8008e12:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3a:	d10f      	bne.n	8008e5c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d007      	beq.n	8008e7a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e82:	d14b      	bne.n	8008f1c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <HAL_SPI_Transmit+0xf6>
 8008e8c:	8afb      	ldrh	r3, [r7, #22]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d13e      	bne.n	8008f10 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	881a      	ldrh	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	1c9a      	adds	r2, r3, #2
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008eb6:	e02b      	b.n	8008f10 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d112      	bne.n	8008eec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	881a      	ldrh	r2, [r3, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	1c9a      	adds	r2, r3, #2
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	86da      	strh	r2, [r3, #54]	; 0x36
 8008eea:	e011      	b.n	8008f10 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eec:	f7fa ffe8 	bl	8003ec0 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d803      	bhi.n	8008f04 <HAL_SPI_Transmit+0x168>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f02:	d102      	bne.n	8008f0a <HAL_SPI_Transmit+0x16e>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d102      	bne.n	8008f10 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f0e:	e074      	b.n	8008ffa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1ce      	bne.n	8008eb8 <HAL_SPI_Transmit+0x11c>
 8008f1a:	e04c      	b.n	8008fb6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_SPI_Transmit+0x18e>
 8008f24:	8afb      	ldrh	r3, [r7, #22]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d140      	bne.n	8008fac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	330c      	adds	r3, #12
 8008f34:	7812      	ldrb	r2, [r2, #0]
 8008f36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008f50:	e02c      	b.n	8008fac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d113      	bne.n	8008f88 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	330c      	adds	r3, #12
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f86:	e011      	b.n	8008fac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f88:	f7fa ff9a 	bl	8003ec0 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d803      	bhi.n	8008fa0 <HAL_SPI_Transmit+0x204>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f9e:	d102      	bne.n	8008fa6 <HAL_SPI_Transmit+0x20a>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d102      	bne.n	8008fac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008faa:	e026      	b.n	8008ffa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1cd      	bne.n	8008f52 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f001 f804 	bl	8009fc8 <SPI_EndRxTxTransaction>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	77fb      	strb	r3, [r7, #31]
 8008ff6:	e000      	b.n	8008ffa <HAL_SPI_Transmit+0x25e>
  }

error:
 8008ff8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800900a:	7ffb      	ldrb	r3, [r7, #31]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3720      	adds	r7, #32
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b088      	sub	sp, #32
 8009018:	af02      	add	r7, sp, #8
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	603b      	str	r3, [r7, #0]
 8009020:	4613      	mov	r3, r2
 8009022:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009030:	d112      	bne.n	8009058 <HAL_SPI_Receive+0x44>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10e      	bne.n	8009058 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2204      	movs	r2, #4
 800903e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009042:	88fa      	ldrh	r2, [r7, #6]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	4613      	mov	r3, r2
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f8f1 	bl	8009236 <HAL_SPI_TransmitReceive>
 8009054:	4603      	mov	r3, r0
 8009056:	e0ea      	b.n	800922e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800905e:	2b01      	cmp	r3, #1
 8009060:	d101      	bne.n	8009066 <HAL_SPI_Receive+0x52>
 8009062:	2302      	movs	r3, #2
 8009064:	e0e3      	b.n	800922e <HAL_SPI_Receive+0x21a>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800906e:	f7fa ff27 	bl	8003ec0 <HAL_GetTick>
 8009072:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d002      	beq.n	8009086 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009080:	2302      	movs	r3, #2
 8009082:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009084:	e0ca      	b.n	800921c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <HAL_SPI_Receive+0x7e>
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009096:	e0c1      	b.n	800921c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2204      	movs	r2, #4
 800909c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	88fa      	ldrh	r2, [r7, #6]
 80090b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090de:	d10f      	bne.n	8009100 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910a:	2b40      	cmp	r3, #64	; 0x40
 800910c:	d007      	beq.n	800911e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800911c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d162      	bne.n	80091ec <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009126:	e02e      	b.n	8009186 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b01      	cmp	r3, #1
 8009134:	d115      	bne.n	8009162 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f103 020c 	add.w	r2, r3, #12
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009156:	b29b      	uxth	r3, r3
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009160:	e011      	b.n	8009186 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009162:	f7fa fead 	bl	8003ec0 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d803      	bhi.n	800917a <HAL_SPI_Receive+0x166>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009178:	d102      	bne.n	8009180 <HAL_SPI_Receive+0x16c>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009184:	e04a      	b.n	800921c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800918a:	b29b      	uxth	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1cb      	bne.n	8009128 <HAL_SPI_Receive+0x114>
 8009190:	e031      	b.n	80091f6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b01      	cmp	r3, #1
 800919e:	d113      	bne.n	80091c8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	b292      	uxth	r2, r2
 80091ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	1c9a      	adds	r2, r3, #2
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091c6:	e011      	b.n	80091ec <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091c8:	f7fa fe7a 	bl	8003ec0 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d803      	bhi.n	80091e0 <HAL_SPI_Receive+0x1cc>
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091de:	d102      	bne.n	80091e6 <HAL_SPI_Receive+0x1d2>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d102      	bne.n	80091ec <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80091ea:	e017      	b.n	800921c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1cd      	bne.n	8009192 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fe7e 	bl	8009efc <SPI_EndRxTransaction>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2220      	movs	r2, #32
 800920a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]
 8009218:	e000      	b.n	800921c <HAL_SPI_Receive+0x208>
  }

error :
 800921a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b08c      	sub	sp, #48	; 0x30
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009244:	2301      	movs	r3, #1
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_SPI_TransmitReceive+0x26>
 8009258:	2302      	movs	r3, #2
 800925a:	e18a      	b.n	8009572 <HAL_SPI_TransmitReceive+0x33c>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009264:	f7fa fe2c 	bl	8003ec0 <HAL_GetTick>
 8009268:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800927a:	887b      	ldrh	r3, [r7, #2]
 800927c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800927e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009282:	2b01      	cmp	r3, #1
 8009284:	d00f      	beq.n	80092a6 <HAL_SPI_TransmitReceive+0x70>
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800928c:	d107      	bne.n	800929e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d103      	bne.n	800929e <HAL_SPI_TransmitReceive+0x68>
 8009296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800929a:	2b04      	cmp	r3, #4
 800929c:	d003      	beq.n	80092a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800929e:	2302      	movs	r3, #2
 80092a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092a4:	e15b      	b.n	800955e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <HAL_SPI_TransmitReceive+0x82>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <HAL_SPI_TransmitReceive+0x82>
 80092b2:	887b      	ldrh	r3, [r7, #2]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d103      	bne.n	80092c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80092be:	e14e      	b.n	800955e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d003      	beq.n	80092d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2205      	movs	r2, #5
 80092d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	887a      	ldrh	r2, [r7, #2]
 80092e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	887a      	ldrh	r2, [r7, #2]
 80092ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	887a      	ldrh	r2, [r7, #2]
 80092f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	887a      	ldrh	r2, [r7, #2]
 80092fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	d007      	beq.n	8009328 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009330:	d178      	bne.n	8009424 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <HAL_SPI_TransmitReceive+0x10a>
 800933a:	8b7b      	ldrh	r3, [r7, #26]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d166      	bne.n	800940e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009350:	1c9a      	adds	r2, r3, #2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800935a:	b29b      	uxth	r3, r3
 800935c:	3b01      	subs	r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009364:	e053      	b.n	800940e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b02      	cmp	r3, #2
 8009372:	d11b      	bne.n	80093ac <HAL_SPI_TransmitReceive+0x176>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d016      	beq.n	80093ac <HAL_SPI_TransmitReceive+0x176>
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	2b01      	cmp	r3, #1
 8009382:	d113      	bne.n	80093ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009388:	881a      	ldrh	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	1c9a      	adds	r2, r3, #2
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800939e:	b29b      	uxth	r3, r3
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d119      	bne.n	80093ee <HAL_SPI_TransmitReceive+0x1b8>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093be:	b29b      	uxth	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d014      	beq.n	80093ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	b292      	uxth	r2, r2
 80093d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d6:	1c9a      	adds	r2, r3, #2
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093ea:	2301      	movs	r3, #1
 80093ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093ee:	f7fa fd67 	bl	8003ec0 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d807      	bhi.n	800940e <HAL_SPI_TransmitReceive+0x1d8>
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009404:	d003      	beq.n	800940e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800940c:	e0a7      	b.n	800955e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009412:	b29b      	uxth	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1a6      	bne.n	8009366 <HAL_SPI_TransmitReceive+0x130>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1a1      	bne.n	8009366 <HAL_SPI_TransmitReceive+0x130>
 8009422:	e07c      	b.n	800951e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <HAL_SPI_TransmitReceive+0x1fc>
 800942c:	8b7b      	ldrh	r3, [r7, #26]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d16b      	bne.n	800950a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	330c      	adds	r3, #12
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800944e:	b29b      	uxth	r3, r3
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009458:	e057      	b.n	800950a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b02      	cmp	r3, #2
 8009466:	d11c      	bne.n	80094a2 <HAL_SPI_TransmitReceive+0x26c>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d017      	beq.n	80094a2 <HAL_SPI_TransmitReceive+0x26c>
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	2b01      	cmp	r3, #1
 8009476:	d114      	bne.n	80094a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	330c      	adds	r3, #12
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d119      	bne.n	80094e4 <HAL_SPI_TransmitReceive+0x2ae>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d014      	beq.n	80094e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c4:	b2d2      	uxtb	r2, r2
 80094c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094e0:	2301      	movs	r3, #1
 80094e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80094e4:	f7fa fcec 	bl	8003ec0 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d803      	bhi.n	80094fc <HAL_SPI_TransmitReceive+0x2c6>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094fa:	d102      	bne.n	8009502 <HAL_SPI_TransmitReceive+0x2cc>
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d103      	bne.n	800950a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009508:	e029      	b.n	800955e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800950e:	b29b      	uxth	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1a2      	bne.n	800945a <HAL_SPI_TransmitReceive+0x224>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009518:	b29b      	uxth	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d19d      	bne.n	800945a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800951e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009520:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fd50 	bl	8009fc8 <SPI_EndRxTxTransaction>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d006      	beq.n	800953c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2220      	movs	r2, #32
 8009538:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800953a:	e010      	b.n	800955e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10b      	bne.n	800955c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009544:	2300      	movs	r3, #0
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	e000      	b.n	800955e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800955c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800956e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009572:	4618      	mov	r0, r3
 8009574:	3730      	adds	r7, #48	; 0x30
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_SPI_Transmit_DMA+0x20>
 8009598:	2302      	movs	r3, #2
 800959a:	e09b      	b.n	80096d4 <HAL_SPI_Transmit_DMA+0x158>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d002      	beq.n	80095b6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80095b0:	2302      	movs	r3, #2
 80095b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095b4:	e089      	b.n	80096ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <HAL_SPI_Transmit_DMA+0x46>
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095c6:	e080      	b.n	80096ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2203      	movs	r2, #3
 80095cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	88fa      	ldrh	r2, [r7, #6]
 80095e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800960e:	d10f      	bne.n	8009630 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800961e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800962e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009634:	4a29      	ldr	r2, [pc, #164]	; (80096dc <HAL_SPI_Transmit_DMA+0x160>)
 8009636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800963c:	4a28      	ldr	r2, [pc, #160]	; (80096e0 <HAL_SPI_Transmit_DMA+0x164>)
 800963e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009644:	4a27      	ldr	r2, [pc, #156]	; (80096e4 <HAL_SPI_Transmit_DMA+0x168>)
 8009646:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964c:	2200      	movs	r2, #0
 800964e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009658:	4619      	mov	r1, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	330c      	adds	r3, #12
 8009660:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009666:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009668:	f7fa fe1a 	bl	80042a0 <HAL_DMA_Start_IT>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00c      	beq.n	800968c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009676:	f043 0210 	orr.w	r2, r3, #16
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800968a:	e01e      	b.n	80096ca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d007      	beq.n	80096aa <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0220 	orr.w	r2, r2, #32
 80096b8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f042 0202 	orr.w	r2, r2, #2
 80096c8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	08009d31 	.word	0x08009d31
 80096e0:	08009b51 	.word	0x08009b51
 80096e4:	08009d85 	.word	0x08009d85

080096e8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009700:	2b01      	cmp	r3, #1
 8009702:	d101      	bne.n	8009708 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009704:	2302      	movs	r3, #2
 8009706:	e0e3      	b.n	80098d0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009716:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800971e:	7dbb      	ldrb	r3, [r7, #22]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d00d      	beq.n	8009740 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800972a:	d106      	bne.n	800973a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <HAL_SPI_TransmitReceive_DMA+0x52>
 8009734:	7dbb      	ldrb	r3, [r7, #22]
 8009736:	2b04      	cmp	r3, #4
 8009738:	d002      	beq.n	8009740 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800973a:	2302      	movs	r3, #2
 800973c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800973e:	e0c2      	b.n	80098c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800974c:	887b      	ldrh	r3, [r7, #2]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009756:	e0b6      	b.n	80098c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b04      	cmp	r3, #4
 8009762:	d003      	beq.n	800976c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2205      	movs	r2, #5
 8009768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	887a      	ldrh	r2, [r7, #2]
 800977c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	887a      	ldrh	r2, [r7, #2]
 8009782:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	887a      	ldrh	r2, [r7, #2]
 800978e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	887a      	ldrh	r2, [r7, #2]
 8009794:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d108      	bne.n	80097c0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b2:	4a49      	ldr	r2, [pc, #292]	; (80098d8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80097b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ba:	4a48      	ldr	r2, [pc, #288]	; (80098dc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80097bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80097be:	e007      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c4:	4a46      	ldr	r2, [pc, #280]	; (80098e0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80097c6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097cc:	4a45      	ldr	r2, [pc, #276]	; (80098e4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80097ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d4:	4a44      	ldr	r2, [pc, #272]	; (80098e8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80097d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097dc:	2200      	movs	r2, #0
 80097de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	330c      	adds	r3, #12
 80097ea:	4619      	mov	r1, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80097f8:	f7fa fd52 	bl	80042a0 <HAL_DMA_Start_IT>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00c      	beq.n	800981c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009806:	f043 0210 	orr.w	r2, r3, #16
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800981a:	e054      	b.n	80098c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0201 	orr.w	r2, r2, #1
 800982a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009830:	2200      	movs	r2, #0
 8009832:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009838:	2200      	movs	r2, #0
 800983a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009840:	2200      	movs	r2, #0
 8009842:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009848:	2200      	movs	r2, #0
 800984a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	4619      	mov	r1, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	330c      	adds	r3, #12
 800985c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009862:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009864:	f7fa fd1c 	bl	80042a0 <HAL_DMA_Start_IT>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00c      	beq.n	8009888 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009872:	f043 0210 	orr.w	r2, r3, #16
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009886:	e01e      	b.n	80098c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009892:	2b40      	cmp	r3, #64	; 0x40
 8009894:	d007      	beq.n	80098a6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098a4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f042 0220 	orr.w	r2, r2, #32
 80098b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f042 0202 	orr.w	r2, r2, #2
 80098c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	08009d4d 	.word	0x08009d4d
 80098dc:	08009bf9 	.word	0x08009bf9
 80098e0:	08009d69 	.word	0x08009d69
 80098e4:	08009ca1 	.word	0x08009ca1
 80098e8:	08009d85 	.word	0x08009d85

080098ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	099b      	lsrs	r3, r3, #6
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10f      	bne.n	8009930 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	099b      	lsrs	r3, r3, #6
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	d004      	beq.n	8009930 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	4798      	blx	r3
    return;
 800992e:	e0d7      	b.n	8009ae0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	085b      	lsrs	r3, r3, #1
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00a      	beq.n	8009952 <HAL_SPI_IRQHandler+0x66>
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	09db      	lsrs	r3, r3, #7
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d004      	beq.n	8009952 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4798      	blx	r3
    return;
 8009950:	e0c6      	b.n	8009ae0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	095b      	lsrs	r3, r3, #5
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10c      	bne.n	8009978 <HAL_SPI_IRQHandler+0x8c>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	099b      	lsrs	r3, r3, #6
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	0a1b      	lsrs	r3, r3, #8
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 80b4 	beq.w	8009ae0 <HAL_SPI_IRQHandler+0x1f4>
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	095b      	lsrs	r3, r3, #5
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80ad 	beq.w	8009ae0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	099b      	lsrs	r3, r3, #6
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d023      	beq.n	80099da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b03      	cmp	r3, #3
 800999c:	d011      	beq.n	80099c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a2:	f043 0204 	orr.w	r2, r3, #4
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	617b      	str	r3, [r7, #20]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	e00b      	b.n	80099da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099c2:	2300      	movs	r3, #0
 80099c4:	613b      	str	r3, [r7, #16]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	693b      	ldr	r3, [r7, #16]
        return;
 80099d8:	e082      	b.n	8009ae0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	095b      	lsrs	r3, r3, #5
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d014      	beq.n	8009a10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	f043 0201 	orr.w	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	0a1b      	lsrs	r3, r3, #8
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00c      	beq.n	8009a36 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a20:	f043 0208 	orr.w	r2, r3, #8
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a28:	2300      	movs	r3, #0
 8009a2a:	60bb      	str	r3, [r7, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	60bb      	str	r3, [r7, #8]
 8009a34:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d04f      	beq.n	8009ade <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_SPI_IRQHandler+0x17e>
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d034      	beq.n	8009ad4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0203 	bic.w	r2, r2, #3
 8009a78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d011      	beq.n	8009aa6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a86:	4a18      	ldr	r2, [pc, #96]	; (8009ae8 <HAL_SPI_IRQHandler+0x1fc>)
 8009a88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fa fcce 	bl	8004430 <HAL_DMA_Abort_IT>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d005      	beq.n	8009aa6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d016      	beq.n	8009adc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab2:	4a0d      	ldr	r2, [pc, #52]	; (8009ae8 <HAL_SPI_IRQHandler+0x1fc>)
 8009ab4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fa fcb8 	bl	8004430 <HAL_DMA_Abort_IT>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009ad2:	e003      	b.n	8009adc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f831 	bl	8009b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009ada:	e000      	b.n	8009ade <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009adc:	bf00      	nop
    return;
 8009ade:	bf00      	nop
  }
}
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	08009dc5 	.word	0x08009dc5

08009aec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b5e:	f7fa f9af 	bl	8003ec0 <HAL_GetTick>
 8009b62:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b72:	d03b      	beq.n	8009bec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0220 	bic.w	r2, r2, #32
 8009b82:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0202 	bic.w	r2, r2, #2
 8009b92:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	2164      	movs	r1, #100	; 0x64
 8009b98:	6978      	ldr	r0, [r7, #20]
 8009b9a:	f000 fa15 	bl	8009fc8 <SPI_EndRxTxTransaction>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba8:	f043 0220 	orr.w	r2, r3, #32
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10a      	bne.n	8009bce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009be4:	6978      	ldr	r0, [r7, #20]
 8009be6:	f7ff ffa9 	bl	8009b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009bea:	e002      	b.n	8009bf2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009bec:	6978      	ldr	r0, [r7, #20]
 8009bee:	f7f8 fe7f 	bl	80028f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c06:	f7fa f95b 	bl	8003ec0 <HAL_GetTick>
 8009c0a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1a:	d03b      	beq.n	8009c94 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 0220 	bic.w	r2, r2, #32
 8009c2a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10d      	bne.n	8009c50 <SPI_DMAReceiveCplt+0x58>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c3c:	d108      	bne.n	8009c50 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0203 	bic.w	r2, r2, #3
 8009c4c:	605a      	str	r2, [r3, #4]
 8009c4e:	e007      	b.n	8009c60 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 0201 	bic.w	r2, r2, #1
 8009c5e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	2164      	movs	r1, #100	; 0x64
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 f949 	bl	8009efc <SPI_EndRxTransaction>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2220      	movs	r2, #32
 8009c74:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff ff55 	bl	8009b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009c92:	e002      	b.n	8009c9a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7f8 fe4f 	bl	8002938 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cae:	f7fa f907 	bl	8003ec0 <HAL_GetTick>
 8009cb2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc2:	d02f      	beq.n	8009d24 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f022 0220 	bic.w	r2, r2, #32
 8009cd2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	2164      	movs	r1, #100	; 0x64
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 f975 	bl	8009fc8 <SPI_EndRxTxTransaction>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce8:	f043 0220 	orr.w	r2, r3, #32
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 0203 	bic.w	r2, r2, #3
 8009cfe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff ff0d 	bl	8009b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009d22:	e002      	b.n	8009d2a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7ff fee1 	bl	8009aec <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fede 	bl	8009b00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d58:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f7ff feda 	bl	8009b14 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d60:	bf00      	nop
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d74:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7ff fed6 	bl	8009b28 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d7c:	bf00      	nop
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0203 	bic.w	r2, r2, #3
 8009da0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da6:	f043 0210 	orr.w	r2, r3, #16
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7ff fec0 	bl	8009b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009dbc:	bf00      	nop
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7ff feac 	bl	8009b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009de4:	bf00      	nop
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009dfc:	f7fa f860 	bl	8003ec0 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	1a9b      	subs	r3, r3, r2
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	4413      	add	r3, r2
 8009e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e0c:	f7fa f858 	bl	8003ec0 <HAL_GetTick>
 8009e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e12:	4b39      	ldr	r3, [pc, #228]	; (8009ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	015b      	lsls	r3, r3, #5
 8009e18:	0d1b      	lsrs	r3, r3, #20
 8009e1a:	69fa      	ldr	r2, [r7, #28]
 8009e1c:	fb02 f303 	mul.w	r3, r2, r3
 8009e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e22:	e054      	b.n	8009ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2a:	d050      	beq.n	8009ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e2c:	f7fa f848 	bl	8003ec0 <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	69fa      	ldr	r2, [r7, #28]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d902      	bls.n	8009e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d13d      	bne.n	8009ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e5a:	d111      	bne.n	8009e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e64:	d004      	beq.n	8009e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e6e:	d107      	bne.n	8009e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e88:	d10f      	bne.n	8009eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e017      	b.n	8009eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	bf0c      	ite	eq
 8009ede:	2301      	moveq	r3, #1
 8009ee0:	2300      	movne	r3, #0
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	79fb      	ldrb	r3, [r7, #7]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d19b      	bne.n	8009e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000030 	.word	0x20000030

08009efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f10:	d111      	bne.n	8009f36 <SPI_EndRxTransaction+0x3a>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f1a:	d004      	beq.n	8009f26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f24:	d107      	bne.n	8009f36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f3e:	d12a      	bne.n	8009f96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f48:	d012      	beq.n	8009f70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2200      	movs	r2, #0
 8009f52:	2180      	movs	r1, #128	; 0x80
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff ff49 	bl	8009dec <SPI_WaitFlagStateUntilTimeout>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d02d      	beq.n	8009fbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f64:	f043 0220 	orr.w	r2, r3, #32
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e026      	b.n	8009fbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	2101      	movs	r1, #1
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f7ff ff36 	bl	8009dec <SPI_WaitFlagStateUntilTimeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01a      	beq.n	8009fbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8a:	f043 0220 	orr.w	r2, r3, #32
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e013      	b.n	8009fbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7ff ff23 	bl	8009dec <SPI_WaitFlagStateUntilTimeout>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d007      	beq.n	8009fbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb0:	f043 0220 	orr.w	r2, r3, #32
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e000      	b.n	8009fbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009fd4:	4b1b      	ldr	r3, [pc, #108]	; (800a044 <SPI_EndRxTxTransaction+0x7c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a1b      	ldr	r2, [pc, #108]	; (800a048 <SPI_EndRxTxTransaction+0x80>)
 8009fda:	fba2 2303 	umull	r2, r3, r2, r3
 8009fde:	0d5b      	lsrs	r3, r3, #21
 8009fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fe4:	fb02 f303 	mul.w	r3, r2, r3
 8009fe8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ff2:	d112      	bne.n	800a01a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2180      	movs	r1, #128	; 0x80
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff fef4 	bl	8009dec <SPI_WaitFlagStateUntilTimeout>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d016      	beq.n	800a038 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00e:	f043 0220 	orr.w	r2, r3, #32
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e00f      	b.n	800a03a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00a      	beq.n	800a036 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	3b01      	subs	r3, #1
 800a024:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a030:	2b80      	cmp	r3, #128	; 0x80
 800a032:	d0f2      	beq.n	800a01a <SPI_EndRxTxTransaction+0x52>
 800a034:	e000      	b.n	800a038 <SPI_EndRxTxTransaction+0x70>
        break;
 800a036:	bf00      	nop
  }

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20000030 	.word	0x20000030
 800a048:	165e9f81 	.word	0x165e9f81

0800a04c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e041      	b.n	800a0e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d106      	bne.n	800a078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7f8 fe72 	bl	8002d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	4619      	mov	r1, r3
 800a08a:	4610      	mov	r0, r2
 800a08c:	f000 fa96 	bl	800a5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d001      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e04e      	b.n	800a1a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a23      	ldr	r2, [pc, #140]	; (800a1b0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d022      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x80>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12e:	d01d      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x80>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1f      	ldr	r2, [pc, #124]	; (800a1b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d018      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x80>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d013      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x80>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1c      	ldr	r2, [pc, #112]	; (800a1bc <HAL_TIM_Base_Start_IT+0xd0>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00e      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x80>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a1b      	ldr	r2, [pc, #108]	; (800a1c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d009      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x80>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_TIM_Base_Start_IT+0x80>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a18      	ldr	r2, [pc, #96]	; (800a1c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d111      	bne.n	800a190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2b06      	cmp	r3, #6
 800a17c:	d010      	beq.n	800a1a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f042 0201 	orr.w	r2, r2, #1
 800a18c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18e:	e007      	b.n	800a1a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0201 	orr.w	r2, r2, #1
 800a19e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	40010000 	.word	0x40010000
 800a1b4:	40000400 	.word	0x40000400
 800a1b8:	40000800 	.word	0x40000800
 800a1bc:	40000c00 	.word	0x40000c00
 800a1c0:	40010400 	.word	0x40010400
 800a1c4:	40014000 	.word	0x40014000
 800a1c8:	40001800 	.word	0x40001800

0800a1cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d122      	bne.n	800a228 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d11b      	bne.n	800a228 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f06f 0202 	mvn.w	r2, #2
 800a1f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f9b5 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a214:	e005      	b.n	800a222 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f9a7 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f9b8 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b04      	cmp	r3, #4
 800a234:	d122      	bne.n	800a27c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b04      	cmp	r3, #4
 800a242:	d11b      	bne.n	800a27c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f06f 0204 	mvn.w	r2, #4
 800a24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2202      	movs	r2, #2
 800a252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f98b 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a268:	e005      	b.n	800a276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f97d 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f98e 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b08      	cmp	r3, #8
 800a288:	d122      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f003 0308 	and.w	r3, r3, #8
 800a294:	2b08      	cmp	r3, #8
 800a296:	d11b      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f06f 0208 	mvn.w	r2, #8
 800a2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	f003 0303 	and.w	r3, r3, #3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f961 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a2bc:	e005      	b.n	800a2ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f953 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f964 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0310 	and.w	r3, r3, #16
 800a2da:	2b10      	cmp	r3, #16
 800a2dc:	d122      	bne.n	800a324 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0310 	and.w	r3, r3, #16
 800a2e8:	2b10      	cmp	r3, #16
 800a2ea:	d11b      	bne.n	800a324 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0210 	mvn.w	r2, #16
 800a2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2208      	movs	r2, #8
 800a2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f937 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a310:	e005      	b.n	800a31e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f929 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f93a 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d10e      	bne.n	800a350 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d107      	bne.n	800a350 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f06f 0201 	mvn.w	r2, #1
 800a348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7f7 ff9e 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35a:	2b80      	cmp	r3, #128	; 0x80
 800a35c:	d10e      	bne.n	800a37c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a368:	2b80      	cmp	r3, #128	; 0x80
 800a36a:	d107      	bne.n	800a37c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fae0 	bl	800a93c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a386:	2b40      	cmp	r3, #64	; 0x40
 800a388:	d10e      	bne.n	800a3a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a394:	2b40      	cmp	r3, #64	; 0x40
 800a396:	d107      	bne.n	800a3a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f8ff 	bl	800a5a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	f003 0320 	and.w	r3, r3, #32
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	d10e      	bne.n	800a3d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f003 0320 	and.w	r3, r3, #32
 800a3c0:	2b20      	cmp	r3, #32
 800a3c2:	d107      	bne.n	800a3d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f06f 0220 	mvn.w	r2, #32
 800a3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 faaa 	bl	800a928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3d4:	bf00      	nop
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_TIM_ConfigClockSource+0x1c>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e0b4      	b.n	800a562 <HAL_TIM_ConfigClockSource+0x186>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a41e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a430:	d03e      	beq.n	800a4b0 <HAL_TIM_ConfigClockSource+0xd4>
 800a432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a436:	f200 8087 	bhi.w	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a43e:	f000 8086 	beq.w	800a54e <HAL_TIM_ConfigClockSource+0x172>
 800a442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a446:	d87f      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a448:	2b70      	cmp	r3, #112	; 0x70
 800a44a:	d01a      	beq.n	800a482 <HAL_TIM_ConfigClockSource+0xa6>
 800a44c:	2b70      	cmp	r3, #112	; 0x70
 800a44e:	d87b      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a450:	2b60      	cmp	r3, #96	; 0x60
 800a452:	d050      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0x11a>
 800a454:	2b60      	cmp	r3, #96	; 0x60
 800a456:	d877      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a458:	2b50      	cmp	r3, #80	; 0x50
 800a45a:	d03c      	beq.n	800a4d6 <HAL_TIM_ConfigClockSource+0xfa>
 800a45c:	2b50      	cmp	r3, #80	; 0x50
 800a45e:	d873      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a460:	2b40      	cmp	r3, #64	; 0x40
 800a462:	d058      	beq.n	800a516 <HAL_TIM_ConfigClockSource+0x13a>
 800a464:	2b40      	cmp	r3, #64	; 0x40
 800a466:	d86f      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a468:	2b30      	cmp	r3, #48	; 0x30
 800a46a:	d064      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x15a>
 800a46c:	2b30      	cmp	r3, #48	; 0x30
 800a46e:	d86b      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a470:	2b20      	cmp	r3, #32
 800a472:	d060      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x15a>
 800a474:	2b20      	cmp	r3, #32
 800a476:	d867      	bhi.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d05c      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x15a>
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d05a      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x15a>
 800a480:	e062      	b.n	800a548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	6899      	ldr	r1, [r3, #8]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f000 f9ad 	bl	800a7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	609a      	str	r2, [r3, #8]
      break;
 800a4ae:	e04f      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	6899      	ldr	r1, [r3, #8]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f000 f996 	bl	800a7f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4d2:	609a      	str	r2, [r3, #8]
      break;
 800a4d4:	e03c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	6859      	ldr	r1, [r3, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f000 f90a 	bl	800a6fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2150      	movs	r1, #80	; 0x50
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 f963 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a4f4:	e02c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	6859      	ldr	r1, [r3, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	461a      	mov	r2, r3
 800a504:	f000 f929 	bl	800a75a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2160      	movs	r1, #96	; 0x60
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 f953 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a514:	e01c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	6859      	ldr	r1, [r3, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	461a      	mov	r2, r3
 800a524:	f000 f8ea 	bl	800a6fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2140      	movs	r1, #64	; 0x40
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f943 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a534:	e00c      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4619      	mov	r1, r3
 800a540:	4610      	mov	r0, r2
 800a542:	f000 f93a 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 800a546:	e003      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
      break;
 800a54c:	e000      	b.n	800a550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a54e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ae:	bf00      	nop
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
	...

0800a5bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a40      	ldr	r2, [pc, #256]	; (800a6d0 <TIM_Base_SetConfig+0x114>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d013      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5da:	d00f      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a3d      	ldr	r2, [pc, #244]	; (800a6d4 <TIM_Base_SetConfig+0x118>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00b      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a3c      	ldr	r2, [pc, #240]	; (800a6d8 <TIM_Base_SetConfig+0x11c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d007      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a3b      	ldr	r2, [pc, #236]	; (800a6dc <TIM_Base_SetConfig+0x120>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d003      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a3a      	ldr	r2, [pc, #232]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d108      	bne.n	800a60e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a2f      	ldr	r2, [pc, #188]	; (800a6d0 <TIM_Base_SetConfig+0x114>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d02b      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a61c:	d027      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a2c      	ldr	r2, [pc, #176]	; (800a6d4 <TIM_Base_SetConfig+0x118>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d023      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a2b      	ldr	r2, [pc, #172]	; (800a6d8 <TIM_Base_SetConfig+0x11c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d01f      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2a      	ldr	r2, [pc, #168]	; (800a6dc <TIM_Base_SetConfig+0x120>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d01b      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a29      	ldr	r2, [pc, #164]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d017      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a28      	ldr	r2, [pc, #160]	; (800a6e4 <TIM_Base_SetConfig+0x128>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d013      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a27      	ldr	r2, [pc, #156]	; (800a6e8 <TIM_Base_SetConfig+0x12c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00f      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a26      	ldr	r2, [pc, #152]	; (800a6ec <TIM_Base_SetConfig+0x130>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d00b      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a25      	ldr	r2, [pc, #148]	; (800a6f0 <TIM_Base_SetConfig+0x134>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d007      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a24      	ldr	r2, [pc, #144]	; (800a6f4 <TIM_Base_SetConfig+0x138>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d003      	beq.n	800a66e <TIM_Base_SetConfig+0xb2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a23      	ldr	r2, [pc, #140]	; (800a6f8 <TIM_Base_SetConfig+0x13c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d108      	bne.n	800a680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a0a      	ldr	r2, [pc, #40]	; (800a6d0 <TIM_Base_SetConfig+0x114>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d003      	beq.n	800a6b4 <TIM_Base_SetConfig+0xf8>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a0c      	ldr	r2, [pc, #48]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d103      	bne.n	800a6bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	615a      	str	r2, [r3, #20]
}
 800a6c2:	bf00      	nop
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	40010000 	.word	0x40010000
 800a6d4:	40000400 	.word	0x40000400
 800a6d8:	40000800 	.word	0x40000800
 800a6dc:	40000c00 	.word	0x40000c00
 800a6e0:	40010400 	.word	0x40010400
 800a6e4:	40014000 	.word	0x40014000
 800a6e8:	40014400 	.word	0x40014400
 800a6ec:	40014800 	.word	0x40014800
 800a6f0:	40001800 	.word	0x40001800
 800a6f4:	40001c00 	.word	0x40001c00
 800a6f8:	40002000 	.word	0x40002000

0800a6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0201 	bic.w	r2, r3, #1
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 030a 	bic.w	r3, r3, #10
 800a738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	621a      	str	r2, [r3, #32]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b087      	sub	sp, #28
 800a75e:	af00      	add	r7, sp, #0
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	60b9      	str	r1, [r7, #8]
 800a764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	f023 0210 	bic.w	r2, r3, #16
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6a1b      	ldr	r3, [r3, #32]
 800a77c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	031b      	lsls	r3, r3, #12
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a796:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	621a      	str	r2, [r3, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	f043 0307 	orr.w	r3, r3, #7
 800a7dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	609a      	str	r2, [r3, #8]
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a80a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	021a      	lsls	r2, r3, #8
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	431a      	orrs	r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4313      	orrs	r3, r2
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	609a      	str	r2, [r3, #8]
}
 800a824:	bf00      	nop
 800a826:	371c      	adds	r7, #28
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a844:	2302      	movs	r3, #2
 800a846:	e05a      	b.n	800a8fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a86e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a21      	ldr	r2, [pc, #132]	; (800a90c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d022      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a894:	d01d      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a1d      	ldr	r2, [pc, #116]	; (800a910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d018      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a1b      	ldr	r2, [pc, #108]	; (800a914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d013      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a1a      	ldr	r2, [pc, #104]	; (800a918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00e      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a18      	ldr	r2, [pc, #96]	; (800a91c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d009      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a17      	ldr	r2, [pc, #92]	; (800a920 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d004      	beq.n	800a8d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a15      	ldr	r2, [pc, #84]	; (800a924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d10c      	bne.n	800a8ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	40010000 	.word	0x40010000
 800a910:	40000400 	.word	0x40000400
 800a914:	40000800 	.word	0x40000800
 800a918:	40000c00 	.word	0x40000c00
 800a91c:	40010400 	.word	0x40010400
 800a920:	40014000 	.word	0x40014000
 800a924:	40001800 	.word	0x40001800

0800a928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e03f      	b.n	800a9e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d106      	bne.n	800a97c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7f8 fa16 	bl	8002da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2224      	movs	r2, #36	; 0x24
 800a980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68da      	ldr	r2, [r3, #12]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fe2b 	bl	800b5f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	695a      	ldr	r2, [r3, #20]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68da      	ldr	r2, [r3, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b20      	cmp	r3, #32
 800aa02:	d11d      	bne.n	800aa40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <HAL_UART_Receive_IT+0x26>
 800aa0a:	88fb      	ldrh	r3, [r7, #6]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e016      	b.n	800aa42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HAL_UART_Receive_IT+0x38>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	e00f      	b.n	800aa42 <HAL_UART_Receive_IT+0x58>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa30:	88fb      	ldrh	r3, [r7, #6]
 800aa32:	461a      	mov	r2, r3
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f000 fbd9 	bl	800b1ee <UART_Start_Receive_IT>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	e000      	b.n	800aa42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aa40:	2302      	movs	r3, #2
  }
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08c      	sub	sp, #48	; 0x30
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b20      	cmp	r3, #32
 800aa64:	d165      	bne.n	800ab32 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <HAL_UART_Transmit_DMA+0x26>
 800aa6c:	88fb      	ldrh	r3, [r7, #6]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e05e      	b.n	800ab34 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d101      	bne.n	800aa84 <HAL_UART_Transmit_DMA+0x38>
 800aa80:	2302      	movs	r3, #2
 800aa82:	e057      	b.n	800ab34 <HAL_UART_Transmit_DMA+0xe8>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	88fa      	ldrh	r2, [r7, #6]
 800aa96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	88fa      	ldrh	r2, [r7, #6]
 800aa9c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2221      	movs	r2, #33	; 0x21
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab0:	4a22      	ldr	r2, [pc, #136]	; (800ab3c <HAL_UART_Transmit_DMA+0xf0>)
 800aab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab8:	4a21      	ldr	r2, [pc, #132]	; (800ab40 <HAL_UART_Transmit_DMA+0xf4>)
 800aaba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac0:	4a20      	ldr	r2, [pc, #128]	; (800ab44 <HAL_UART_Transmit_DMA+0xf8>)
 800aac2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac8:	2200      	movs	r2, #0
 800aaca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aacc:	f107 0308 	add.w	r3, r7, #8
 800aad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	6819      	ldr	r1, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	3304      	adds	r3, #4
 800aae0:	461a      	mov	r2, r3
 800aae2:	88fb      	ldrh	r3, [r7, #6]
 800aae4:	f7f9 fbdc 	bl	80042a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaf0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3314      	adds	r3, #20
 800ab00:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	e853 3f00 	ldrex	r3, [r3]
 800ab08:	617b      	str	r3, [r7, #20]
   return(result);
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3314      	adds	r3, #20
 800ab18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab1a:	627a      	str	r2, [r7, #36]	; 0x24
 800ab1c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1e:	6a39      	ldr	r1, [r7, #32]
 800ab20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e5      	bne.n	800aafa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e000      	b.n	800ab34 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ab32:	2302      	movs	r3, #2
  }
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3730      	adds	r7, #48	; 0x30
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	0800b0a5 	.word	0x0800b0a5
 800ab40:	0800b13f 	.word	0x0800b13f
 800ab44:	0800b15b 	.word	0x0800b15b

0800ab48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b0ba      	sub	sp, #232	; 0xe8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab7e:	f003 030f 	and.w	r3, r3, #15
 800ab82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ab86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10f      	bne.n	800abae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <HAL_UART_IRQHandler+0x66>
 800ab9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fc66 	bl	800b478 <UART_Receive_IT>
      return;
 800abac:	e256      	b.n	800b05c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800abae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 80de 	beq.w	800ad74 <HAL_UART_IRQHandler+0x22c>
 800abb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d106      	bne.n	800abd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800abc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800abcc:	2b00      	cmp	r3, #0
 800abce:	f000 80d1 	beq.w	800ad74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800abd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00b      	beq.n	800abf6 <HAL_UART_IRQHandler+0xae>
 800abde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	f043 0201 	orr.w	r2, r3, #1
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abfa:	f003 0304 	and.w	r3, r3, #4
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00b      	beq.n	800ac1a <HAL_UART_IRQHandler+0xd2>
 800ac02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d005      	beq.n	800ac1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac12:	f043 0202 	orr.w	r2, r3, #2
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00b      	beq.n	800ac3e <HAL_UART_IRQHandler+0xf6>
 800ac26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d005      	beq.n	800ac3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac36:	f043 0204 	orr.w	r2, r3, #4
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ac3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac42:	f003 0308 	and.w	r3, r3, #8
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d011      	beq.n	800ac6e <HAL_UART_IRQHandler+0x126>
 800ac4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac4e:	f003 0320 	and.w	r3, r3, #32
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d105      	bne.n	800ac62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ac56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d005      	beq.n	800ac6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac66:	f043 0208 	orr.w	r2, r3, #8
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f000 81ed 	beq.w	800b052 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d008      	beq.n	800ac96 <HAL_UART_IRQHandler+0x14e>
 800ac84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac88:	f003 0320 	and.w	r3, r3, #32
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fbf1 	bl	800b478 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca0:	2b40      	cmp	r3, #64	; 0x40
 800aca2:	bf0c      	ite	eq
 800aca4:	2301      	moveq	r3, #1
 800aca6:	2300      	movne	r3, #0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb2:	f003 0308 	and.w	r3, r3, #8
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d103      	bne.n	800acc2 <HAL_UART_IRQHandler+0x17a>
 800acba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d04f      	beq.n	800ad62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 faf9 	bl	800b2ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd2:	2b40      	cmp	r3, #64	; 0x40
 800acd4:	d141      	bne.n	800ad5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3314      	adds	r3, #20
 800acdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800acec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3314      	adds	r3, #20
 800acfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1d9      	bne.n	800acd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d013      	beq.n	800ad52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2e:	4a7d      	ldr	r2, [pc, #500]	; (800af24 <HAL_UART_IRQHandler+0x3dc>)
 800ad30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f9 fb7a 	bl	8004430 <HAL_DMA_Abort_IT>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d016      	beq.n	800ad70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad50:	e00e      	b.n	800ad70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f990 	bl	800b078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad58:	e00a      	b.n	800ad70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f98c 	bl	800b078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad60:	e006      	b.n	800ad70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f988 	bl	800b078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ad6e:	e170      	b.n	800b052 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad70:	bf00      	nop
    return;
 800ad72:	e16e      	b.n	800b052 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	f040 814a 	bne.w	800b012 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ad7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad82:	f003 0310 	and.w	r3, r3, #16
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 8143 	beq.w	800b012 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ad8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad90:	f003 0310 	and.w	r3, r3, #16
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 813c 	beq.w	800b012 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60bb      	str	r3, [r7, #8]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	60bb      	str	r3, [r7, #8]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	60bb      	str	r3, [r7, #8]
 800adae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	f040 80b4 	bne.w	800af28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800adcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8140 	beq.w	800b056 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adde:	429a      	cmp	r2, r3
 800ade0:	f080 8139 	bcs.w	800b056 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf6:	f000 8088 	beq.w	800af0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	330c      	adds	r3, #12
 800ae00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	330c      	adds	r3, #12
 800ae22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae36:	e841 2300 	strex	r3, r2, [r1]
 800ae3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1d9      	bne.n	800adfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	3314      	adds	r3, #20
 800ae4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae50:	e853 3f00 	ldrex	r3, [r3]
 800ae54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae58:	f023 0301 	bic.w	r3, r3, #1
 800ae5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3314      	adds	r3, #20
 800ae66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae76:	e841 2300 	strex	r3, r2, [r1]
 800ae7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1e1      	bne.n	800ae46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3314      	adds	r3, #20
 800ae88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae8c:	e853 3f00 	ldrex	r3, [r3]
 800ae90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3314      	adds	r3, #20
 800aea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aea6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aea8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aeac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aeb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e3      	bne.n	800ae82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	330c      	adds	r3, #12
 800aece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed2:	e853 3f00 	ldrex	r3, [r3]
 800aed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeda:	f023 0310 	bic.w	r3, r3, #16
 800aede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	330c      	adds	r3, #12
 800aee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aeec:	65ba      	str	r2, [r7, #88]	; 0x58
 800aeee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aef4:	e841 2300 	strex	r3, r2, [r1]
 800aef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aefa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1e3      	bne.n	800aec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af04:	4618      	mov	r0, r3
 800af06:	f7f9 fa23 	bl	8004350 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af12:	b29b      	uxth	r3, r3
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	b29b      	uxth	r3, r3
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f8b6 	bl	800b08c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af20:	e099      	b.n	800b056 <HAL_UART_IRQHandler+0x50e>
 800af22:	bf00      	nop
 800af24:	0800b381 	.word	0x0800b381
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af30:	b29b      	uxth	r3, r3
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 808b 	beq.w	800b05a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800af44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 8086 	beq.w	800b05a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	330c      	adds	r3, #12
 800af54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	330c      	adds	r3, #12
 800af6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800af72:	647a      	str	r2, [r7, #68]	; 0x44
 800af74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e3      	bne.n	800af4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3314      	adds	r3, #20
 800af8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	623b      	str	r3, [r7, #32]
   return(result);
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	f023 0301 	bic.w	r3, r3, #1
 800af9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3314      	adds	r3, #20
 800afa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800afaa:	633a      	str	r2, [r7, #48]	; 0x30
 800afac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e3      	bne.n	800af86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2220      	movs	r2, #32
 800afc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	330c      	adds	r3, #12
 800afd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	e853 3f00 	ldrex	r3, [r3]
 800afda:	60fb      	str	r3, [r7, #12]
   return(result);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f023 0310 	bic.w	r3, r3, #16
 800afe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	330c      	adds	r3, #12
 800afec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aff0:	61fa      	str	r2, [r7, #28]
 800aff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	69b9      	ldr	r1, [r7, #24]
 800aff6:	69fa      	ldr	r2, [r7, #28]
 800aff8:	e841 2300 	strex	r3, r2, [r1]
 800affc:	617b      	str	r3, [r7, #20]
   return(result);
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e3      	bne.n	800afcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b008:	4619      	mov	r1, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f83e 	bl	800b08c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b010:	e023      	b.n	800b05a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d009      	beq.n	800b032 <HAL_UART_IRQHandler+0x4ea>
 800b01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f9bc 	bl	800b3a8 <UART_Transmit_IT>
    return;
 800b030:	e014      	b.n	800b05c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00e      	beq.n	800b05c <HAL_UART_IRQHandler+0x514>
 800b03e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b046:	2b00      	cmp	r3, #0
 800b048:	d008      	beq.n	800b05c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9fc 	bl	800b448 <UART_EndTransmit_IT>
    return;
 800b050:	e004      	b.n	800b05c <HAL_UART_IRQHandler+0x514>
    return;
 800b052:	bf00      	nop
 800b054:	e002      	b.n	800b05c <HAL_UART_IRQHandler+0x514>
      return;
 800b056:	bf00      	nop
 800b058:	e000      	b.n	800b05c <HAL_UART_IRQHandler+0x514>
      return;
 800b05a:	bf00      	nop
  }
}
 800b05c:	37e8      	adds	r7, #232	; 0xe8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop

0800b064 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b090      	sub	sp, #64	; 0x40
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d137      	bne.n	800b130 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3314      	adds	r3, #20
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3314      	adds	r3, #20
 800b0e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0e6:	633a      	str	r2, [r7, #48]	; 0x30
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ee:	e841 2300 	strex	r3, r2, [r1]
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1e5      	bne.n	800b0c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	330c      	adds	r3, #12
 800b100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	e853 3f00 	ldrex	r3, [r3]
 800b108:	60fb      	str	r3, [r7, #12]
   return(result);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b110:	637b      	str	r3, [r7, #52]	; 0x34
 800b112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	330c      	adds	r3, #12
 800b118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b11a:	61fa      	str	r2, [r7, #28]
 800b11c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	69b9      	ldr	r1, [r7, #24]
 800b120:	69fa      	ldr	r2, [r7, #28]
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	617b      	str	r3, [r7, #20]
   return(result);
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e5      	bne.n	800b0fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b12e:	e002      	b.n	800b136 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b130:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b132:	f7f7 f8db 	bl	80022ec <HAL_UART_TxCpltCallback>
}
 800b136:	bf00      	nop
 800b138:	3740      	adds	r7, #64	; 0x40
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b084      	sub	sp, #16
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7ff ff89 	bl	800b064 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b176:	2b80      	cmp	r3, #128	; 0x80
 800b178:	bf0c      	ite	eq
 800b17a:	2301      	moveq	r3, #1
 800b17c:	2300      	movne	r3, #0
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b21      	cmp	r3, #33	; 0x21
 800b18c:	d108      	bne.n	800b1a0 <UART_DMAError+0x46>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2200      	movs	r2, #0
 800b198:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b19a:	68b8      	ldr	r0, [r7, #8]
 800b19c:	f000 f865 	bl	800b26a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1aa:	2b40      	cmp	r3, #64	; 0x40
 800b1ac:	bf0c      	ite	eq
 800b1ae:	2301      	moveq	r3, #1
 800b1b0:	2300      	movne	r3, #0
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b22      	cmp	r3, #34	; 0x22
 800b1c0:	d108      	bne.n	800b1d4 <UART_DMAError+0x7a>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b1ce:	68b8      	ldr	r0, [r7, #8]
 800b1d0:	f000 f873 	bl	800b2ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d8:	f043 0210 	orr.w	r2, r3, #16
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1e0:	68b8      	ldr	r0, [r7, #8]
 800b1e2:	f7ff ff49 	bl	800b078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1e6:	bf00      	nop
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b085      	sub	sp, #20
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	88fa      	ldrh	r2, [r7, #6]
 800b206:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	88fa      	ldrh	r2, [r7, #6]
 800b20c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2222      	movs	r2, #34	; 0x22
 800b218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	691b      	ldr	r3, [r3, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d007      	beq.n	800b23c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68da      	ldr	r2, [r3, #12]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b23a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695a      	ldr	r2, [r3, #20]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f042 0201 	orr.w	r2, r2, #1
 800b24a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0220 	orr.w	r2, r2, #32
 800b25a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b26a:	b480      	push	{r7}
 800b26c:	b089      	sub	sp, #36	; 0x24
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	330c      	adds	r3, #12
 800b278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	e853 3f00 	ldrex	r3, [r3]
 800b280:	60bb      	str	r3, [r7, #8]
   return(result);
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b288:	61fb      	str	r3, [r7, #28]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	330c      	adds	r3, #12
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	61ba      	str	r2, [r7, #24]
 800b294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	6979      	ldr	r1, [r7, #20]
 800b298:	69ba      	ldr	r2, [r7, #24]
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	613b      	str	r3, [r7, #16]
   return(result);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e5      	bne.n	800b272 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b2ae:	bf00      	nop
 800b2b0:	3724      	adds	r7, #36	; 0x24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b095      	sub	sp, #84	; 0x54
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	330c      	adds	r3, #12
 800b2c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	330c      	adds	r3, #12
 800b2e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2e2:	643a      	str	r2, [r7, #64]	; 0x40
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e5      	bne.n	800b2c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3314      	adds	r3, #20
 800b2fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	e853 3f00 	ldrex	r3, [r3]
 800b304:	61fb      	str	r3, [r7, #28]
   return(result);
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	f023 0301 	bic.w	r3, r3, #1
 800b30c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3314      	adds	r3, #20
 800b314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b316:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b318:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b31e:	e841 2300 	strex	r3, r2, [r1]
 800b322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1e5      	bne.n	800b2f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d119      	bne.n	800b366 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	330c      	adds	r3, #12
 800b338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	60bb      	str	r3, [r7, #8]
   return(result);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f023 0310 	bic.w	r3, r3, #16
 800b348:	647b      	str	r3, [r7, #68]	; 0x44
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	330c      	adds	r3, #12
 800b350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b352:	61ba      	str	r2, [r7, #24]
 800b354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6979      	ldr	r1, [r7, #20]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	613b      	str	r3, [r7, #16]
   return(result);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e5      	bne.n	800b332 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2220      	movs	r2, #32
 800b36a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b374:	bf00      	nop
 800b376:	3754      	adds	r7, #84	; 0x54
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7ff fe6c 	bl	800b078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b21      	cmp	r3, #33	; 0x21
 800b3ba:	d13e      	bne.n	800b43a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c4:	d114      	bne.n	800b3f0 <UART_Transmit_IT+0x48>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d110      	bne.n	800b3f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	1c9a      	adds	r2, r3, #2
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	621a      	str	r2, [r3, #32]
 800b3ee:	e008      	b.n	800b402 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	1c59      	adds	r1, r3, #1
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	6211      	str	r1, [r2, #32]
 800b3fa:	781a      	ldrb	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b406:	b29b      	uxth	r3, r3
 800b408:	3b01      	subs	r3, #1
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	4619      	mov	r1, r3
 800b410:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b412:	2b00      	cmp	r3, #0
 800b414:	d10f      	bne.n	800b436 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b424:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b434:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	e000      	b.n	800b43c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b43a:	2302      	movs	r3, #2
  }
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68da      	ldr	r2, [r3, #12]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b45e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2220      	movs	r2, #32
 800b464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7f6 ff3f 	bl	80022ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08c      	sub	sp, #48	; 0x30
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b22      	cmp	r3, #34	; 0x22
 800b48a:	f040 80ab 	bne.w	800b5e4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b496:	d117      	bne.n	800b4c8 <UART_Receive_IT+0x50>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d113      	bne.n	800b4c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c0:	1c9a      	adds	r2, r3, #2
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	629a      	str	r2, [r3, #40]	; 0x28
 800b4c6:	e026      	b.n	800b516 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4da:	d007      	beq.n	800b4ec <UART_Receive_IT+0x74>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10a      	bne.n	800b4fa <UART_Receive_IT+0x82>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d106      	bne.n	800b4fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	e008      	b.n	800b50c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	b2db      	uxtb	r3, r3
 800b502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b506:	b2da      	uxtb	r2, r3
 800b508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	3b01      	subs	r3, #1
 800b51e:	b29b      	uxth	r3, r3
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	4619      	mov	r1, r3
 800b524:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b526:	2b00      	cmp	r3, #0
 800b528:	d15a      	bne.n	800b5e0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f022 0220 	bic.w	r2, r2, #32
 800b538:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b548:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	695a      	ldr	r2, [r3, #20]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 0201 	bic.w	r2, r2, #1
 800b558:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b566:	2b01      	cmp	r3, #1
 800b568:	d135      	bne.n	800b5d6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	330c      	adds	r3, #12
 800b576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	e853 3f00 	ldrex	r3, [r3]
 800b57e:	613b      	str	r3, [r7, #16]
   return(result);
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f023 0310 	bic.w	r3, r3, #16
 800b586:	627b      	str	r3, [r7, #36]	; 0x24
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	330c      	adds	r3, #12
 800b58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b590:	623a      	str	r2, [r7, #32]
 800b592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b594:	69f9      	ldr	r1, [r7, #28]
 800b596:	6a3a      	ldr	r2, [r7, #32]
 800b598:	e841 2300 	strex	r3, r2, [r1]
 800b59c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1e5      	bne.n	800b570 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0310 	and.w	r3, r3, #16
 800b5ae:	2b10      	cmp	r3, #16
 800b5b0:	d10a      	bne.n	800b5c8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff fd5c 	bl	800b08c <HAL_UARTEx_RxEventCallback>
 800b5d4:	e002      	b.n	800b5dc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7f6 feac 	bl	8002334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e002      	b.n	800b5e6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	e000      	b.n	800b5e6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b5e4:	2302      	movs	r3, #2
  }
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3730      	adds	r7, #48	; 0x30
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5f4:	b0c0      	sub	sp, #256	; 0x100
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60c:	68d9      	ldr	r1, [r3, #12]
 800b60e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	ea40 0301 	orr.w	r3, r0, r1
 800b618:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	431a      	orrs	r2, r3
 800b628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b62c:	695b      	ldr	r3, [r3, #20]
 800b62e:	431a      	orrs	r2, r3
 800b630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	4313      	orrs	r3, r2
 800b638:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b648:	f021 010c 	bic.w	r1, r1, #12
 800b64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b656:	430b      	orrs	r3, r1
 800b658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66a:	6999      	ldr	r1, [r3, #24]
 800b66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	ea40 0301 	orr.w	r3, r0, r1
 800b676:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	4b8f      	ldr	r3, [pc, #572]	; (800b8bc <UART_SetConfig+0x2cc>)
 800b680:	429a      	cmp	r2, r3
 800b682:	d005      	beq.n	800b690 <UART_SetConfig+0xa0>
 800b684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	4b8d      	ldr	r3, [pc, #564]	; (800b8c0 <UART_SetConfig+0x2d0>)
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d104      	bne.n	800b69a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b690:	f7fb f9fa 	bl	8006a88 <HAL_RCC_GetPCLK2Freq>
 800b694:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b698:	e003      	b.n	800b6a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b69a:	f7fb f9e1 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 800b69e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6a6:	69db      	ldr	r3, [r3, #28]
 800b6a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ac:	f040 810c 	bne.w	800b8c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b6ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b6be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	462b      	mov	r3, r5
 800b6c6:	1891      	adds	r1, r2, r2
 800b6c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800b6ca:	415b      	adcs	r3, r3
 800b6cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	eb12 0801 	adds.w	r8, r2, r1
 800b6d8:	4629      	mov	r1, r5
 800b6da:	eb43 0901 	adc.w	r9, r3, r1
 800b6de:	f04f 0200 	mov.w	r2, #0
 800b6e2:	f04f 0300 	mov.w	r3, #0
 800b6e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6f2:	4690      	mov	r8, r2
 800b6f4:	4699      	mov	r9, r3
 800b6f6:	4623      	mov	r3, r4
 800b6f8:	eb18 0303 	adds.w	r3, r8, r3
 800b6fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b700:	462b      	mov	r3, r5
 800b702:	eb49 0303 	adc.w	r3, r9, r3
 800b706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b716:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b71a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b71e:	460b      	mov	r3, r1
 800b720:	18db      	adds	r3, r3, r3
 800b722:	653b      	str	r3, [r7, #80]	; 0x50
 800b724:	4613      	mov	r3, r2
 800b726:	eb42 0303 	adc.w	r3, r2, r3
 800b72a:	657b      	str	r3, [r7, #84]	; 0x54
 800b72c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b730:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b734:	f7f4 fe04 	bl	8000340 <__aeabi_uldivmod>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4b61      	ldr	r3, [pc, #388]	; (800b8c4 <UART_SetConfig+0x2d4>)
 800b73e:	fba3 2302 	umull	r2, r3, r3, r2
 800b742:	095b      	lsrs	r3, r3, #5
 800b744:	011c      	lsls	r4, r3, #4
 800b746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b750:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b754:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b758:	4642      	mov	r2, r8
 800b75a:	464b      	mov	r3, r9
 800b75c:	1891      	adds	r1, r2, r2
 800b75e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b760:	415b      	adcs	r3, r3
 800b762:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b764:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b768:	4641      	mov	r1, r8
 800b76a:	eb12 0a01 	adds.w	sl, r2, r1
 800b76e:	4649      	mov	r1, r9
 800b770:	eb43 0b01 	adc.w	fp, r3, r1
 800b774:	f04f 0200 	mov.w	r2, #0
 800b778:	f04f 0300 	mov.w	r3, #0
 800b77c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b780:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b788:	4692      	mov	sl, r2
 800b78a:	469b      	mov	fp, r3
 800b78c:	4643      	mov	r3, r8
 800b78e:	eb1a 0303 	adds.w	r3, sl, r3
 800b792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b796:	464b      	mov	r3, r9
 800b798:	eb4b 0303 	adc.w	r3, fp, r3
 800b79c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b7b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	18db      	adds	r3, r3, r3
 800b7b8:	643b      	str	r3, [r7, #64]	; 0x40
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	eb42 0303 	adc.w	r3, r2, r3
 800b7c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b7c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b7c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b7ca:	f7f4 fdb9 	bl	8000340 <__aeabi_uldivmod>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4b3b      	ldr	r3, [pc, #236]	; (800b8c4 <UART_SetConfig+0x2d4>)
 800b7d6:	fba3 2301 	umull	r2, r3, r3, r1
 800b7da:	095b      	lsrs	r3, r3, #5
 800b7dc:	2264      	movs	r2, #100	; 0x64
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
 800b7e2:	1acb      	subs	r3, r1, r3
 800b7e4:	00db      	lsls	r3, r3, #3
 800b7e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b7ea:	4b36      	ldr	r3, [pc, #216]	; (800b8c4 <UART_SetConfig+0x2d4>)
 800b7ec:	fba3 2302 	umull	r2, r3, r3, r2
 800b7f0:	095b      	lsrs	r3, r3, #5
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7f8:	441c      	add	r4, r3
 800b7fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7fe:	2200      	movs	r2, #0
 800b800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b804:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b808:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b80c:	4642      	mov	r2, r8
 800b80e:	464b      	mov	r3, r9
 800b810:	1891      	adds	r1, r2, r2
 800b812:	63b9      	str	r1, [r7, #56]	; 0x38
 800b814:	415b      	adcs	r3, r3
 800b816:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b81c:	4641      	mov	r1, r8
 800b81e:	1851      	adds	r1, r2, r1
 800b820:	6339      	str	r1, [r7, #48]	; 0x30
 800b822:	4649      	mov	r1, r9
 800b824:	414b      	adcs	r3, r1
 800b826:	637b      	str	r3, [r7, #52]	; 0x34
 800b828:	f04f 0200 	mov.w	r2, #0
 800b82c:	f04f 0300 	mov.w	r3, #0
 800b830:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b834:	4659      	mov	r1, fp
 800b836:	00cb      	lsls	r3, r1, #3
 800b838:	4651      	mov	r1, sl
 800b83a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b83e:	4651      	mov	r1, sl
 800b840:	00ca      	lsls	r2, r1, #3
 800b842:	4610      	mov	r0, r2
 800b844:	4619      	mov	r1, r3
 800b846:	4603      	mov	r3, r0
 800b848:	4642      	mov	r2, r8
 800b84a:	189b      	adds	r3, r3, r2
 800b84c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b850:	464b      	mov	r3, r9
 800b852:	460a      	mov	r2, r1
 800b854:	eb42 0303 	adc.w	r3, r2, r3
 800b858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b868:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b86c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b870:	460b      	mov	r3, r1
 800b872:	18db      	adds	r3, r3, r3
 800b874:	62bb      	str	r3, [r7, #40]	; 0x28
 800b876:	4613      	mov	r3, r2
 800b878:	eb42 0303 	adc.w	r3, r2, r3
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b87e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b882:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b886:	f7f4 fd5b 	bl	8000340 <__aeabi_uldivmod>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4b0d      	ldr	r3, [pc, #52]	; (800b8c4 <UART_SetConfig+0x2d4>)
 800b890:	fba3 1302 	umull	r1, r3, r3, r2
 800b894:	095b      	lsrs	r3, r3, #5
 800b896:	2164      	movs	r1, #100	; 0x64
 800b898:	fb01 f303 	mul.w	r3, r1, r3
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	3332      	adds	r3, #50	; 0x32
 800b8a2:	4a08      	ldr	r2, [pc, #32]	; (800b8c4 <UART_SetConfig+0x2d4>)
 800b8a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a8:	095b      	lsrs	r3, r3, #5
 800b8aa:	f003 0207 	and.w	r2, r3, #7
 800b8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4422      	add	r2, r4
 800b8b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b8b8:	e105      	b.n	800bac6 <UART_SetConfig+0x4d6>
 800b8ba:	bf00      	nop
 800b8bc:	40011000 	.word	0x40011000
 800b8c0:	40011400 	.word	0x40011400
 800b8c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b8d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b8d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b8da:	4642      	mov	r2, r8
 800b8dc:	464b      	mov	r3, r9
 800b8de:	1891      	adds	r1, r2, r2
 800b8e0:	6239      	str	r1, [r7, #32]
 800b8e2:	415b      	adcs	r3, r3
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	1854      	adds	r4, r2, r1
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	eb43 0501 	adc.w	r5, r3, r1
 800b8f4:	f04f 0200 	mov.w	r2, #0
 800b8f8:	f04f 0300 	mov.w	r3, #0
 800b8fc:	00eb      	lsls	r3, r5, #3
 800b8fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b902:	00e2      	lsls	r2, r4, #3
 800b904:	4614      	mov	r4, r2
 800b906:	461d      	mov	r5, r3
 800b908:	4643      	mov	r3, r8
 800b90a:	18e3      	adds	r3, r4, r3
 800b90c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b910:	464b      	mov	r3, r9
 800b912:	eb45 0303 	adc.w	r3, r5, r3
 800b916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b92a:	f04f 0200 	mov.w	r2, #0
 800b92e:	f04f 0300 	mov.w	r3, #0
 800b932:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b936:	4629      	mov	r1, r5
 800b938:	008b      	lsls	r3, r1, #2
 800b93a:	4621      	mov	r1, r4
 800b93c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b940:	4621      	mov	r1, r4
 800b942:	008a      	lsls	r2, r1, #2
 800b944:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b948:	f7f4 fcfa 	bl	8000340 <__aeabi_uldivmod>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	4b60      	ldr	r3, [pc, #384]	; (800bad4 <UART_SetConfig+0x4e4>)
 800b952:	fba3 2302 	umull	r2, r3, r3, r2
 800b956:	095b      	lsrs	r3, r3, #5
 800b958:	011c      	lsls	r4, r3, #4
 800b95a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b95e:	2200      	movs	r2, #0
 800b960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b964:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b968:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b96c:	4642      	mov	r2, r8
 800b96e:	464b      	mov	r3, r9
 800b970:	1891      	adds	r1, r2, r2
 800b972:	61b9      	str	r1, [r7, #24]
 800b974:	415b      	adcs	r3, r3
 800b976:	61fb      	str	r3, [r7, #28]
 800b978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b97c:	4641      	mov	r1, r8
 800b97e:	1851      	adds	r1, r2, r1
 800b980:	6139      	str	r1, [r7, #16]
 800b982:	4649      	mov	r1, r9
 800b984:	414b      	adcs	r3, r1
 800b986:	617b      	str	r3, [r7, #20]
 800b988:	f04f 0200 	mov.w	r2, #0
 800b98c:	f04f 0300 	mov.w	r3, #0
 800b990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b994:	4659      	mov	r1, fp
 800b996:	00cb      	lsls	r3, r1, #3
 800b998:	4651      	mov	r1, sl
 800b99a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b99e:	4651      	mov	r1, sl
 800b9a0:	00ca      	lsls	r2, r1, #3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	4642      	mov	r2, r8
 800b9aa:	189b      	adds	r3, r3, r2
 800b9ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	460a      	mov	r2, r1
 800b9b4:	eb42 0303 	adc.w	r3, r2, r3
 800b9b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b9c8:	f04f 0200 	mov.w	r2, #0
 800b9cc:	f04f 0300 	mov.w	r3, #0
 800b9d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	008b      	lsls	r3, r1, #2
 800b9d8:	4641      	mov	r1, r8
 800b9da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b9de:	4641      	mov	r1, r8
 800b9e0:	008a      	lsls	r2, r1, #2
 800b9e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b9e6:	f7f4 fcab 	bl	8000340 <__aeabi_uldivmod>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4b39      	ldr	r3, [pc, #228]	; (800bad4 <UART_SetConfig+0x4e4>)
 800b9f0:	fba3 1302 	umull	r1, r3, r3, r2
 800b9f4:	095b      	lsrs	r3, r3, #5
 800b9f6:	2164      	movs	r1, #100	; 0x64
 800b9f8:	fb01 f303 	mul.w	r3, r1, r3
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	3332      	adds	r3, #50	; 0x32
 800ba02:	4a34      	ldr	r2, [pc, #208]	; (800bad4 <UART_SetConfig+0x4e4>)
 800ba04:	fba2 2303 	umull	r2, r3, r2, r3
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba0e:	441c      	add	r4, r3
 800ba10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba14:	2200      	movs	r2, #0
 800ba16:	673b      	str	r3, [r7, #112]	; 0x70
 800ba18:	677a      	str	r2, [r7, #116]	; 0x74
 800ba1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba1e:	4642      	mov	r2, r8
 800ba20:	464b      	mov	r3, r9
 800ba22:	1891      	adds	r1, r2, r2
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	415b      	adcs	r3, r3
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba2e:	4641      	mov	r1, r8
 800ba30:	1851      	adds	r1, r2, r1
 800ba32:	6039      	str	r1, [r7, #0]
 800ba34:	4649      	mov	r1, r9
 800ba36:	414b      	adcs	r3, r1
 800ba38:	607b      	str	r3, [r7, #4]
 800ba3a:	f04f 0200 	mov.w	r2, #0
 800ba3e:	f04f 0300 	mov.w	r3, #0
 800ba42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ba46:	4659      	mov	r1, fp
 800ba48:	00cb      	lsls	r3, r1, #3
 800ba4a:	4651      	mov	r1, sl
 800ba4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba50:	4651      	mov	r1, sl
 800ba52:	00ca      	lsls	r2, r1, #3
 800ba54:	4610      	mov	r0, r2
 800ba56:	4619      	mov	r1, r3
 800ba58:	4603      	mov	r3, r0
 800ba5a:	4642      	mov	r2, r8
 800ba5c:	189b      	adds	r3, r3, r2
 800ba5e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba60:	464b      	mov	r3, r9
 800ba62:	460a      	mov	r2, r1
 800ba64:	eb42 0303 	adc.w	r3, r2, r3
 800ba68:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	663b      	str	r3, [r7, #96]	; 0x60
 800ba74:	667a      	str	r2, [r7, #100]	; 0x64
 800ba76:	f04f 0200 	mov.w	r2, #0
 800ba7a:	f04f 0300 	mov.w	r3, #0
 800ba7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba82:	4649      	mov	r1, r9
 800ba84:	008b      	lsls	r3, r1, #2
 800ba86:	4641      	mov	r1, r8
 800ba88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	008a      	lsls	r2, r1, #2
 800ba90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba94:	f7f4 fc54 	bl	8000340 <__aeabi_uldivmod>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <UART_SetConfig+0x4e4>)
 800ba9e:	fba3 1302 	umull	r1, r3, r3, r2
 800baa2:	095b      	lsrs	r3, r3, #5
 800baa4:	2164      	movs	r1, #100	; 0x64
 800baa6:	fb01 f303 	mul.w	r3, r1, r3
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	3332      	adds	r3, #50	; 0x32
 800bab0:	4a08      	ldr	r2, [pc, #32]	; (800bad4 <UART_SetConfig+0x4e4>)
 800bab2:	fba2 2303 	umull	r2, r3, r2, r3
 800bab6:	095b      	lsrs	r3, r3, #5
 800bab8:	f003 020f 	and.w	r2, r3, #15
 800babc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4422      	add	r2, r4
 800bac4:	609a      	str	r2, [r3, #8]
}
 800bac6:	bf00      	nop
 800bac8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bacc:	46bd      	mov	sp, r7
 800bace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bad2:	bf00      	nop
 800bad4:	51eb851f 	.word	0x51eb851f

0800bad8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bad8:	b084      	sub	sp, #16
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	f107 001c 	add.w	r0, r7, #28
 800bae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800baee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800baf0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800baf2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800baf6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bafa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bafe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bb02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800bb12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	b004      	add	sp, #16
 800bb2c:	4770      	bx	lr

0800bb2e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bb6a:	b480      	push	{r7}
 800bb6c:	b083      	sub	sp, #12
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2203      	movs	r2, #3
 800bb76:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bb86:	b480      	push	{r7}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 0303 	and.w	r3, r3, #3
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b085      	sub	sp, #20
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bbc0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bbc6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bbcc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bbdc:	f023 030f 	bic.w	r3, r3, #15
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	431a      	orrs	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	b2db      	uxtb	r3, r3
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3314      	adds	r3, #20
 800bc1e:	461a      	mov	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	4413      	add	r3, r2
 800bc24:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
}  
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bc36:	b480      	push	{r7}
 800bc38:	b085      	sub	sp, #20
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc5c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bc62:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bc68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc74:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0

}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b088      	sub	sp, #32
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bc9c:	2310      	movs	r3, #16
 800bc9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bca0:	2340      	movs	r3, #64	; 0x40
 800bca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bca4:	2300      	movs	r3, #0
 800bca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcae:	f107 0308 	add.w	r3, r7, #8
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff ff74 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bcba:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcbe:	2110      	movs	r1, #16
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fa19 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bcc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcc8:	69fb      	ldr	r3, [r7, #28]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3720      	adds	r7, #32
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b088      	sub	sp, #32
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bce0:	2311      	movs	r3, #17
 800bce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bce4:	2340      	movs	r3, #64	; 0x40
 800bce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bce8:	2300      	movs	r3, #0
 800bcea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcf2:	f107 0308 	add.w	r3, r7, #8
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f7ff ff52 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bcfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd02:	2111      	movs	r1, #17
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f9f7 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd0c:	69fb      	ldr	r3, [r7, #28]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3720      	adds	r7, #32
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b088      	sub	sp, #32
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bd24:	2312      	movs	r3, #18
 800bd26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd28:	2340      	movs	r3, #64	; 0x40
 800bd2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd36:	f107 0308 	add.w	r3, r7, #8
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff ff30 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bd42:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd46:	2112      	movs	r1, #18
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 f9d5 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bd4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd50:	69fb      	ldr	r3, [r7, #28]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3720      	adds	r7, #32
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b088      	sub	sp, #32
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bd68:	2318      	movs	r3, #24
 800bd6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd6c:	2340      	movs	r3, #64	; 0x40
 800bd6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd70:	2300      	movs	r3, #0
 800bd72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd7a:	f107 0308 	add.w	r3, r7, #8
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff ff0e 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bd86:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd8a:	2118      	movs	r1, #24
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f9b3 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bd92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd94:	69fb      	ldr	r3, [r7, #28]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3720      	adds	r7, #32
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b088      	sub	sp, #32
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bdac:	2319      	movs	r3, #25
 800bdae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdb0:	2340      	movs	r3, #64	; 0x40
 800bdb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdbe:	f107 0308 	add.w	r3, r7, #8
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff feec 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bdca:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdce:	2119      	movs	r1, #25
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f991 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bdd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3720      	adds	r7, #32
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bdec:	2300      	movs	r3, #0
 800bdee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bdf0:	230c      	movs	r3, #12
 800bdf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdf4:	2340      	movs	r3, #64	; 0x40
 800bdf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be02:	f107 0308 	add.w	r3, r7, #8
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7ff feca 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800be0e:	4a05      	ldr	r2, [pc, #20]	; (800be24 <SDMMC_CmdStopTransfer+0x40>)
 800be10:	210c      	movs	r1, #12
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f970 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800be18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be1a:	69fb      	ldr	r3, [r7, #28]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3720      	adds	r7, #32
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	05f5e100 	.word	0x05f5e100

0800be28 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b08a      	sub	sp, #40	; 0x28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800be38:	2307      	movs	r3, #7
 800be3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be3c:	2340      	movs	r3, #64	; 0x40
 800be3e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be48:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be4a:	f107 0310 	add.w	r3, r7, #16
 800be4e:	4619      	mov	r1, r3
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f7ff fea6 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800be56:	f241 3288 	movw	r2, #5000	; 0x1388
 800be5a:	2107      	movs	r1, #7
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f94b 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800be62:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be66:	4618      	mov	r0, r3
 800be68:	3728      	adds	r7, #40	; 0x28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b088      	sub	sp, #32
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800be76:	2300      	movs	r3, #0
 800be78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800be7e:	2300      	movs	r3, #0
 800be80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be82:	2300      	movs	r3, #0
 800be84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be8c:	f107 0308 	add.w	r3, r7, #8
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7ff fe85 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fb65 	bl	800c568 <SDMMC_GetCmdError>
 800be9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bea0:	69fb      	ldr	r3, [r7, #28]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3720      	adds	r7, #32
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b088      	sub	sp, #32
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800beb2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800beb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800beb8:	2308      	movs	r3, #8
 800beba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bebc:	2340      	movs	r3, #64	; 0x40
 800bebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff fe66 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 faf8 	bl	800c4cc <SDMMC_GetCmdResp7>
 800bedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bede:	69fb      	ldr	r3, [r7, #28]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3720      	adds	r7, #32
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bef6:	2337      	movs	r3, #55	; 0x37
 800bef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800befa:	2340      	movs	r3, #64	; 0x40
 800befc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf08:	f107 0308 	add.w	r3, r7, #8
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff fe47 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bf14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf18:	2137      	movs	r1, #55	; 0x37
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f8ec 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bf20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf22:	69fb      	ldr	r3, [r7, #28]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bf42:	2329      	movs	r3, #41	; 0x29
 800bf44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf46:	2340      	movs	r3, #64	; 0x40
 800bf48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf54:	f107 0308 	add.w	r3, r7, #8
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff fe21 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f9ff 	bl	800c364 <SDMMC_GetCmdResp3>
 800bf66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf68:	69fb      	ldr	r3, [r7, #28]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3720      	adds	r7, #32
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b088      	sub	sp, #32
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bf80:	2306      	movs	r3, #6
 800bf82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf84:	2340      	movs	r3, #64	; 0x40
 800bf86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf92:	f107 0308 	add.w	r3, r7, #8
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff fe02 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800bf9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfa2:	2106      	movs	r1, #6
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f8a7 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bfaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfac:	69fb      	ldr	r3, [r7, #28]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3720      	adds	r7, #32
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b088      	sub	sp, #32
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bfc2:	2333      	movs	r3, #51	; 0x33
 800bfc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfc6:	2340      	movs	r3, #64	; 0x40
 800bfc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfd4:	f107 0308 	add.w	r3, r7, #8
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff fde1 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe4:	2133      	movs	r1, #51	; 0x33
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f886 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800bfec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfee:	69fb      	ldr	r3, [r7, #28]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3720      	adds	r7, #32
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b088      	sub	sp, #32
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c004:	2302      	movs	r3, #2
 800c006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c008:	23c0      	movs	r3, #192	; 0xc0
 800c00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c016:	f107 0308 	add.w	r3, r7, #8
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff fdc0 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f956 	bl	800c2d4 <SDMMC_GetCmdResp2>
 800c028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c02a:	69fb      	ldr	r3, [r7, #28]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3720      	adds	r7, #32
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b088      	sub	sp, #32
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c042:	2309      	movs	r3, #9
 800c044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c046:	23c0      	movs	r3, #192	; 0xc0
 800c048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c04e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c052:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c054:	f107 0308 	add.w	r3, r7, #8
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f7ff fda1 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f937 	bl	800c2d4 <SDMMC_GetCmdResp2>
 800c066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c068:	69fb      	ldr	r3, [r7, #28]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3720      	adds	r7, #32
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b088      	sub	sp, #32
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c080:	2303      	movs	r3, #3
 800c082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c084:	2340      	movs	r3, #64	; 0x40
 800c086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c088:	2300      	movs	r3, #0
 800c08a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c08c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c090:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c092:	f107 0308 	add.w	r3, r7, #8
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff fd82 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	2103      	movs	r1, #3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f99c 	bl	800c3e0 <SDMMC_GetCmdResp6>
 800c0a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0aa:	69fb      	ldr	r3, [r7, #28]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3720      	adds	r7, #32
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c0c2:	230d      	movs	r3, #13
 800c0c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c0c6:	2340      	movs	r3, #64	; 0x40
 800c0c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0d4:	f107 0308 	add.w	r3, r7, #8
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff fd61 	bl	800bba2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0e4:	210d      	movs	r1, #13
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f806 	bl	800c0f8 <SDMMC_GetCmdResp1>
 800c0ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3720      	adds	r7, #32
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	460b      	mov	r3, r1
 800c102:	607a      	str	r2, [r7, #4]
 800c104:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c106:	4b70      	ldr	r3, [pc, #448]	; (800c2c8 <SDMMC_GetCmdResp1+0x1d0>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a70      	ldr	r2, [pc, #448]	; (800c2cc <SDMMC_GetCmdResp1+0x1d4>)
 800c10c:	fba2 2303 	umull	r2, r3, r2, r3
 800c110:	0a5a      	lsrs	r2, r3, #9
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	fb02 f303 	mul.w	r3, r2, r3
 800c118:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	1e5a      	subs	r2, r3, #1
 800c11e:	61fa      	str	r2, [r7, #28]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d102      	bne.n	800c12a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c128:	e0c9      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0ef      	beq.n	800c11a <SDMMC_GetCmdResp1+0x22>
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c140:	2b00      	cmp	r3, #0
 800c142:	d1ea      	bne.n	800c11a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c148:	f003 0304 	and.w	r3, r3, #4
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d004      	beq.n	800c15a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2204      	movs	r2, #4
 800c154:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c156:	2304      	movs	r3, #4
 800c158:	e0b1      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	d004      	beq.n	800c170 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2201      	movs	r2, #1
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e0a6      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	22c5      	movs	r2, #197	; 0xc5
 800c174:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f7ff fd3d 	bl	800bbf6 <SDIO_GetCommandResponse>
 800c17c:	4603      	mov	r3, r0
 800c17e:	461a      	mov	r2, r3
 800c180:	7afb      	ldrb	r3, [r7, #11]
 800c182:	4293      	cmp	r3, r2
 800c184:	d001      	beq.n	800c18a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c186:	2301      	movs	r3, #1
 800c188:	e099      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c18a:	2100      	movs	r1, #0
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f7ff fd3f 	bl	800bc10 <SDIO_GetResponse>
 800c192:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	4b4e      	ldr	r3, [pc, #312]	; (800c2d0 <SDMMC_GetCmdResp1+0x1d8>)
 800c198:	4013      	ands	r3, r2
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e08d      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	da02      	bge.n	800c1ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c1a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c1ac:	e087      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d001      	beq.n	800c1bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c1b8:	2340      	movs	r3, #64	; 0x40
 800c1ba:	e080      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c1c6:	2380      	movs	r3, #128	; 0x80
 800c1c8:	e079      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c1d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1d8:	e071      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c1e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1e8:	e069      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c1f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1f8:	e061      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c208:	e059      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c218:	e051      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c228:	e049      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c238:	e041      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c248:	e039      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c258:	e031      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c264:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c268:	e029      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c274:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c278:	e021      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c284:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c288:	e019      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c290:	2b00      	cmp	r3, #0
 800c292:	d002      	beq.n	800c29a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c294:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c298:	e011      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c2a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c2a8:	e009      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	f003 0308 	and.w	r3, r3, #8
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c2b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c2b8:	e001      	b.n	800c2be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c2ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3720      	adds	r7, #32
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20000030 	.word	0x20000030
 800c2cc:	10624dd3 	.word	0x10624dd3
 800c2d0:	fdffe008 	.word	0xfdffe008

0800c2d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2dc:	4b1f      	ldr	r3, [pc, #124]	; (800c35c <SDMMC_GetCmdResp2+0x88>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a1f      	ldr	r2, [pc, #124]	; (800c360 <SDMMC_GetCmdResp2+0x8c>)
 800c2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e6:	0a5b      	lsrs	r3, r3, #9
 800c2e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2ec:	fb02 f303 	mul.w	r3, r2, r3
 800c2f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	1e5a      	subs	r2, r3, #1
 800c2f6:	60fa      	str	r2, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c300:	e026      	b.n	800c350 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c306:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d0ef      	beq.n	800c2f2 <SDMMC_GetCmdResp2+0x1e>
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1ea      	bne.n	800c2f2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d004      	beq.n	800c332 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2204      	movs	r2, #4
 800c32c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c32e:	2304      	movs	r3, #4
 800c330:	e00e      	b.n	800c350 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d004      	beq.n	800c348 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c344:	2301      	movs	r3, #1
 800c346:	e003      	b.n	800c350 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	22c5      	movs	r2, #197	; 0xc5
 800c34c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	20000030 	.word	0x20000030
 800c360:	10624dd3 	.word	0x10624dd3

0800c364 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c36c:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <SDMMC_GetCmdResp3+0x74>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a1a      	ldr	r2, [pc, #104]	; (800c3dc <SDMMC_GetCmdResp3+0x78>)
 800c372:	fba2 2303 	umull	r2, r3, r2, r3
 800c376:	0a5b      	lsrs	r3, r3, #9
 800c378:	f241 3288 	movw	r2, #5000	; 0x1388
 800c37c:	fb02 f303 	mul.w	r3, r2, r3
 800c380:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	1e5a      	subs	r2, r3, #1
 800c386:	60fa      	str	r2, [r7, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c38c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c390:	e01b      	b.n	800c3ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c396:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0ef      	beq.n	800c382 <SDMMC_GetCmdResp3+0x1e>
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1ea      	bne.n	800c382 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d004      	beq.n	800c3c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3be:	2304      	movs	r3, #4
 800c3c0:	e003      	b.n	800c3ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	22c5      	movs	r2, #197	; 0xc5
 800c3c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	20000030 	.word	0x20000030
 800c3dc:	10624dd3 	.word	0x10624dd3

0800c3e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3ee:	4b35      	ldr	r3, [pc, #212]	; (800c4c4 <SDMMC_GetCmdResp6+0xe4>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a35      	ldr	r2, [pc, #212]	; (800c4c8 <SDMMC_GetCmdResp6+0xe8>)
 800c3f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f8:	0a5b      	lsrs	r3, r3, #9
 800c3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3fe:	fb02 f303 	mul.w	r3, r2, r3
 800c402:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	1e5a      	subs	r2, r3, #1
 800c408:	61fa      	str	r2, [r7, #28]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d102      	bne.n	800c414 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c40e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c412:	e052      	b.n	800c4ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c418:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c420:	2b00      	cmp	r3, #0
 800c422:	d0ef      	beq.n	800c404 <SDMMC_GetCmdResp6+0x24>
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1ea      	bne.n	800c404 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c432:	f003 0304 	and.w	r3, r3, #4
 800c436:	2b00      	cmp	r3, #0
 800c438:	d004      	beq.n	800c444 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2204      	movs	r2, #4
 800c43e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c440:	2304      	movs	r3, #4
 800c442:	e03a      	b.n	800c4ba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c448:	f003 0301 	and.w	r3, r3, #1
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d004      	beq.n	800c45a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2201      	movs	r2, #1
 800c454:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c456:	2301      	movs	r3, #1
 800c458:	e02f      	b.n	800c4ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7ff fbcb 	bl	800bbf6 <SDIO_GetCommandResponse>
 800c460:	4603      	mov	r3, r0
 800c462:	461a      	mov	r2, r3
 800c464:	7afb      	ldrb	r3, [r7, #11]
 800c466:	4293      	cmp	r3, r2
 800c468:	d001      	beq.n	800c46e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e025      	b.n	800c4ba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	22c5      	movs	r2, #197	; 0xc5
 800c472:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c474:	2100      	movs	r1, #0
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f7ff fbca 	bl	800bc10 <SDIO_GetResponse>
 800c47c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d106      	bne.n	800c496 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	0c1b      	lsrs	r3, r3, #16
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c492:	2300      	movs	r3, #0
 800c494:	e011      	b.n	800c4ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d002      	beq.n	800c4a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c4a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4a4:	e009      	b.n	800c4ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c4b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4b4:	e001      	b.n	800c4ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c4b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3720      	adds	r7, #32
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20000030 	.word	0x20000030
 800c4c8:	10624dd3 	.word	0x10624dd3

0800c4cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4d4:	4b22      	ldr	r3, [pc, #136]	; (800c560 <SDMMC_GetCmdResp7+0x94>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a22      	ldr	r2, [pc, #136]	; (800c564 <SDMMC_GetCmdResp7+0x98>)
 800c4da:	fba2 2303 	umull	r2, r3, r2, r3
 800c4de:	0a5b      	lsrs	r3, r3, #9
 800c4e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4e4:	fb02 f303 	mul.w	r3, r2, r3
 800c4e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	1e5a      	subs	r2, r3, #1
 800c4ee:	60fa      	str	r2, [r7, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d102      	bne.n	800c4fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4f8:	e02c      	b.n	800c554 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0ef      	beq.n	800c4ea <SDMMC_GetCmdResp7+0x1e>
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1ea      	bne.n	800c4ea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c518:	f003 0304 	and.w	r3, r3, #4
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d004      	beq.n	800c52a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2204      	movs	r2, #4
 800c524:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c526:	2304      	movs	r3, #4
 800c528:	e014      	b.n	800c554 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2201      	movs	r2, #1
 800c53a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c53c:	2301      	movs	r3, #1
 800c53e:	e009      	b.n	800c554 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2240      	movs	r2, #64	; 0x40
 800c550:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c552:	2300      	movs	r3, #0
  
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	20000030 	.word	0x20000030
 800c564:	10624dd3 	.word	0x10624dd3

0800c568 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c570:	4b11      	ldr	r3, [pc, #68]	; (800c5b8 <SDMMC_GetCmdError+0x50>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a11      	ldr	r2, [pc, #68]	; (800c5bc <SDMMC_GetCmdError+0x54>)
 800c576:	fba2 2303 	umull	r2, r3, r2, r3
 800c57a:	0a5b      	lsrs	r3, r3, #9
 800c57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c580:	fb02 f303 	mul.w	r3, r2, r3
 800c584:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	1e5a      	subs	r2, r3, #1
 800c58a:	60fa      	str	r2, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d102      	bne.n	800c596 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c594:	e009      	b.n	800c5aa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0f1      	beq.n	800c586 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	22c5      	movs	r2, #197	; 0xc5
 800c5a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	20000030 	.word	0x20000030
 800c5bc:	10624dd3 	.word	0x10624dd3

0800c5c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	f107 001c 	add.w	r0, r7, #28
 800c5ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d122      	bne.n	800c61e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c5ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c602:	2b01      	cmp	r3, #1
 800c604:	d105      	bne.n	800c612 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 fbee 	bl	800ddf4 <USB_CoreReset>
 800c618:	4603      	mov	r3, r0
 800c61a:	73fb      	strb	r3, [r7, #15]
 800c61c:	e01a      	b.n	800c654 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f001 fbe2 	bl	800ddf4 <USB_CoreReset>
 800c630:	4603      	mov	r3, r0
 800c632:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c636:	2b00      	cmp	r3, #0
 800c638:	d106      	bne.n	800c648 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	639a      	str	r2, [r3, #56]	; 0x38
 800c646:	e005      	b.n	800c654 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c656:	2b01      	cmp	r3, #1
 800c658:	d10b      	bne.n	800c672 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f043 0206 	orr.w	r2, r3, #6
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f043 0220 	orr.w	r2, r3, #32
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c672:	7bfb      	ldrb	r3, [r7, #15]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c67e:	b004      	add	sp, #16
 800c680:	4770      	bx	lr
	...

0800c684 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c684:	b480      	push	{r7}
 800c686:	b087      	sub	sp, #28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	4613      	mov	r3, r2
 800c690:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c692:	79fb      	ldrb	r3, [r7, #7]
 800c694:	2b02      	cmp	r3, #2
 800c696:	d165      	bne.n	800c764 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	4a41      	ldr	r2, [pc, #260]	; (800c7a0 <USB_SetTurnaroundTime+0x11c>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d906      	bls.n	800c6ae <USB_SetTurnaroundTime+0x2a>
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	4a40      	ldr	r2, [pc, #256]	; (800c7a4 <USB_SetTurnaroundTime+0x120>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d202      	bcs.n	800c6ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c6a8:	230f      	movs	r3, #15
 800c6aa:	617b      	str	r3, [r7, #20]
 800c6ac:	e062      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	4a3c      	ldr	r2, [pc, #240]	; (800c7a4 <USB_SetTurnaroundTime+0x120>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d306      	bcc.n	800c6c4 <USB_SetTurnaroundTime+0x40>
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4a3b      	ldr	r2, [pc, #236]	; (800c7a8 <USB_SetTurnaroundTime+0x124>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d202      	bcs.n	800c6c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c6be:	230e      	movs	r3, #14
 800c6c0:	617b      	str	r3, [r7, #20]
 800c6c2:	e057      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	4a38      	ldr	r2, [pc, #224]	; (800c7a8 <USB_SetTurnaroundTime+0x124>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d306      	bcc.n	800c6da <USB_SetTurnaroundTime+0x56>
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	4a37      	ldr	r2, [pc, #220]	; (800c7ac <USB_SetTurnaroundTime+0x128>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d202      	bcs.n	800c6da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c6d4:	230d      	movs	r3, #13
 800c6d6:	617b      	str	r3, [r7, #20]
 800c6d8:	e04c      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	4a33      	ldr	r2, [pc, #204]	; (800c7ac <USB_SetTurnaroundTime+0x128>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d306      	bcc.n	800c6f0 <USB_SetTurnaroundTime+0x6c>
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	4a32      	ldr	r2, [pc, #200]	; (800c7b0 <USB_SetTurnaroundTime+0x12c>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d802      	bhi.n	800c6f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c6ea:	230c      	movs	r3, #12
 800c6ec:	617b      	str	r3, [r7, #20]
 800c6ee:	e041      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	4a2f      	ldr	r2, [pc, #188]	; (800c7b0 <USB_SetTurnaroundTime+0x12c>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d906      	bls.n	800c706 <USB_SetTurnaroundTime+0x82>
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	4a2e      	ldr	r2, [pc, #184]	; (800c7b4 <USB_SetTurnaroundTime+0x130>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d802      	bhi.n	800c706 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c700:	230b      	movs	r3, #11
 800c702:	617b      	str	r3, [r7, #20]
 800c704:	e036      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	4a2a      	ldr	r2, [pc, #168]	; (800c7b4 <USB_SetTurnaroundTime+0x130>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d906      	bls.n	800c71c <USB_SetTurnaroundTime+0x98>
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	4a29      	ldr	r2, [pc, #164]	; (800c7b8 <USB_SetTurnaroundTime+0x134>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d802      	bhi.n	800c71c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c716:	230a      	movs	r3, #10
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	e02b      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	4a26      	ldr	r2, [pc, #152]	; (800c7b8 <USB_SetTurnaroundTime+0x134>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d906      	bls.n	800c732 <USB_SetTurnaroundTime+0xae>
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	4a25      	ldr	r2, [pc, #148]	; (800c7bc <USB_SetTurnaroundTime+0x138>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d202      	bcs.n	800c732 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c72c:	2309      	movs	r3, #9
 800c72e:	617b      	str	r3, [r7, #20]
 800c730:	e020      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	4a21      	ldr	r2, [pc, #132]	; (800c7bc <USB_SetTurnaroundTime+0x138>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d306      	bcc.n	800c748 <USB_SetTurnaroundTime+0xc4>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	4a20      	ldr	r2, [pc, #128]	; (800c7c0 <USB_SetTurnaroundTime+0x13c>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d802      	bhi.n	800c748 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c742:	2308      	movs	r3, #8
 800c744:	617b      	str	r3, [r7, #20]
 800c746:	e015      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	4a1d      	ldr	r2, [pc, #116]	; (800c7c0 <USB_SetTurnaroundTime+0x13c>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d906      	bls.n	800c75e <USB_SetTurnaroundTime+0xda>
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	4a1c      	ldr	r2, [pc, #112]	; (800c7c4 <USB_SetTurnaroundTime+0x140>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d202      	bcs.n	800c75e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c758:	2307      	movs	r3, #7
 800c75a:	617b      	str	r3, [r7, #20]
 800c75c:	e00a      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c75e:	2306      	movs	r3, #6
 800c760:	617b      	str	r3, [r7, #20]
 800c762:	e007      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d102      	bne.n	800c770 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c76a:	2309      	movs	r3, #9
 800c76c:	617b      	str	r3, [r7, #20]
 800c76e:	e001      	b.n	800c774 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c770:	2309      	movs	r3, #9
 800c772:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	68da      	ldr	r2, [r3, #12]
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	029b      	lsls	r3, r3, #10
 800c788:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c78c:	431a      	orrs	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	371c      	adds	r7, #28
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	00d8acbf 	.word	0x00d8acbf
 800c7a4:	00e4e1c0 	.word	0x00e4e1c0
 800c7a8:	00f42400 	.word	0x00f42400
 800c7ac:	01067380 	.word	0x01067380
 800c7b0:	011a499f 	.word	0x011a499f
 800c7b4:	01312cff 	.word	0x01312cff
 800c7b8:	014ca43f 	.word	0x014ca43f
 800c7bc:	016e3600 	.word	0x016e3600
 800c7c0:	01a6ab1f 	.word	0x01a6ab1f
 800c7c4:	01e84800 	.word	0x01e84800

0800c7c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	f043 0201 	orr.w	r2, r3, #1
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b083      	sub	sp, #12
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f023 0201 	bic.w	r2, r3, #1
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	460b      	mov	r3, r1
 800c816:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c818:	2300      	movs	r3, #0
 800c81a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c828:	78fb      	ldrb	r3, [r7, #3]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d115      	bne.n	800c85a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c83a:	2001      	movs	r0, #1
 800c83c:	f7f7 fb4c 	bl	8003ed8 <HAL_Delay>
      ms++;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3301      	adds	r3, #1
 800c844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f001 fa45 	bl	800dcd6 <USB_GetMode>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d01e      	beq.n	800c890 <USB_SetCurrentMode+0x84>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b31      	cmp	r3, #49	; 0x31
 800c856:	d9f0      	bls.n	800c83a <USB_SetCurrentMode+0x2e>
 800c858:	e01a      	b.n	800c890 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c85a:	78fb      	ldrb	r3, [r7, #3]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d115      	bne.n	800c88c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c86c:	2001      	movs	r0, #1
 800c86e:	f7f7 fb33 	bl	8003ed8 <HAL_Delay>
      ms++;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3301      	adds	r3, #1
 800c876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f001 fa2c 	bl	800dcd6 <USB_GetMode>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d005      	beq.n	800c890 <USB_SetCurrentMode+0x84>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b31      	cmp	r3, #49	; 0x31
 800c888:	d9f0      	bls.n	800c86c <USB_SetCurrentMode+0x60>
 800c88a:	e001      	b.n	800c890 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	e005      	b.n	800c89c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b32      	cmp	r3, #50	; 0x32
 800c894:	d101      	bne.n	800c89a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e000      	b.n	800c89c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b086      	sub	sp, #24
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c8b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8be:	2300      	movs	r3, #0
 800c8c0:	613b      	str	r3, [r7, #16]
 800c8c2:	e009      	b.n	800c8d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	3340      	adds	r3, #64	; 0x40
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	613b      	str	r3, [r7, #16]
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2b0e      	cmp	r3, #14
 800c8dc:	d9f2      	bls.n	800c8c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d11c      	bne.n	800c91e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8f2:	f043 0302 	orr.w	r3, r3, #2
 800c8f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c908:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c914:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	639a      	str	r2, [r3, #56]	; 0x38
 800c91c:	e00b      	b.n	800c936 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c93c:	461a      	mov	r2, r3
 800c93e:	2300      	movs	r3, #0
 800c940:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c948:	4619      	mov	r1, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c950:	461a      	mov	r2, r3
 800c952:	680b      	ldr	r3, [r1, #0]
 800c954:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d10c      	bne.n	800c976 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c962:	2100      	movs	r1, #0
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f965 	bl	800cc34 <USB_SetDevSpeed>
 800c96a:	e008      	b.n	800c97e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c96c:	2101      	movs	r1, #1
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f960 	bl	800cc34 <USB_SetDevSpeed>
 800c974:	e003      	b.n	800c97e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c976:	2103      	movs	r1, #3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f95b 	bl	800cc34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c97e:	2110      	movs	r1, #16
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f8f3 	bl	800cb6c <USB_FlushTxFifo>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f91f 	bl	800cbd4 <USB_FlushRxFifo>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9be:	461a      	mov	r2, r3
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	613b      	str	r3, [r7, #16]
 800c9c8:	e043      	b.n	800ca52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9e0:	d118      	bne.n	800ca14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d10a      	bne.n	800c9fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	015a      	lsls	r2, r3, #5
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	e013      	b.n	800ca26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	015a      	lsls	r2, r3, #5
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	4413      	add	r3, r2
 800ca06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	e008      	b.n	800ca26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca20:	461a      	mov	r2, r3
 800ca22:	2300      	movs	r3, #0
 800ca24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	015a      	lsls	r2, r3, #5
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca32:	461a      	mov	r2, r3
 800ca34:	2300      	movs	r3, #0
 800ca36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca44:	461a      	mov	r2, r3
 800ca46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	613b      	str	r3, [r7, #16]
 800ca52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d3b7      	bcc.n	800c9ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	613b      	str	r3, [r7, #16]
 800ca5e:	e043      	b.n	800cae8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	015a      	lsls	r2, r3, #5
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4413      	add	r3, r2
 800ca68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca76:	d118      	bne.n	800caaa <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	015a      	lsls	r2, r3, #5
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	4413      	add	r3, r2
 800ca86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca90:	6013      	str	r3, [r2, #0]
 800ca92:	e013      	b.n	800cabc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa0:	461a      	mov	r2, r3
 800caa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	e008      	b.n	800cabc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab6:	461a      	mov	r2, r3
 800cab8:	2300      	movs	r3, #0
 800caba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	015a      	lsls	r2, r3, #5
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4413      	add	r3, r2
 800cac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac8:	461a      	mov	r2, r3
 800caca:	2300      	movs	r3, #0
 800cacc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	015a      	lsls	r2, r3, #5
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4413      	add	r3, r2
 800cad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cada:	461a      	mov	r2, r3
 800cadc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cae0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	3301      	adds	r3, #1
 800cae6:	613b      	str	r3, [r7, #16]
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	693a      	ldr	r2, [r7, #16]
 800caec:	429a      	cmp	r2, r3
 800caee:	d3b7      	bcc.n	800ca60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cafe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d105      	bne.n	800cb24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	f043 0210 	orr.w	r2, r3, #16
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	699a      	ldr	r2, [r3, #24]
 800cb28:	4b0f      	ldr	r3, [pc, #60]	; (800cb68 <USB_DevInit+0x2c4>)
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d005      	beq.n	800cb42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	f043 0208 	orr.w	r2, r3, #8
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d107      	bne.n	800cb58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb50:	f043 0304 	orr.w	r3, r3, #4
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb64:	b004      	add	sp, #16
 800cb66:	4770      	bx	lr
 800cb68:	803c3800 	.word	0x803c3800

0800cb6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4a13      	ldr	r2, [pc, #76]	; (800cbd0 <USB_FlushTxFifo+0x64>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d901      	bls.n	800cb8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e01b      	b.n	800cbc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	daf2      	bge.n	800cb7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb94:	2300      	movs	r3, #0
 800cb96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	019b      	lsls	r3, r3, #6
 800cb9c:	f043 0220 	orr.w	r2, r3, #32
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	3301      	adds	r3, #1
 800cba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	4a08      	ldr	r2, [pc, #32]	; (800cbd0 <USB_FlushTxFifo+0x64>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d901      	bls.n	800cbb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e006      	b.n	800cbc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	f003 0320 	and.w	r3, r3, #32
 800cbbe:	2b20      	cmp	r3, #32
 800cbc0:	d0f0      	beq.n	800cba4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr
 800cbd0:	00030d40 	.word	0x00030d40

0800cbd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	4a11      	ldr	r2, [pc, #68]	; (800cc30 <USB_FlushRxFifo+0x5c>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d901      	bls.n	800cbf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e018      	b.n	800cc24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	daf2      	bge.n	800cbe0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2210      	movs	r2, #16
 800cc02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3301      	adds	r3, #1
 800cc08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	4a08      	ldr	r2, [pc, #32]	; (800cc30 <USB_FlushRxFifo+0x5c>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d901      	bls.n	800cc16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cc12:	2303      	movs	r3, #3
 800cc14:	e006      	b.n	800cc24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	f003 0310 	and.w	r3, r3, #16
 800cc1e:	2b10      	cmp	r3, #16
 800cc20:	d0f0      	beq.n	800cc04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	00030d40 	.word	0x00030d40

0800cc34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	78fb      	ldrb	r3, [r7, #3]
 800cc4e:	68f9      	ldr	r1, [r7, #12]
 800cc50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc54:	4313      	orrs	r3, r2
 800cc56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b087      	sub	sp, #28
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	f003 0306 	and.w	r3, r3, #6
 800cc7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d102      	bne.n	800cc8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc86:	2300      	movs	r3, #0
 800cc88:	75fb      	strb	r3, [r7, #23]
 800cc8a:	e00a      	b.n	800cca2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d002      	beq.n	800cc98 <USB_GetDevSpeed+0x32>
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2b06      	cmp	r3, #6
 800cc96:	d102      	bne.n	800cc9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cc98:	2302      	movs	r3, #2
 800cc9a:	75fb      	strb	r3, [r7, #23]
 800cc9c:	e001      	b.n	800cca2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cc9e:	230f      	movs	r3, #15
 800cca0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	371c      	adds	r7, #28
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	785b      	ldrb	r3, [r3, #1]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d13a      	bne.n	800cd42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd2:	69da      	ldr	r2, [r3, #28]
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	f003 030f 	and.w	r3, r3, #15
 800ccdc:	2101      	movs	r1, #1
 800ccde:	fa01 f303 	lsl.w	r3, r1, r3
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	68f9      	ldr	r1, [r7, #12]
 800cce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccea:	4313      	orrs	r3, r2
 800ccec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d155      	bne.n	800cdb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	791b      	ldrb	r3, [r3, #4]
 800cd1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	059b      	lsls	r3, r3, #22
 800cd26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	0151      	lsls	r1, r2, #5
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	440a      	add	r2, r1
 800cd32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	e036      	b.n	800cdb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd48:	69da      	ldr	r2, [r3, #28]
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f003 030f 	and.w	r3, r3, #15
 800cd52:	2101      	movs	r1, #1
 800cd54:	fa01 f303 	lsl.w	r3, r1, r3
 800cd58:	041b      	lsls	r3, r3, #16
 800cd5a:	68f9      	ldr	r1, [r7, #12]
 800cd5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd60:	4313      	orrs	r3, r2
 800cd62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	015a      	lsls	r2, r3, #5
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d11a      	bne.n	800cdb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	015a      	lsls	r2, r3, #5
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	4413      	add	r3, r2
 800cd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	791b      	ldrb	r3, [r3, #4]
 800cd94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd96:	430b      	orrs	r3, r1
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	0151      	lsls	r1, r2, #5
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	440a      	add	r2, r1
 800cda2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cda6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	785b      	ldrb	r3, [r3, #1]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d161      	bne.n	800cea0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	015a      	lsls	r2, r3, #5
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	4413      	add	r3, r2
 800cde4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cdf2:	d11f      	bne.n	800ce34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	68ba      	ldr	r2, [r7, #8]
 800ce04:	0151      	lsls	r1, r2, #5
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	440a      	add	r2, r1
 800ce0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	015a      	lsls	r2, r3, #5
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	0151      	lsls	r1, r2, #5
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	440a      	add	r2, r1
 800ce2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	f003 030f 	and.w	r3, r3, #15
 800ce44:	2101      	movs	r1, #1
 800ce46:	fa01 f303 	lsl.w	r3, r1, r3
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	43db      	mvns	r3, r3
 800ce4e:	68f9      	ldr	r1, [r7, #12]
 800ce50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce54:	4013      	ands	r3, r2
 800ce56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce5e:	69da      	ldr	r2, [r3, #28]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f003 030f 	and.w	r3, r3, #15
 800ce68:	2101      	movs	r1, #1
 800ce6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	43db      	mvns	r3, r3
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce78:	4013      	ands	r3, r2
 800ce7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	015a      	lsls	r2, r3, #5
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	4413      	add	r3, r2
 800ce84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	0159      	lsls	r1, r3, #5
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	440b      	add	r3, r1
 800ce92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce96:	4619      	mov	r1, r3
 800ce98:	4b35      	ldr	r3, [pc, #212]	; (800cf70 <USB_DeactivateEndpoint+0x1b0>)
 800ce9a:	4013      	ands	r3, r2
 800ce9c:	600b      	str	r3, [r1, #0]
 800ce9e:	e060      	b.n	800cf62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	015a      	lsls	r2, r3, #5
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	4413      	add	r3, r2
 800cea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ceb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ceb6:	d11f      	bne.n	800cef8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	015a      	lsls	r2, r3, #5
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	4413      	add	r3, r2
 800cec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	0151      	lsls	r1, r2, #5
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	440a      	add	r2, r1
 800cece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ced2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ced6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	015a      	lsls	r2, r3, #5
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4413      	add	r3, r2
 800cee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	0151      	lsls	r1, r2, #5
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	440a      	add	r2, r1
 800ceee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cef6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	f003 030f 	and.w	r3, r3, #15
 800cf08:	2101      	movs	r1, #1
 800cf0a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf0e:	041b      	lsls	r3, r3, #16
 800cf10:	43db      	mvns	r3, r3
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf18:	4013      	ands	r3, r2
 800cf1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf22:	69da      	ldr	r2, [r3, #28]
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f003 030f 	and.w	r3, r3, #15
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	fa01 f303 	lsl.w	r3, r1, r3
 800cf32:	041b      	lsls	r3, r3, #16
 800cf34:	43db      	mvns	r3, r3
 800cf36:	68f9      	ldr	r1, [r7, #12]
 800cf38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	0159      	lsls	r1, r3, #5
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	440b      	add	r3, r1
 800cf56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <USB_DeactivateEndpoint+0x1b4>)
 800cf5e:	4013      	ands	r3, r2
 800cf60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	ec337800 	.word	0xec337800
 800cf74:	eff37800 	.word	0xeff37800

0800cf78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08a      	sub	sp, #40	; 0x28
 800cf7c:	af02      	add	r7, sp, #8
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	f040 815c 	bne.w	800d252 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d132      	bne.n	800d008 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	015a      	lsls	r2, r3, #5
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	69ba      	ldr	r2, [r7, #24]
 800cfb2:	0151      	lsls	r1, r2, #5
 800cfb4:	69fa      	ldr	r2, [r7, #28]
 800cfb6:	440a      	add	r2, r1
 800cfb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cfc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cfc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	0151      	lsls	r1, r2, #5
 800cfd8:	69fa      	ldr	r2, [r7, #28]
 800cfda:	440a      	add	r2, r1
 800cfdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	69fa      	ldr	r2, [r7, #28]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d000:	0cdb      	lsrs	r3, r3, #19
 800d002:	04db      	lsls	r3, r3, #19
 800d004:	6113      	str	r3, [r2, #16]
 800d006:	e074      	b.n	800d0f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	015a      	lsls	r2, r3, #5
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	0151      	lsls	r1, r2, #5
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	440a      	add	r2, r1
 800d01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d022:	0cdb      	lsrs	r3, r3, #19
 800d024:	04db      	lsls	r3, r3, #19
 800d026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	015a      	lsls	r2, r3, #5
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	4413      	add	r3, r2
 800d030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	69ba      	ldr	r2, [r7, #24]
 800d038:	0151      	lsls	r1, r2, #5
 800d03a:	69fa      	ldr	r2, [r7, #28]
 800d03c:	440a      	add	r2, r1
 800d03e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d042:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d046:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d04a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	015a      	lsls	r2, r3, #5
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	4413      	add	r3, r2
 800d054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d058:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	6999      	ldr	r1, [r3, #24]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	440b      	add	r3, r1
 800d064:	1e59      	subs	r1, r3, #1
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d06e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d070:	4b9d      	ldr	r3, [pc, #628]	; (800d2e8 <USB_EPStartXfer+0x370>)
 800d072:	400b      	ands	r3, r1
 800d074:	69b9      	ldr	r1, [r7, #24]
 800d076:	0148      	lsls	r0, r1, #5
 800d078:	69f9      	ldr	r1, [r7, #28]
 800d07a:	4401      	add	r1, r0
 800d07c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d080:	4313      	orrs	r3, r2
 800d082:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	015a      	lsls	r2, r3, #5
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	4413      	add	r3, r2
 800d08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d090:	691a      	ldr	r2, [r3, #16]
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d09a:	69b9      	ldr	r1, [r7, #24]
 800d09c:	0148      	lsls	r0, r1, #5
 800d09e:	69f9      	ldr	r1, [r7, #28]
 800d0a0:	4401      	add	r1, r0
 800d0a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	791b      	ldrb	r3, [r3, #4]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d11f      	bne.n	800d0f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	015a      	lsls	r2, r3, #5
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	69ba      	ldr	r2, [r7, #24]
 800d0c2:	0151      	lsls	r1, r2, #5
 800d0c4:	69fa      	ldr	r2, [r7, #28]
 800d0c6:	440a      	add	r2, r1
 800d0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d0d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	015a      	lsls	r2, r3, #5
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	4413      	add	r3, r2
 800d0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	69ba      	ldr	r2, [r7, #24]
 800d0e2:	0151      	lsls	r1, r2, #5
 800d0e4:	69fa      	ldr	r2, [r7, #28]
 800d0e6:	440a      	add	r2, r1
 800d0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d14b      	bne.n	800d190 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d009      	beq.n	800d114 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	015a      	lsls	r2, r3, #5
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	4413      	add	r3, r2
 800d108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10c:	461a      	mov	r2, r3
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	791b      	ldrb	r3, [r3, #4]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d128      	bne.n	800d16e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d110      	bne.n	800d14e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	015a      	lsls	r2, r3, #5
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	4413      	add	r3, r2
 800d134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	69ba      	ldr	r2, [r7, #24]
 800d13c:	0151      	lsls	r1, r2, #5
 800d13e:	69fa      	ldr	r2, [r7, #28]
 800d140:	440a      	add	r2, r1
 800d142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d14a:	6013      	str	r3, [r2, #0]
 800d14c:	e00f      	b.n	800d16e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	015a      	lsls	r2, r3, #5
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	4413      	add	r3, r2
 800d156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	69ba      	ldr	r2, [r7, #24]
 800d15e:	0151      	lsls	r1, r2, #5
 800d160:	69fa      	ldr	r2, [r7, #28]
 800d162:	440a      	add	r2, r1
 800d164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d16c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	015a      	lsls	r2, r3, #5
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	4413      	add	r3, r2
 800d176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	69ba      	ldr	r2, [r7, #24]
 800d17e:	0151      	lsls	r1, r2, #5
 800d180:	69fa      	ldr	r2, [r7, #28]
 800d182:	440a      	add	r2, r1
 800d184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d188:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d18c:	6013      	str	r3, [r2, #0]
 800d18e:	e133      	b.n	800d3f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	015a      	lsls	r2, r3, #5
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	4413      	add	r3, r2
 800d198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	0151      	lsls	r1, r2, #5
 800d1a2:	69fa      	ldr	r2, [r7, #28]
 800d1a4:	440a      	add	r2, r1
 800d1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	791b      	ldrb	r3, [r3, #4]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d015      	beq.n	800d1e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	699b      	ldr	r3, [r3, #24]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 811b 	beq.w	800d3f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	f003 030f 	and.w	r3, r3, #15
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d8:	69f9      	ldr	r1, [r7, #28]
 800d1da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	634b      	str	r3, [r1, #52]	; 0x34
 800d1e2:	e109      	b.n	800d3f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d110      	bne.n	800d216 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	015a      	lsls	r2, r3, #5
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	0151      	lsls	r1, r2, #5
 800d206:	69fa      	ldr	r2, [r7, #28]
 800d208:	440a      	add	r2, r1
 800d20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d20e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	e00f      	b.n	800d236 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	69ba      	ldr	r2, [r7, #24]
 800d226:	0151      	lsls	r1, r2, #5
 800d228:	69fa      	ldr	r2, [r7, #28]
 800d22a:	440a      	add	r2, r1
 800d22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d234:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	6919      	ldr	r1, [r3, #16]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	781a      	ldrb	r2, [r3, #0]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	b298      	uxth	r0, r3
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	4603      	mov	r3, r0
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f000 fade 	bl	800d80c <USB_WritePacket>
 800d250:	e0d2      	b.n	800d3f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	015a      	lsls	r2, r3, #5
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	4413      	add	r3, r2
 800d25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	69ba      	ldr	r2, [r7, #24]
 800d262:	0151      	lsls	r1, r2, #5
 800d264:	69fa      	ldr	r2, [r7, #28]
 800d266:	440a      	add	r2, r1
 800d268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d26c:	0cdb      	lsrs	r3, r3, #19
 800d26e:	04db      	lsls	r3, r3, #19
 800d270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	015a      	lsls	r2, r3, #5
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	4413      	add	r3, r2
 800d27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	69ba      	ldr	r2, [r7, #24]
 800d282:	0151      	lsls	r1, r2, #5
 800d284:	69fa      	ldr	r2, [r7, #28]
 800d286:	440a      	add	r2, r1
 800d288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d28c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d290:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d294:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d126      	bne.n	800d2ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	015a      	lsls	r2, r3, #5
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2aa:	691a      	ldr	r2, [r3, #16]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2b4:	69b9      	ldr	r1, [r7, #24]
 800d2b6:	0148      	lsls	r0, r1, #5
 800d2b8:	69f9      	ldr	r1, [r7, #28]
 800d2ba:	4401      	add	r1, r0
 800d2bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	69ba      	ldr	r2, [r7, #24]
 800d2d4:	0151      	lsls	r1, r2, #5
 800d2d6:	69fa      	ldr	r2, [r7, #28]
 800d2d8:	440a      	add	r2, r1
 800d2da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2e2:	6113      	str	r3, [r2, #16]
 800d2e4:	e03a      	b.n	800d35c <USB_EPStartXfer+0x3e4>
 800d2e6:	bf00      	nop
 800d2e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	699a      	ldr	r2, [r3, #24]
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	1e5a      	subs	r2, r3, #1
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d300:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	8afa      	ldrh	r2, [r7, #22]
 800d308:	fb03 f202 	mul.w	r2, r3, r2
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	015a      	lsls	r2, r3, #5
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	4413      	add	r3, r2
 800d318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d31c:	691a      	ldr	r2, [r3, #16]
 800d31e:	8afb      	ldrh	r3, [r7, #22]
 800d320:	04d9      	lsls	r1, r3, #19
 800d322:	4b38      	ldr	r3, [pc, #224]	; (800d404 <USB_EPStartXfer+0x48c>)
 800d324:	400b      	ands	r3, r1
 800d326:	69b9      	ldr	r1, [r7, #24]
 800d328:	0148      	lsls	r0, r1, #5
 800d32a:	69f9      	ldr	r1, [r7, #28]
 800d32c:	4401      	add	r1, r0
 800d32e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d332:	4313      	orrs	r3, r2
 800d334:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	015a      	lsls	r2, r3, #5
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	4413      	add	r3, r2
 800d33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d342:	691a      	ldr	r2, [r3, #16]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	69db      	ldr	r3, [r3, #28]
 800d348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d34c:	69b9      	ldr	r1, [r7, #24]
 800d34e:	0148      	lsls	r0, r1, #5
 800d350:	69f9      	ldr	r1, [r7, #28]
 800d352:	4401      	add	r1, r0
 800d354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d358:	4313      	orrs	r3, r2
 800d35a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d10d      	bne.n	800d37e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d009      	beq.n	800d37e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6919      	ldr	r1, [r3, #16]
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	4413      	add	r3, r2
 800d376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37a:	460a      	mov	r2, r1
 800d37c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	791b      	ldrb	r3, [r3, #4]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d128      	bne.n	800d3d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d392:	2b00      	cmp	r3, #0
 800d394:	d110      	bne.n	800d3b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	015a      	lsls	r2, r3, #5
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	0151      	lsls	r1, r2, #5
 800d3a8:	69fa      	ldr	r2, [r7, #28]
 800d3aa:	440a      	add	r2, r1
 800d3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3b4:	6013      	str	r3, [r2, #0]
 800d3b6:	e00f      	b.n	800d3d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69ba      	ldr	r2, [r7, #24]
 800d3c8:	0151      	lsls	r1, r2, #5
 800d3ca:	69fa      	ldr	r2, [r7, #28]
 800d3cc:	440a      	add	r2, r1
 800d3ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	015a      	lsls	r2, r3, #5
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	4413      	add	r3, r2
 800d3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	0151      	lsls	r1, r2, #5
 800d3ea:	69fa      	ldr	r2, [r7, #28]
 800d3ec:	440a      	add	r2, r1
 800d3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3720      	adds	r7, #32
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	1ff80000 	.word	0x1ff80000

0800d408 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d408:	b480      	push	{r7}
 800d40a:	b087      	sub	sp, #28
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	4613      	mov	r3, r2
 800d414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	785b      	ldrb	r3, [r3, #1]
 800d424:	2b01      	cmp	r3, #1
 800d426:	f040 80ce 	bne.w	800d5c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d132      	bne.n	800d498 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	015a      	lsls	r2, r3, #5
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	4413      	add	r3, r2
 800d43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	693a      	ldr	r2, [r7, #16]
 800d442:	0151      	lsls	r1, r2, #5
 800d444:	697a      	ldr	r2, [r7, #20]
 800d446:	440a      	add	r2, r1
 800d448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d44c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d450:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	015a      	lsls	r2, r3, #5
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	4413      	add	r3, r2
 800d45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	0151      	lsls	r1, r2, #5
 800d468:	697a      	ldr	r2, [r7, #20]
 800d46a:	440a      	add	r2, r1
 800d46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	015a      	lsls	r2, r3, #5
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	4413      	add	r3, r2
 800d47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	0151      	lsls	r1, r2, #5
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	440a      	add	r2, r1
 800d48c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d490:	0cdb      	lsrs	r3, r3, #19
 800d492:	04db      	lsls	r3, r3, #19
 800d494:	6113      	str	r3, [r2, #16]
 800d496:	e04e      	b.n	800d536 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	015a      	lsls	r2, r3, #5
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	0151      	lsls	r1, r2, #5
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	440a      	add	r2, r1
 800d4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4b2:	0cdb      	lsrs	r3, r3, #19
 800d4b4:	04db      	lsls	r3, r3, #19
 800d4b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	015a      	lsls	r2, r3, #5
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	693a      	ldr	r2, [r7, #16]
 800d4c8:	0151      	lsls	r1, r2, #5
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	440a      	add	r2, r1
 800d4ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d4d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d4da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	699a      	ldr	r2, [r3, #24]
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d903      	bls.n	800d4f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	015a      	lsls	r2, r3, #5
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	693a      	ldr	r2, [r7, #16]
 800d500:	0151      	lsls	r1, r2, #5
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	440a      	add	r2, r1
 800d506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d50a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d50e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	015a      	lsls	r2, r3, #5
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	4413      	add	r3, r2
 800d518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d51c:	691a      	ldr	r2, [r3, #16]
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	699b      	ldr	r3, [r3, #24]
 800d522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d526:	6939      	ldr	r1, [r7, #16]
 800d528:	0148      	lsls	r0, r1, #5
 800d52a:	6979      	ldr	r1, [r7, #20]
 800d52c:	4401      	add	r1, r0
 800d52e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d532:	4313      	orrs	r3, r2
 800d534:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d11e      	bne.n	800d57a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	695b      	ldr	r3, [r3, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d009      	beq.n	800d558 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	015a      	lsls	r2, r3, #5
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	4413      	add	r3, r2
 800d54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d550:	461a      	mov	r2, r3
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	0151      	lsls	r1, r2, #5
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	440a      	add	r2, r1
 800d56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d576:	6013      	str	r3, [r2, #0]
 800d578:	e097      	b.n	800d6aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	015a      	lsls	r2, r3, #5
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	4413      	add	r3, r2
 800d582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	693a      	ldr	r2, [r7, #16]
 800d58a:	0151      	lsls	r1, r2, #5
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	440a      	add	r2, r1
 800d590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d598:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	699b      	ldr	r3, [r3, #24]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f000 8083 	beq.w	800d6aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 030f 	and.w	r3, r3, #15
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ba:	6979      	ldr	r1, [r7, #20]
 800d5bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	634b      	str	r3, [r1, #52]	; 0x34
 800d5c4:	e071      	b.n	800d6aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	015a      	lsls	r2, r3, #5
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	693a      	ldr	r2, [r7, #16]
 800d5d6:	0151      	lsls	r1, r2, #5
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	440a      	add	r2, r1
 800d5dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5e0:	0cdb      	lsrs	r3, r3, #19
 800d5e2:	04db      	lsls	r3, r3, #19
 800d5e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	015a      	lsls	r2, r3, #5
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	693a      	ldr	r2, [r7, #16]
 800d5f6:	0151      	lsls	r1, r2, #5
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	440a      	add	r2, r1
 800d5fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d600:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d604:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d608:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	68da      	ldr	r2, [r3, #12]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	68da      	ldr	r2, [r3, #12]
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	693a      	ldr	r2, [r7, #16]
 800d632:	0151      	lsls	r1, r2, #5
 800d634:	697a      	ldr	r2, [r7, #20]
 800d636:	440a      	add	r2, r1
 800d638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d63c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	015a      	lsls	r2, r3, #5
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	4413      	add	r3, r2
 800d64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64e:	691a      	ldr	r2, [r3, #16]
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	69db      	ldr	r3, [r3, #28]
 800d654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d658:	6939      	ldr	r1, [r7, #16]
 800d65a:	0148      	lsls	r0, r1, #5
 800d65c:	6979      	ldr	r1, [r7, #20]
 800d65e:	4401      	add	r1, r0
 800d660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d664:	4313      	orrs	r3, r2
 800d666:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d668:	79fb      	ldrb	r3, [r7, #7]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d10d      	bne.n	800d68a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d009      	beq.n	800d68a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	6919      	ldr	r1, [r3, #16]
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	015a      	lsls	r2, r3, #5
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	4413      	add	r3, r2
 800d682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d686:	460a      	mov	r2, r1
 800d688:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	015a      	lsls	r2, r3, #5
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	4413      	add	r3, r2
 800d692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	0151      	lsls	r1, r2, #5
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	440a      	add	r2, r1
 800d6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	371c      	adds	r7, #28
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b087      	sub	sp, #28
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	785b      	ldrb	r3, [r3, #1]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d14a      	bne.n	800d76c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6ee:	f040 8086 	bne.w	800d7fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	7812      	ldrb	r2, [r2, #0]
 800d706:	0151      	lsls	r1, r2, #5
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	440a      	add	r2, r1
 800d70c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d714:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	015a      	lsls	r2, r3, #5
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	4413      	add	r3, r2
 800d720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	683a      	ldr	r2, [r7, #0]
 800d728:	7812      	ldrb	r2, [r2, #0]
 800d72a:	0151      	lsls	r1, r2, #5
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	440a      	add	r2, r1
 800d730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d738:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3301      	adds	r3, #1
 800d73e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f242 7210 	movw	r2, #10000	; 0x2710
 800d746:	4293      	cmp	r3, r2
 800d748:	d902      	bls.n	800d750 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d74a:	2301      	movs	r3, #1
 800d74c:	75fb      	strb	r3, [r7, #23]
          break;
 800d74e:	e056      	b.n	800d7fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	015a      	lsls	r2, r3, #5
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	4413      	add	r3, r2
 800d75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d768:	d0e7      	beq.n	800d73a <USB_EPStopXfer+0x82>
 800d76a:	e048      	b.n	800d7fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	4413      	add	r3, r2
 800d776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d784:	d13b      	bne.n	800d7fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	015a      	lsls	r2, r3, #5
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	4413      	add	r3, r2
 800d790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	7812      	ldrb	r2, [r2, #0]
 800d79a:	0151      	lsls	r1, r2, #5
 800d79c:	693a      	ldr	r2, [r7, #16]
 800d79e:	440a      	add	r2, r1
 800d7a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d7a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	015a      	lsls	r2, r3, #5
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	7812      	ldrb	r2, [r2, #0]
 800d7be:	0151      	lsls	r1, r2, #5
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	440a      	add	r2, r1
 800d7c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d902      	bls.n	800d7e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	75fb      	strb	r3, [r7, #23]
          break;
 800d7e2:	e00c      	b.n	800d7fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	015a      	lsls	r2, r3, #5
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7fc:	d0e7      	beq.n	800d7ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d800:	4618      	mov	r0, r3
 800d802:	371c      	adds	r7, #28
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b089      	sub	sp, #36	; 0x24
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	4611      	mov	r1, r2
 800d818:	461a      	mov	r2, r3
 800d81a:	460b      	mov	r3, r1
 800d81c:	71fb      	strb	r3, [r7, #7]
 800d81e:	4613      	mov	r3, r2
 800d820:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d82a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d123      	bne.n	800d87a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d832:	88bb      	ldrh	r3, [r7, #4]
 800d834:	3303      	adds	r3, #3
 800d836:	089b      	lsrs	r3, r3, #2
 800d838:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d83a:	2300      	movs	r3, #0
 800d83c:	61bb      	str	r3, [r7, #24]
 800d83e:	e018      	b.n	800d872 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d840:	79fb      	ldrb	r3, [r7, #7]
 800d842:	031a      	lsls	r2, r3, #12
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	4413      	add	r3, r2
 800d848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d84c:	461a      	mov	r2, r3
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	3301      	adds	r3, #1
 800d858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	3301      	adds	r3, #1
 800d85e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	3301      	adds	r3, #1
 800d864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	3301      	adds	r3, #1
 800d86a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	3301      	adds	r3, #1
 800d870:	61bb      	str	r3, [r7, #24]
 800d872:	69ba      	ldr	r2, [r7, #24]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	429a      	cmp	r2, r3
 800d878:	d3e2      	bcc.n	800d840 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3724      	adds	r7, #36	; 0x24
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d888:	b480      	push	{r7}
 800d88a:	b08b      	sub	sp, #44	; 0x2c
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	4613      	mov	r3, r2
 800d894:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d89e:	88fb      	ldrh	r3, [r7, #6]
 800d8a0:	089b      	lsrs	r3, r3, #2
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d8a6:	88fb      	ldrh	r3, [r7, #6]
 800d8a8:	f003 0303 	and.w	r3, r3, #3
 800d8ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	623b      	str	r3, [r7, #32]
 800d8b2:	e014      	b.n	800d8de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	601a      	str	r2, [r3, #0]
    pDest++;
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	623b      	str	r3, [r7, #32]
 800d8de:	6a3a      	ldr	r2, [r7, #32]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d3e6      	bcc.n	800d8b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d8e6:	8bfb      	ldrh	r3, [r7, #30]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d01e      	beq.n	800d92a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	f107 0310 	add.w	r3, r7, #16
 800d8fc:	6812      	ldr	r2, [r2, #0]
 800d8fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	b2db      	uxtb	r3, r3
 800d906:	00db      	lsls	r3, r3, #3
 800d908:	fa22 f303 	lsr.w	r3, r2, r3
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	701a      	strb	r2, [r3, #0]
      i++;
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	3301      	adds	r3, #1
 800d916:	623b      	str	r3, [r7, #32]
      pDest++;
 800d918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91a:	3301      	adds	r3, #1
 800d91c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d91e:	8bfb      	ldrh	r3, [r7, #30]
 800d920:	3b01      	subs	r3, #1
 800d922:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d924:	8bfb      	ldrh	r3, [r7, #30]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1ea      	bne.n	800d900 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	372c      	adds	r7, #44	; 0x2c
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	785b      	ldrb	r3, [r3, #1]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d12c      	bne.n	800d9ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	db12      	blt.n	800d98c <USB_EPSetStall+0x54>
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00f      	beq.n	800d98c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	015a      	lsls	r2, r3, #5
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	4413      	add	r3, r2
 800d974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	0151      	lsls	r1, r2, #5
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	440a      	add	r2, r1
 800d982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d986:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d98a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	015a      	lsls	r2, r3, #5
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	4413      	add	r3, r2
 800d994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	0151      	lsls	r1, r2, #5
 800d99e:	68fa      	ldr	r2, [r7, #12]
 800d9a0:	440a      	add	r2, r1
 800d9a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9aa:	6013      	str	r3, [r2, #0]
 800d9ac:	e02b      	b.n	800da06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	db12      	blt.n	800d9e6 <USB_EPSetStall+0xae>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00f      	beq.n	800d9e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	015a      	lsls	r2, r3, #5
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	0151      	lsls	r1, r2, #5
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	440a      	add	r2, r1
 800d9dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	015a      	lsls	r2, r3, #5
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	0151      	lsls	r1, r2, #5
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	440a      	add	r2, r1
 800d9fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	785b      	ldrb	r3, [r3, #1]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d128      	bne.n	800da82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	015a      	lsls	r2, r3, #5
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	4413      	add	r3, r2
 800da38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	0151      	lsls	r1, r2, #5
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	440a      	add	r2, r1
 800da46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	791b      	ldrb	r3, [r3, #4]
 800da54:	2b03      	cmp	r3, #3
 800da56:	d003      	beq.n	800da60 <USB_EPClearStall+0x4c>
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d138      	bne.n	800dad2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	015a      	lsls	r2, r3, #5
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4413      	add	r3, r2
 800da68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	0151      	lsls	r1, r2, #5
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	440a      	add	r2, r1
 800da76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	e027      	b.n	800dad2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	015a      	lsls	r2, r3, #5
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	4413      	add	r3, r2
 800da8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	0151      	lsls	r1, r2, #5
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	440a      	add	r2, r1
 800da98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800daa0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	791b      	ldrb	r3, [r3, #4]
 800daa6:	2b03      	cmp	r3, #3
 800daa8:	d003      	beq.n	800dab2 <USB_EPClearStall+0x9e>
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	791b      	ldrb	r3, [r3, #4]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d10f      	bne.n	800dad2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	015a      	lsls	r2, r3, #5
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	4413      	add	r3, r2
 800daba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	0151      	lsls	r1, r2, #5
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	440a      	add	r2, r1
 800dac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dacc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dad0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dafe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800db02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	78fb      	ldrb	r3, [r7, #3]
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800db14:	68f9      	ldr	r1, [r7, #12]
 800db16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db1a:	4313      	orrs	r3, r2
 800db1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db46:	f023 0303 	bic.w	r3, r3, #3
 800db4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db5a:	f023 0302 	bic.w	r3, r3, #2
 800db5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db6e:	b480      	push	{r7}
 800db70:	b085      	sub	sp, #20
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db88:	f023 0303 	bic.w	r3, r3, #3
 800db8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	4013      	ands	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3714      	adds	r7, #20
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b085      	sub	sp, #20
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbf2:	69db      	ldr	r3, [r3, #28]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	0c1b      	lsrs	r3, r3, #16
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1c:	699b      	ldr	r3, [r3, #24]
 800dc1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc26:	69db      	ldr	r3, [r3, #28]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	4013      	ands	r3, r2
 800dc2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	b29b      	uxth	r3, r3
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	b085      	sub	sp, #20
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	460b      	mov	r3, r1
 800dc48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc4e:	78fb      	ldrb	r3, [r7, #3]
 800dc50:	015a      	lsls	r2, r3, #5
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	4413      	add	r3, r2
 800dc56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	4013      	ands	r3, r2
 800dc6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b087      	sub	sp, #28
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	460b      	mov	r3, r1
 800dc84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dc9e:	78fb      	ldrb	r3, [r7, #3]
 800dca0:	f003 030f 	and.w	r3, r3, #15
 800dca4:	68fa      	ldr	r2, [r7, #12]
 800dca6:	fa22 f303 	lsr.w	r3, r2, r3
 800dcaa:	01db      	lsls	r3, r3, #7
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	693a      	ldr	r2, [r7, #16]
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dcb4:	78fb      	ldrb	r3, [r7, #3]
 800dcb6:	015a      	lsls	r2, r3, #5
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dcc8:	68bb      	ldr	r3, [r7, #8]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	371c      	adds	r7, #28
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b083      	sub	sp, #12
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	f003 0301 	and.w	r3, r3, #1
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	370c      	adds	r7, #12
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b085      	sub	sp, #20
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dd10:	f023 0307 	bic.w	r3, r3, #7
 800dd14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3714      	adds	r7, #20
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	460b      	mov	r3, r1
 800dd42:	607a      	str	r2, [r7, #4]
 800dd44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	333c      	adds	r3, #60	; 0x3c
 800dd4e:	3304      	adds	r3, #4
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	4a26      	ldr	r2, [pc, #152]	; (800ddf0 <USB_EP0_OutStart+0xb8>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d90a      	bls.n	800dd72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd6c:	d101      	bne.n	800dd72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	e037      	b.n	800dde2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd78:	461a      	mov	r2, r3
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	697a      	ldr	r2, [r7, #20]
 800dd88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd98:	691b      	ldr	r3, [r3, #16]
 800dd9a:	697a      	ldr	r2, [r7, #20]
 800dd9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dda0:	f043 0318 	orr.w	r3, r3, #24
 800dda4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ddb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ddba:	7afb      	ldrb	r3, [r7, #11]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d10f      	bne.n	800dde0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	697a      	ldr	r2, [r7, #20]
 800ddd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ddde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	371c      	adds	r7, #28
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	4f54300a 	.word	0x4f54300a

0800ddf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	3301      	adds	r3, #1
 800de04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	4a13      	ldr	r2, [pc, #76]	; (800de58 <USB_CoreReset+0x64>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d901      	bls.n	800de12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800de0e:	2303      	movs	r3, #3
 800de10:	e01b      	b.n	800de4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	daf2      	bge.n	800de00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800de1a:	2300      	movs	r3, #0
 800de1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	f043 0201 	orr.w	r2, r3, #1
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	3301      	adds	r3, #1
 800de2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	4a09      	ldr	r2, [pc, #36]	; (800de58 <USB_CoreReset+0x64>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d901      	bls.n	800de3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de38:	2303      	movs	r3, #3
 800de3a:	e006      	b.n	800de4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	f003 0301 	and.w	r3, r3, #1
 800de44:	2b01      	cmp	r3, #1
 800de46:	d0f0      	beq.n	800de2a <USB_CoreReset+0x36>

  return HAL_OK;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	00030d40 	.word	0x00030d40

0800de5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
//extern char devPath[4];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800de60:	4904      	ldr	r1, [pc, #16]	; (800de74 <MX_FATFS_Init+0x18>)
 800de62:	4805      	ldr	r0, [pc, #20]	; (800de78 <MX_FATFS_Init+0x1c>)
 800de64:	f006 f900 	bl	8014068 <FATFS_LinkDriver>
 800de68:	4603      	mov	r3, r0
 800de6a:	461a      	mov	r2, r3
 800de6c:	4b03      	ldr	r3, [pc, #12]	; (800de7c <MX_FATFS_Init+0x20>)
 800de6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800de70:	bf00      	nop
 800de72:	bd80      	pop	{r7, pc}
 800de74:	20001944 	.word	0x20001944
 800de78:	08016898 	.word	0x08016898
 800de7c:	20001940 	.word	0x20001940

0800de80 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800de80:	b480      	push	{r7}
 800de82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800de84:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800de86:	4618      	mov	r0, r3
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de9a:	f000 f8ac 	bl	800dff6 <BSP_SD_IsDetected>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d001      	beq.n	800dea8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e012      	b.n	800dece <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800dea8:	480b      	ldr	r0, [pc, #44]	; (800ded8 <BSP_SD_Init+0x48>)
 800deaa:	f7f9 fabf 	bl	800742c <HAL_SD_Init>
 800deae:	4603      	mov	r3, r0
 800deb0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800deb2:	79fb      	ldrb	r3, [r7, #7]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d109      	bne.n	800decc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800deb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800debc:	4806      	ldr	r0, [pc, #24]	; (800ded8 <BSP_SD_Init+0x48>)
 800debe:	f7fa fa29 	bl	8008314 <HAL_SD_ConfigWideBusOperation>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d001      	beq.n	800decc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800dec8:	2301      	movs	r3, #1
 800deca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800decc:	79fb      	ldrb	r3, [r7, #7]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	200001d8 	.word	0x200001d8

0800dedc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af02      	add	r7, sp, #8
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	68f9      	ldr	r1, [r7, #12]
 800def8:	4806      	ldr	r0, [pc, #24]	; (800df14 <BSP_SD_ReadBlocks+0x38>)
 800defa:	f7f9 fb47 	bl	800758c <HAL_SD_ReadBlocks>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800df04:	2301      	movs	r3, #1
 800df06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800df08:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3718      	adds	r7, #24
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	200001d8 	.word	0x200001d8

0800df18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b088      	sub	sp, #32
 800df1c:	af02      	add	r7, sp, #8
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	9300      	str	r3, [sp, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	68f9      	ldr	r1, [r7, #12]
 800df34:	4806      	ldr	r0, [pc, #24]	; (800df50 <BSP_SD_WriteBlocks+0x38>)
 800df36:	f7f9 fd07 	bl	8007948 <HAL_SD_WriteBlocks>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800df40:	2301      	movs	r3, #1
 800df42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800df44:	7dfb      	ldrb	r3, [r7, #23]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	200001d8 	.word	0x200001d8

0800df54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800df58:	4805      	ldr	r0, [pc, #20]	; (800df70 <BSP_SD_GetCardState+0x1c>)
 800df5a:	f7fa fa75 	bl	8008448 <HAL_SD_GetCardState>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b04      	cmp	r3, #4
 800df62:	bf14      	ite	ne
 800df64:	2301      	movne	r3, #1
 800df66:	2300      	moveq	r3, #0
 800df68:	b2db      	uxtb	r3, r3
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	200001d8 	.word	0x200001d8

0800df74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800df7c:	6879      	ldr	r1, [r7, #4]
 800df7e:	4803      	ldr	r0, [pc, #12]	; (800df8c <BSP_SD_GetCardInfo+0x18>)
 800df80:	f7fa f99c 	bl	80082bc <HAL_SD_GetCardInfo>
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	200001d8 	.word	0x200001d8

0800df90 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800df98:	f000 f818 	bl	800dfcc <BSP_SD_AbortCallback>
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dfac:	f000 f815 	bl	800dfda <BSP_SD_WriteCpltCallback>
}
 800dfb0:	bf00      	nop
 800dfb2:	3708      	adds	r7, #8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dfc0:	f000 f812 	bl	800dfe8 <BSP_SD_ReadCpltCallback>
}
 800dfc4:	bf00      	nop
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	af00      	add	r7, sp, #0

}
 800dfd0:	bf00      	nop
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800dfda:	b480      	push	{r7}
 800dfdc:	af00      	add	r7, sp, #0

}
 800dfde:	bf00      	nop
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	af00      	add	r7, sp, #0

}
 800dfec:	bf00      	nop
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800dff6:	b480      	push	{r7}
 800dff8:	b083      	sub	sp, #12
 800dffa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800dffc:	2301      	movs	r3, #1
 800dffe:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	b2db      	uxtb	r3, r3
}
 800e004:	4618      	mov	r0, r3
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	4603      	mov	r3, r0
 800e018:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e01a:	4b0b      	ldr	r3, [pc, #44]	; (800e048 <SD_CheckStatus+0x38>)
 800e01c:	2201      	movs	r2, #1
 800e01e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e020:	f7ff ff98 	bl	800df54 <BSP_SD_GetCardState>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d107      	bne.n	800e03a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e02a:	4b07      	ldr	r3, [pc, #28]	; (800e048 <SD_CheckStatus+0x38>)
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	f023 0301 	bic.w	r3, r3, #1
 800e034:	b2da      	uxtb	r2, r3
 800e036:	4b04      	ldr	r3, [pc, #16]	; (800e048 <SD_CheckStatus+0x38>)
 800e038:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e03a:	4b03      	ldr	r3, [pc, #12]	; (800e048 <SD_CheckStatus+0x38>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	b2db      	uxtb	r3, r3
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	20000045 	.word	0x20000045

0800e04c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	4603      	mov	r3, r0
 800e054:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e056:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <SD_initialize+0x38>)
 800e058:	2201      	movs	r2, #1
 800e05a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e05c:	f7ff ff18 	bl	800de90 <BSP_SD_Init>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d107      	bne.n	800e076 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff ffd1 	bl	800e010 <SD_CheckStatus>
 800e06e:	4603      	mov	r3, r0
 800e070:	461a      	mov	r2, r3
 800e072:	4b04      	ldr	r3, [pc, #16]	; (800e084 <SD_initialize+0x38>)
 800e074:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e076:	4b03      	ldr	r3, [pc, #12]	; (800e084 <SD_initialize+0x38>)
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b2db      	uxtb	r3, r3
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	20000045 	.word	0x20000045

0800e088 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	4603      	mov	r3, r0
 800e090:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e092:	79fb      	ldrb	r3, [r7, #7]
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff ffbb 	bl	800e010 <SD_CheckStatus>
 800e09a:	4603      	mov	r3, r0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60b9      	str	r1, [r7, #8]
 800e0ac:	607a      	str	r2, [r7, #4]
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e0b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	6879      	ldr	r1, [r7, #4]
 800e0c0:	68b8      	ldr	r0, [r7, #8]
 800e0c2:	f7ff ff0b 	bl	800dedc <BSP_SD_ReadBlocks>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d107      	bne.n	800e0dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e0cc:	bf00      	nop
 800e0ce:	f7ff ff41 	bl	800df54 <BSP_SD_GetCardState>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d1fa      	bne.n	800e0ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3718      	adds	r7, #24
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b086      	sub	sp, #24
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
 800e0f0:	603b      	str	r3, [r7, #0]
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	68b8      	ldr	r0, [r7, #8]
 800e104:	f7ff ff08 	bl	800df18 <BSP_SD_WriteBlocks>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d107      	bne.n	800e11e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e10e:	bf00      	nop
 800e110:	f7ff ff20 	bl	800df54 <BSP_SD_GetCardState>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1fa      	bne.n	800e110 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e11a:	2300      	movs	r3, #0
 800e11c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3718      	adds	r7, #24
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08c      	sub	sp, #48	; 0x30
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	4603      	mov	r3, r0
 800e130:	603a      	str	r2, [r7, #0]
 800e132:	71fb      	strb	r3, [r7, #7]
 800e134:	460b      	mov	r3, r1
 800e136:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e13e:	4b25      	ldr	r3, [pc, #148]	; (800e1d4 <SD_ioctl+0xac>)
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	b2db      	uxtb	r3, r3
 800e144:	f003 0301 	and.w	r3, r3, #1
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d001      	beq.n	800e150 <SD_ioctl+0x28>
 800e14c:	2303      	movs	r3, #3
 800e14e:	e03c      	b.n	800e1ca <SD_ioctl+0xa2>

  switch (cmd)
 800e150:	79bb      	ldrb	r3, [r7, #6]
 800e152:	2b03      	cmp	r3, #3
 800e154:	d834      	bhi.n	800e1c0 <SD_ioctl+0x98>
 800e156:	a201      	add	r2, pc, #4	; (adr r2, 800e15c <SD_ioctl+0x34>)
 800e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15c:	0800e16d 	.word	0x0800e16d
 800e160:	0800e175 	.word	0x0800e175
 800e164:	0800e18d 	.word	0x0800e18d
 800e168:	0800e1a7 	.word	0x0800e1a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e172:	e028      	b.n	800e1c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e174:	f107 030c 	add.w	r3, r7, #12
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff fefb 	bl	800df74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e18a:	e01c      	b.n	800e1c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e18c:	f107 030c 	add.w	r3, r7, #12
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff feef 	bl	800df74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e198:	b29a      	uxth	r2, r3
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e1a4:	e00f      	b.n	800e1c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e1a6:	f107 030c 	add.w	r3, r7, #12
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7ff fee2 	bl	800df74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	0a5a      	lsrs	r2, r3, #9
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e1be:	e002      	b.n	800e1c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3730      	adds	r7, #48	; 0x30
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20000045 	.word	0x20000045

0800e1d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e1e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e1e8:	f006 fd00 	bl	8014bec <USBD_static_malloc>
 800e1ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d109      	bne.n	800e208 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	32b0      	adds	r2, #176	; 0xb0
 800e1fe:	2100      	movs	r1, #0
 800e200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e204:	2302      	movs	r3, #2
 800e206:	e0d4      	b.n	800e3b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e208:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e20c:	2100      	movs	r1, #0
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f006 fe28 	bl	8014e64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	32b0      	adds	r2, #176	; 0xb0
 800e21e:	68f9      	ldr	r1, [r7, #12]
 800e220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	32b0      	adds	r2, #176	; 0xb0
 800e22e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	7c1b      	ldrb	r3, [r3, #16]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d138      	bne.n	800e2b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e240:	4b5e      	ldr	r3, [pc, #376]	; (800e3bc <USBD_CDC_Init+0x1e4>)
 800e242:	7819      	ldrb	r1, [r3, #0]
 800e244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e248:	2202      	movs	r2, #2
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f006 fbab 	bl	80149a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e250:	4b5a      	ldr	r3, [pc, #360]	; (800e3bc <USBD_CDC_Init+0x1e4>)
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	f003 020f 	and.w	r2, r3, #15
 800e258:	6879      	ldr	r1, [r7, #4]
 800e25a:	4613      	mov	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	4413      	add	r3, r2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	440b      	add	r3, r1
 800e264:	3324      	adds	r3, #36	; 0x24
 800e266:	2201      	movs	r2, #1
 800e268:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e26a:	4b55      	ldr	r3, [pc, #340]	; (800e3c0 <USBD_CDC_Init+0x1e8>)
 800e26c:	7819      	ldrb	r1, [r3, #0]
 800e26e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e272:	2202      	movs	r2, #2
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f006 fb96 	bl	80149a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e27a:	4b51      	ldr	r3, [pc, #324]	; (800e3c0 <USBD_CDC_Init+0x1e8>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	f003 020f 	and.w	r2, r3, #15
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	440b      	add	r3, r1
 800e28e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e292:	2201      	movs	r2, #1
 800e294:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e296:	4b4b      	ldr	r3, [pc, #300]	; (800e3c4 <USBD_CDC_Init+0x1ec>)
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	f003 020f 	and.w	r2, r3, #15
 800e29e:	6879      	ldr	r1, [r7, #4]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4413      	add	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	440b      	add	r3, r1
 800e2aa:	3326      	adds	r3, #38	; 0x26
 800e2ac:	2210      	movs	r2, #16
 800e2ae:	801a      	strh	r2, [r3, #0]
 800e2b0:	e035      	b.n	800e31e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e2b2:	4b42      	ldr	r3, [pc, #264]	; (800e3bc <USBD_CDC_Init+0x1e4>)
 800e2b4:	7819      	ldrb	r1, [r3, #0]
 800e2b6:	2340      	movs	r3, #64	; 0x40
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f006 fb73 	bl	80149a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e2c0:	4b3e      	ldr	r3, [pc, #248]	; (800e3bc <USBD_CDC_Init+0x1e4>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	f003 020f 	and.w	r2, r3, #15
 800e2c8:	6879      	ldr	r1, [r7, #4]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	440b      	add	r3, r1
 800e2d4:	3324      	adds	r3, #36	; 0x24
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e2da:	4b39      	ldr	r3, [pc, #228]	; (800e3c0 <USBD_CDC_Init+0x1e8>)
 800e2dc:	7819      	ldrb	r1, [r3, #0]
 800e2de:	2340      	movs	r3, #64	; 0x40
 800e2e0:	2202      	movs	r2, #2
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f006 fb5f 	bl	80149a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e2e8:	4b35      	ldr	r3, [pc, #212]	; (800e3c0 <USBD_CDC_Init+0x1e8>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	f003 020f 	and.w	r2, r3, #15
 800e2f0:	6879      	ldr	r1, [r7, #4]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4413      	add	r3, r2
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	440b      	add	r3, r1
 800e2fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e300:	2201      	movs	r2, #1
 800e302:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e304:	4b2f      	ldr	r3, [pc, #188]	; (800e3c4 <USBD_CDC_Init+0x1ec>)
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	f003 020f 	and.w	r2, r3, #15
 800e30c:	6879      	ldr	r1, [r7, #4]
 800e30e:	4613      	mov	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	4413      	add	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	440b      	add	r3, r1
 800e318:	3326      	adds	r3, #38	; 0x26
 800e31a:	2210      	movs	r2, #16
 800e31c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e31e:	4b29      	ldr	r3, [pc, #164]	; (800e3c4 <USBD_CDC_Init+0x1ec>)
 800e320:	7819      	ldrb	r1, [r3, #0]
 800e322:	2308      	movs	r3, #8
 800e324:	2203      	movs	r2, #3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f006 fb3d 	bl	80149a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e32c:	4b25      	ldr	r3, [pc, #148]	; (800e3c4 <USBD_CDC_Init+0x1ec>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	f003 020f 	and.w	r2, r3, #15
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	4613      	mov	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	4413      	add	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	440b      	add	r3, r1
 800e340:	3324      	adds	r3, #36	; 0x24
 800e342:	2201      	movs	r2, #1
 800e344:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2200      	movs	r2, #0
 800e34a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	33b0      	adds	r3, #176	; 0xb0
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2200      	movs	r2, #0
 800e366:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d101      	bne.n	800e380 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e37c:	2302      	movs	r3, #2
 800e37e:	e018      	b.n	800e3b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	7c1b      	ldrb	r3, [r3, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10a      	bne.n	800e39e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e388:	4b0d      	ldr	r3, [pc, #52]	; (800e3c0 <USBD_CDC_Init+0x1e8>)
 800e38a:	7819      	ldrb	r1, [r3, #0]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e392:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f006 fbf4 	bl	8014b84 <USBD_LL_PrepareReceive>
 800e39c:	e008      	b.n	800e3b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e39e:	4b08      	ldr	r3, [pc, #32]	; (800e3c0 <USBD_CDC_Init+0x1e8>)
 800e3a0:	7819      	ldrb	r1, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3a8:	2340      	movs	r3, #64	; 0x40
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f006 fbea 	bl	8014b84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	200000cf 	.word	0x200000cf
 800e3c0:	200000d0 	.word	0x200000d0
 800e3c4:	200000d1 	.word	0x200000d1

0800e3c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e3d4:	4b3a      	ldr	r3, [pc, #232]	; (800e4c0 <USBD_CDC_DeInit+0xf8>)
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f006 fb09 	bl	80149f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e3e0:	4b37      	ldr	r3, [pc, #220]	; (800e4c0 <USBD_CDC_DeInit+0xf8>)
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	f003 020f 	and.w	r2, r3, #15
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	440b      	add	r3, r1
 800e3f4:	3324      	adds	r3, #36	; 0x24
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e3fa:	4b32      	ldr	r3, [pc, #200]	; (800e4c4 <USBD_CDC_DeInit+0xfc>)
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	4619      	mov	r1, r3
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f006 faf6 	bl	80149f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e406:	4b2f      	ldr	r3, [pc, #188]	; (800e4c4 <USBD_CDC_DeInit+0xfc>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	f003 020f 	and.w	r2, r3, #15
 800e40e:	6879      	ldr	r1, [r7, #4]
 800e410:	4613      	mov	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	440b      	add	r3, r1
 800e41a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e41e:	2200      	movs	r2, #0
 800e420:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e422:	4b29      	ldr	r3, [pc, #164]	; (800e4c8 <USBD_CDC_DeInit+0x100>)
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	4619      	mov	r1, r3
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f006 fae2 	bl	80149f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e42e:	4b26      	ldr	r3, [pc, #152]	; (800e4c8 <USBD_CDC_DeInit+0x100>)
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	f003 020f 	and.w	r2, r3, #15
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	4613      	mov	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	440b      	add	r3, r1
 800e442:	3324      	adds	r3, #36	; 0x24
 800e444:	2200      	movs	r2, #0
 800e446:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e448:	4b1f      	ldr	r3, [pc, #124]	; (800e4c8 <USBD_CDC_DeInit+0x100>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	f003 020f 	and.w	r2, r3, #15
 800e450:	6879      	ldr	r1, [r7, #4]
 800e452:	4613      	mov	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	440b      	add	r3, r1
 800e45c:	3326      	adds	r3, #38	; 0x26
 800e45e:	2200      	movs	r2, #0
 800e460:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	32b0      	adds	r2, #176	; 0xb0
 800e46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d01f      	beq.n	800e4b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	33b0      	adds	r3, #176	; 0xb0
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4413      	add	r3, r2
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	32b0      	adds	r2, #176	; 0xb0
 800e492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e496:	4618      	mov	r0, r3
 800e498:	f006 fbb6 	bl	8014c08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	32b0      	adds	r2, #176	; 0xb0
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	200000cf 	.word	0x200000cf
 800e4c4:	200000d0 	.word	0x200000d0
 800e4c8:	200000d1 	.word	0x200000d1

0800e4cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	32b0      	adds	r2, #176	; 0xb0
 800e4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e0bf      	b.n	800e67c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e504:	2b00      	cmp	r3, #0
 800e506:	d050      	beq.n	800e5aa <USBD_CDC_Setup+0xde>
 800e508:	2b20      	cmp	r3, #32
 800e50a:	f040 80af 	bne.w	800e66c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	88db      	ldrh	r3, [r3, #6]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d03a      	beq.n	800e58c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	b25b      	sxtb	r3, r3
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	da1b      	bge.n	800e558 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	33b0      	adds	r3, #176	; 0xb0
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4413      	add	r3, r2
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e536:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	88d2      	ldrh	r2, [r2, #6]
 800e53c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	88db      	ldrh	r3, [r3, #6]
 800e542:	2b07      	cmp	r3, #7
 800e544:	bf28      	it	cs
 800e546:	2307      	movcs	r3, #7
 800e548:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	89fa      	ldrh	r2, [r7, #14]
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f001 fd89 	bl	8010068 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e556:	e090      	b.n	800e67a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	785a      	ldrb	r2, [r3, #1]
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	88db      	ldrh	r3, [r3, #6]
 800e566:	2b3f      	cmp	r3, #63	; 0x3f
 800e568:	d803      	bhi.n	800e572 <USBD_CDC_Setup+0xa6>
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	88db      	ldrh	r3, [r3, #6]
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	e000      	b.n	800e574 <USBD_CDC_Setup+0xa8>
 800e572:	2240      	movs	r2, #64	; 0x40
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e57a:	6939      	ldr	r1, [r7, #16]
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e582:	461a      	mov	r2, r3
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f001 fd9b 	bl	80100c0 <USBD_CtlPrepareRx>
      break;
 800e58a:	e076      	b.n	800e67a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	33b0      	adds	r3, #176	; 0xb0
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4413      	add	r3, r2
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	7850      	ldrb	r0, [r2, #1]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	6839      	ldr	r1, [r7, #0]
 800e5a6:	4798      	blx	r3
      break;
 800e5a8:	e067      	b.n	800e67a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	785b      	ldrb	r3, [r3, #1]
 800e5ae:	2b0b      	cmp	r3, #11
 800e5b0:	d851      	bhi.n	800e656 <USBD_CDC_Setup+0x18a>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <USBD_CDC_Setup+0xec>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5e9 	.word	0x0800e5e9
 800e5bc:	0800e665 	.word	0x0800e665
 800e5c0:	0800e657 	.word	0x0800e657
 800e5c4:	0800e657 	.word	0x0800e657
 800e5c8:	0800e657 	.word	0x0800e657
 800e5cc:	0800e657 	.word	0x0800e657
 800e5d0:	0800e657 	.word	0x0800e657
 800e5d4:	0800e657 	.word	0x0800e657
 800e5d8:	0800e657 	.word	0x0800e657
 800e5dc:	0800e657 	.word	0x0800e657
 800e5e0:	0800e613 	.word	0x0800e613
 800e5e4:	0800e63d 	.word	0x0800e63d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d107      	bne.n	800e604 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e5f4:	f107 030a 	add.w	r3, r7, #10
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f001 fd33 	bl	8010068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e602:	e032      	b.n	800e66a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f001 fcbd 	bl	800ff86 <USBD_CtlError>
            ret = USBD_FAIL;
 800e60c:	2303      	movs	r3, #3
 800e60e:	75fb      	strb	r3, [r7, #23]
          break;
 800e610:	e02b      	b.n	800e66a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b03      	cmp	r3, #3
 800e61c:	d107      	bne.n	800e62e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e61e:	f107 030d 	add.w	r3, r7, #13
 800e622:	2201      	movs	r2, #1
 800e624:	4619      	mov	r1, r3
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f001 fd1e 	bl	8010068 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e62c:	e01d      	b.n	800e66a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f001 fca8 	bl	800ff86 <USBD_CtlError>
            ret = USBD_FAIL;
 800e636:	2303      	movs	r3, #3
 800e638:	75fb      	strb	r3, [r7, #23]
          break;
 800e63a:	e016      	b.n	800e66a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b03      	cmp	r3, #3
 800e646:	d00f      	beq.n	800e668 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f001 fc9b 	bl	800ff86 <USBD_CtlError>
            ret = USBD_FAIL;
 800e650:	2303      	movs	r3, #3
 800e652:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e654:	e008      	b.n	800e668 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f001 fc94 	bl	800ff86 <USBD_CtlError>
          ret = USBD_FAIL;
 800e65e:	2303      	movs	r3, #3
 800e660:	75fb      	strb	r3, [r7, #23]
          break;
 800e662:	e002      	b.n	800e66a <USBD_CDC_Setup+0x19e>
          break;
 800e664:	bf00      	nop
 800e666:	e008      	b.n	800e67a <USBD_CDC_Setup+0x1ae>
          break;
 800e668:	bf00      	nop
      }
      break;
 800e66a:	e006      	b.n	800e67a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f001 fc89 	bl	800ff86 <USBD_CtlError>
      ret = USBD_FAIL;
 800e674:	2303      	movs	r3, #3
 800e676:	75fb      	strb	r3, [r7, #23]
      break;
 800e678:	bf00      	nop
  }

  return (uint8_t)ret;
 800e67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3718      	adds	r7, #24
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e696:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	32b0      	adds	r2, #176	; 0xb0
 800e6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d101      	bne.n	800e6ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e065      	b.n	800e77a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	32b0      	adds	r2, #176	; 0xb0
 800e6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e6be:	78fb      	ldrb	r3, [r7, #3]
 800e6c0:	f003 020f 	and.w	r2, r3, #15
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	440b      	add	r3, r1
 800e6d0:	3318      	adds	r3, #24
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d02f      	beq.n	800e738 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e6d8:	78fb      	ldrb	r3, [r7, #3]
 800e6da:	f003 020f 	and.w	r2, r3, #15
 800e6de:	6879      	ldr	r1, [r7, #4]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	440b      	add	r3, r1
 800e6ea:	3318      	adds	r3, #24
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	78fb      	ldrb	r3, [r7, #3]
 800e6f0:	f003 010f 	and.w	r1, r3, #15
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	440b      	add	r3, r1
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4403      	add	r3, r0
 800e700:	3348      	adds	r3, #72	; 0x48
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	fbb2 f1f3 	udiv	r1, r2, r3
 800e708:	fb01 f303 	mul.w	r3, r1, r3
 800e70c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d112      	bne.n	800e738 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e712:	78fb      	ldrb	r3, [r7, #3]
 800e714:	f003 020f 	and.w	r2, r3, #15
 800e718:	6879      	ldr	r1, [r7, #4]
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	440b      	add	r3, r1
 800e724:	3318      	adds	r3, #24
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e72a:	78f9      	ldrb	r1, [r7, #3]
 800e72c:	2300      	movs	r3, #0
 800e72e:	2200      	movs	r2, #0
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f006 fa06 	bl	8014b42 <USBD_LL_Transmit>
 800e736:	e01f      	b.n	800e778 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2200      	movs	r2, #0
 800e73c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	33b0      	adds	r3, #176	; 0xb0
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4413      	add	r3, r2
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d010      	beq.n	800e778 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	33b0      	adds	r3, #176	; 0xb0
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4413      	add	r3, r2
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	691b      	ldr	r3, [r3, #16]
 800e768:	68ba      	ldr	r2, [r7, #8]
 800e76a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e774:	78fa      	ldrb	r2, [r7, #3]
 800e776:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
 800e78a:	460b      	mov	r3, r1
 800e78c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	32b0      	adds	r2, #176	; 0xb0
 800e798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e79c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	32b0      	adds	r2, #176	; 0xb0
 800e7a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	e01a      	b.n	800e7ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e7b4:	78fb      	ldrb	r3, [r7, #3]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f006 fa04 	bl	8014bc6 <USBD_LL_GetRxDataSize>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	33b0      	adds	r3, #176	; 0xb0
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	4413      	add	r3, r2
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	32b0      	adds	r2, #176	; 0xb0
 800e804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e808:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d101      	bne.n	800e814 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e810:	2303      	movs	r3, #3
 800e812:	e025      	b.n	800e860 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	33b0      	adds	r3, #176	; 0xb0
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	4413      	add	r3, r2
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d01a      	beq.n	800e85e <USBD_CDC_EP0_RxReady+0x6c>
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e82e:	2bff      	cmp	r3, #255	; 0xff
 800e830:	d015      	beq.n	800e85e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	33b0      	adds	r3, #176	; 0xb0
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4413      	add	r3, r2
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	68fa      	ldr	r2, [r7, #12]
 800e846:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e84a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e852:	b292      	uxth	r2, r2
 800e854:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	22ff      	movs	r2, #255	; 0xff
 800e85a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e870:	2182      	movs	r1, #130	; 0x82
 800e872:	4818      	ldr	r0, [pc, #96]	; (800e8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e874:	f000 fd4f 	bl	800f316 <USBD_GetEpDesc>
 800e878:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e87a:	2101      	movs	r1, #1
 800e87c:	4815      	ldr	r0, [pc, #84]	; (800e8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e87e:	f000 fd4a 	bl	800f316 <USBD_GetEpDesc>
 800e882:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e884:	2181      	movs	r1, #129	; 0x81
 800e886:	4813      	ldr	r0, [pc, #76]	; (800e8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e888:	f000 fd45 	bl	800f316 <USBD_GetEpDesc>
 800e88c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2210      	movs	r2, #16
 800e898:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d006      	beq.n	800e8ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8a8:	711a      	strb	r2, [r3, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d006      	beq.n	800e8c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8bc:	711a      	strb	r2, [r3, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2243      	movs	r2, #67	; 0x43
 800e8c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e8c8:	4b02      	ldr	r3, [pc, #8]	; (800e8d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	2000008c 	.word	0x2000008c

0800e8d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b086      	sub	sp, #24
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e8e0:	2182      	movs	r1, #130	; 0x82
 800e8e2:	4818      	ldr	r0, [pc, #96]	; (800e944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e8e4:	f000 fd17 	bl	800f316 <USBD_GetEpDesc>
 800e8e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e8ea:	2101      	movs	r1, #1
 800e8ec:	4815      	ldr	r0, [pc, #84]	; (800e944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e8ee:	f000 fd12 	bl	800f316 <USBD_GetEpDesc>
 800e8f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e8f4:	2181      	movs	r1, #129	; 0x81
 800e8f6:	4813      	ldr	r0, [pc, #76]	; (800e944 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e8f8:	f000 fd0d 	bl	800f316 <USBD_GetEpDesc>
 800e8fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2210      	movs	r2, #16
 800e908:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d006      	beq.n	800e91e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	2200      	movs	r2, #0
 800e914:	711a      	strb	r2, [r3, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	f042 0202 	orr.w	r2, r2, #2
 800e91c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d006      	beq.n	800e932 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2200      	movs	r2, #0
 800e928:	711a      	strb	r2, [r3, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f042 0202 	orr.w	r2, r2, #2
 800e930:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2243      	movs	r2, #67	; 0x43
 800e936:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e938:	4b02      	ldr	r3, [pc, #8]	; (800e944 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	2000008c 	.word	0x2000008c

0800e948 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e950:	2182      	movs	r1, #130	; 0x82
 800e952:	4818      	ldr	r0, [pc, #96]	; (800e9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e954:	f000 fcdf 	bl	800f316 <USBD_GetEpDesc>
 800e958:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e95a:	2101      	movs	r1, #1
 800e95c:	4815      	ldr	r0, [pc, #84]	; (800e9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e95e:	f000 fcda 	bl	800f316 <USBD_GetEpDesc>
 800e962:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e964:	2181      	movs	r1, #129	; 0x81
 800e966:	4813      	ldr	r0, [pc, #76]	; (800e9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e968:	f000 fcd5 	bl	800f316 <USBD_GetEpDesc>
 800e96c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d002      	beq.n	800e97a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2210      	movs	r2, #16
 800e978:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d006      	beq.n	800e98e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	2200      	movs	r2, #0
 800e984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e988:	711a      	strb	r2, [r3, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d006      	beq.n	800e9a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e99c:	711a      	strb	r2, [r3, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2243      	movs	r2, #67	; 0x43
 800e9a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e9a8:	4b02      	ldr	r3, [pc, #8]	; (800e9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	2000008c 	.word	0x2000008c

0800e9b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	220a      	movs	r2, #10
 800e9c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e9c6:	4b03      	ldr	r3, [pc, #12]	; (800e9d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr
 800e9d4:	20000048 	.word	0x20000048

0800e9d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d101      	bne.n	800e9ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e9e8:	2303      	movs	r3, #3
 800e9ea:	e009      	b.n	800ea00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	33b0      	adds	r3, #176	; 0xb0
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b087      	sub	sp, #28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	32b0      	adds	r2, #176	; 0xb0
 800ea22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea26:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d101      	bne.n	800ea32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ea2e:	2303      	movs	r3, #3
 800ea30:	e008      	b.n	800ea44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	68ba      	ldr	r2, [r7, #8]
 800ea36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ea42:	2300      	movs	r3, #0
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	371c      	adds	r7, #28
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr

0800ea50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	32b0      	adds	r2, #176	; 0xb0
 800ea64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ea70:	2303      	movs	r3, #3
 800ea72:	e004      	b.n	800ea7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	683a      	ldr	r2, [r7, #0]
 800ea78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
	...

0800ea8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	32b0      	adds	r2, #176	; 0xb0
 800ea9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	32b0      	adds	r2, #176	; 0xb0
 800eab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800eaba:	2303      	movs	r3, #3
 800eabc:	e025      	b.n	800eb0a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d11f      	bne.n	800eb08 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ead0:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <USBD_CDC_TransmitPacket+0x88>)
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	f003 020f 	and.w	r2, r3, #15
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	4613      	mov	r3, r2
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	4413      	add	r3, r2
 800eae6:	009b      	lsls	r3, r3, #2
 800eae8:	4403      	add	r3, r0
 800eaea:	3318      	adds	r3, #24
 800eaec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800eaee:	4b09      	ldr	r3, [pc, #36]	; (800eb14 <USBD_CDC_TransmitPacket+0x88>)
 800eaf0:	7819      	ldrb	r1, [r3, #0]
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f006 f81f 	bl	8014b42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	200000cf 	.word	0x200000cf

0800eb18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	32b0      	adds	r2, #176	; 0xb0
 800eb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb2e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	32b0      	adds	r2, #176	; 0xb0
 800eb3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800eb42:	2303      	movs	r3, #3
 800eb44:	e018      	b.n	800eb78 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7c1b      	ldrb	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d10a      	bne.n	800eb64 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb4e:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <USBD_CDC_ReceivePacket+0x68>)
 800eb50:	7819      	ldrb	r1, [r3, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f006 f811 	bl	8014b84 <USBD_LL_PrepareReceive>
 800eb62:	e008      	b.n	800eb76 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb64:	4b06      	ldr	r3, [pc, #24]	; (800eb80 <USBD_CDC_ReceivePacket+0x68>)
 800eb66:	7819      	ldrb	r1, [r3, #0]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb6e:	2340      	movs	r3, #64	; 0x40
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f006 f807 	bl	8014b84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	200000d0 	.word	0x200000d0

0800eb84 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	e01f      	b.n	800ebdc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d003      	beq.n	800ebc2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	79fa      	ldrb	r2, [r7, #7]
 800ebce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f005 fe81 	bl	80148d8 <USBD_LL_Init>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ebda:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d101      	bne.n	800ebfc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e025      	b.n	800ec48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	683a      	ldr	r2, [r7, #0]
 800ec00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	32ae      	adds	r2, #174	; 0xae
 800ec0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d00f      	beq.n	800ec38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	32ae      	adds	r2, #174	; 0xae
 800ec22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec28:	f107 020e 	add.w	r2, r7, #14
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	4798      	blx	r3
 800ec30:	4602      	mov	r2, r0
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f005 fe89 	bl	8014970 <USBD_LL_Start>
 800ec5e:	4603      	mov	r3, r0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b083      	sub	sp, #12
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	370c      	adds	r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr

0800ec7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	460b      	mov	r3, r1
 800ec88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d009      	beq.n	800ecac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	78fa      	ldrb	r2, [r7, #3]
 800eca2:	4611      	mov	r1, r2
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	4798      	blx	r3
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	78fa      	ldrb	r2, [r7, #3]
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	4798      	blx	r3
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ecdc:	2303      	movs	r3, #3
 800ecde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b084      	sub	sp, #16
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f001 f908 	bl	800ff12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2201      	movs	r2, #1
 800ed06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ed10:	461a      	mov	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed1e:	f003 031f 	and.w	r3, r3, #31
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d01a      	beq.n	800ed5c <USBD_LL_SetupStage+0x72>
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	d822      	bhi.n	800ed70 <USBD_LL_SetupStage+0x86>
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <USBD_LL_SetupStage+0x4a>
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d00a      	beq.n	800ed48 <USBD_LL_SetupStage+0x5e>
 800ed32:	e01d      	b.n	800ed70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fb5f 	bl	800f400 <USBD_StdDevReq>
 800ed42:	4603      	mov	r3, r0
 800ed44:	73fb      	strb	r3, [r7, #15]
      break;
 800ed46:	e020      	b.n	800ed8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed4e:	4619      	mov	r1, r3
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 fbc7 	bl	800f4e4 <USBD_StdItfReq>
 800ed56:	4603      	mov	r3, r0
 800ed58:	73fb      	strb	r3, [r7, #15]
      break;
 800ed5a:	e016      	b.n	800ed8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed62:	4619      	mov	r1, r3
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fc29 	bl	800f5bc <USBD_StdEPReq>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed6e:	e00c      	b.n	800ed8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f005 fe56 	bl	8014a30 <USBD_LL_StallEP>
 800ed84:	4603      	mov	r3, r0
 800ed86:	73fb      	strb	r3, [r7, #15]
      break;
 800ed88:	bf00      	nop
  }

  return ret;
 800ed8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800eda6:	7afb      	ldrb	r3, [r7, #11]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d16e      	bne.n	800ee8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800edb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edba:	2b03      	cmp	r3, #3
 800edbc:	f040 8098 	bne.w	800eef0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d913      	bls.n	800edf4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	689a      	ldr	r2, [r3, #8]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	1ad2      	subs	r2, r2, r3
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	68da      	ldr	r2, [r3, #12]
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	689b      	ldr	r3, [r3, #8]
 800ede2:	4293      	cmp	r3, r2
 800ede4:	bf28      	it	cs
 800ede6:	4613      	movcs	r3, r2
 800ede8:	461a      	mov	r2, r3
 800edea:	6879      	ldr	r1, [r7, #4]
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f001 f984 	bl	80100fa <USBD_CtlContinueRx>
 800edf2:	e07d      	b.n	800eef0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800edfa:	f003 031f 	and.w	r3, r3, #31
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	d014      	beq.n	800ee2c <USBD_LL_DataOutStage+0x98>
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d81d      	bhi.n	800ee42 <USBD_LL_DataOutStage+0xae>
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d002      	beq.n	800ee10 <USBD_LL_DataOutStage+0x7c>
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d003      	beq.n	800ee16 <USBD_LL_DataOutStage+0x82>
 800ee0e:	e018      	b.n	800ee42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ee10:	2300      	movs	r3, #0
 800ee12:	75bb      	strb	r3, [r7, #22]
            break;
 800ee14:	e018      	b.n	800ee48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	4619      	mov	r1, r3
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 fa5e 	bl	800f2e2 <USBD_CoreFindIF>
 800ee26:	4603      	mov	r3, r0
 800ee28:	75bb      	strb	r3, [r7, #22]
            break;
 800ee2a:	e00d      	b.n	800ee48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	4619      	mov	r1, r3
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f000 fa60 	bl	800f2fc <USBD_CoreFindEP>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	75bb      	strb	r3, [r7, #22]
            break;
 800ee40:	e002      	b.n	800ee48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ee42:	2300      	movs	r3, #0
 800ee44:	75bb      	strb	r3, [r7, #22]
            break;
 800ee46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ee48:	7dbb      	ldrb	r3, [r7, #22]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d119      	bne.n	800ee82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d113      	bne.n	800ee82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ee5a:	7dba      	ldrb	r2, [r7, #22]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	32ae      	adds	r2, #174	; 0xae
 800ee60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00b      	beq.n	800ee82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ee6a:	7dba      	ldrb	r2, [r7, #22]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ee72:	7dba      	ldrb	r2, [r7, #22]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	32ae      	adds	r2, #174	; 0xae
 800ee78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7c:	691b      	ldr	r3, [r3, #16]
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f001 f94a 	bl	801011c <USBD_CtlSendStatus>
 800ee88:	e032      	b.n	800eef0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ee8a:	7afb      	ldrb	r3, [r7, #11]
 800ee8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	4619      	mov	r1, r3
 800ee94:	68f8      	ldr	r0, [r7, #12]
 800ee96:	f000 fa31 	bl	800f2fc <USBD_CoreFindEP>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee9e:	7dbb      	ldrb	r3, [r7, #22]
 800eea0:	2bff      	cmp	r3, #255	; 0xff
 800eea2:	d025      	beq.n	800eef0 <USBD_LL_DataOutStage+0x15c>
 800eea4:	7dbb      	ldrb	r3, [r7, #22]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d122      	bne.n	800eef0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	2b03      	cmp	r3, #3
 800eeb4:	d117      	bne.n	800eee6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eeb6:	7dba      	ldrb	r2, [r7, #22]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	32ae      	adds	r2, #174	; 0xae
 800eebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00f      	beq.n	800eee6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eec6:	7dba      	ldrb	r2, [r7, #22]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eece:	7dba      	ldrb	r2, [r7, #22]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	32ae      	adds	r2, #174	; 0xae
 800eed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed8:	699b      	ldr	r3, [r3, #24]
 800eeda:	7afa      	ldrb	r2, [r7, #11]
 800eedc:	4611      	mov	r1, r2
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	4798      	blx	r3
 800eee2:	4603      	mov	r3, r0
 800eee4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eee6:	7dfb      	ldrb	r3, [r7, #23]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eeec:	7dfb      	ldrb	r3, [r7, #23]
 800eeee:	e000      	b.n	800eef2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3718      	adds	r7, #24
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b086      	sub	sp, #24
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	60f8      	str	r0, [r7, #12]
 800ef02:	460b      	mov	r3, r1
 800ef04:	607a      	str	r2, [r7, #4]
 800ef06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ef08:	7afb      	ldrb	r3, [r7, #11]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d16f      	bne.n	800efee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3314      	adds	r3, #20
 800ef12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef1a:	2b02      	cmp	r3, #2
 800ef1c:	d15a      	bne.n	800efd4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	689a      	ldr	r2, [r3, #8]
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d914      	bls.n	800ef54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	689a      	ldr	r2, [r3, #8]
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	1ad2      	subs	r2, r2, r3
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	6879      	ldr	r1, [r7, #4]
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	f001 f8ac 	bl	801009e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef46:	2300      	movs	r3, #0
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2100      	movs	r1, #0
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f005 fe19 	bl	8014b84 <USBD_LL_PrepareReceive>
 800ef52:	e03f      	b.n	800efd4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68da      	ldr	r2, [r3, #12]
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	689b      	ldr	r3, [r3, #8]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d11c      	bne.n	800ef9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d316      	bcc.n	800ef9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d20f      	bcs.n	800ef9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f001 f88d 	bl	801009e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2200      	movs	r2, #0
 800ef88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	2200      	movs	r2, #0
 800ef90:	2100      	movs	r1, #0
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f005 fdf6 	bl	8014b84 <USBD_LL_PrepareReceive>
 800ef98:	e01c      	b.n	800efd4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	2b03      	cmp	r3, #3
 800efa4:	d10f      	bne.n	800efc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d009      	beq.n	800efc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800efc6:	2180      	movs	r1, #128	; 0x80
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f005 fd31 	bl	8014a30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f001 f8b7 	bl	8010142 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d03a      	beq.n	800f054 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f7ff fe42 	bl	800ec68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2200      	movs	r2, #0
 800efe8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800efec:	e032      	b.n	800f054 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800efee:	7afb      	ldrb	r3, [r7, #11]
 800eff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	4619      	mov	r1, r3
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f000 f97f 	bl	800f2fc <USBD_CoreFindEP>
 800effe:	4603      	mov	r3, r0
 800f000:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f002:	7dfb      	ldrb	r3, [r7, #23]
 800f004:	2bff      	cmp	r3, #255	; 0xff
 800f006:	d025      	beq.n	800f054 <USBD_LL_DataInStage+0x15a>
 800f008:	7dfb      	ldrb	r3, [r7, #23]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d122      	bne.n	800f054 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f014:	b2db      	uxtb	r3, r3
 800f016:	2b03      	cmp	r3, #3
 800f018:	d11c      	bne.n	800f054 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f01a:	7dfa      	ldrb	r2, [r7, #23]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	32ae      	adds	r2, #174	; 0xae
 800f020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f024:	695b      	ldr	r3, [r3, #20]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d014      	beq.n	800f054 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f02a:	7dfa      	ldrb	r2, [r7, #23]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f032:	7dfa      	ldrb	r2, [r7, #23]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	32ae      	adds	r2, #174	; 0xae
 800f038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f03c:	695b      	ldr	r3, [r3, #20]
 800f03e:	7afa      	ldrb	r2, [r7, #11]
 800f040:	4611      	mov	r1, r2
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	4798      	blx	r3
 800f046:	4603      	mov	r3, r0
 800f048:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f04a:	7dbb      	ldrb	r3, [r7, #22]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d001      	beq.n	800f054 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f050:	7dbb      	ldrb	r3, [r7, #22]
 800f052:	e000      	b.n	800f056 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b084      	sub	sp, #16
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2201      	movs	r2, #1
 800f06e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2200      	movs	r2, #0
 800f076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f096:	2b00      	cmp	r3, #0
 800f098:	d014      	beq.n	800f0c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00e      	beq.n	800f0c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	6852      	ldr	r2, [r2, #4]
 800f0b2:	b2d2      	uxtb	r2, r2
 800f0b4:	4611      	mov	r1, r2
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	4798      	blx	r3
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f0c0:	2303      	movs	r3, #3
 800f0c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f0c4:	2340      	movs	r3, #64	; 0x40
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f005 fc6b 	bl	80149a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2240      	movs	r2, #64	; 0x40
 800f0dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f0e0:	2340      	movs	r3, #64	; 0x40
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	2180      	movs	r1, #128	; 0x80
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f005 fc5d 	bl	80149a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2240      	movs	r2, #64	; 0x40
 800f0f6:	621a      	str	r2, [r3, #32]

  return ret;
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f102:	b480      	push	{r7}
 800f104:	b083      	sub	sp, #12
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	460b      	mov	r3, r1
 800f10c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	78fa      	ldrb	r2, [r7, #3]
 800f112:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr

0800f122 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f122:	b480      	push	{r7}
 800f124:	b083      	sub	sp, #12
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f130:	b2da      	uxtb	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2204      	movs	r2, #4
 800f13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f14e:	b480      	push	{r7}
 800f150:	b083      	sub	sp, #12
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	2b04      	cmp	r3, #4
 800f160:	d106      	bne.n	800f170 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f168:	b2da      	uxtb	r2, r3
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	370c      	adds	r7, #12
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f17e:	b580      	push	{r7, lr}
 800f180:	b082      	sub	sp, #8
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	2b03      	cmp	r3, #3
 800f190:	d110      	bne.n	800f1b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00b      	beq.n	800f1b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1a2:	69db      	ldr	r3, [r3, #28]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d005      	beq.n	800f1b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ae:	69db      	ldr	r3, [r3, #28]
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b082      	sub	sp, #8
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	32ae      	adds	r2, #174	; 0xae
 800f1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e01c      	b.n	800f21a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	2b03      	cmp	r3, #3
 800f1ea:	d115      	bne.n	800f218 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	32ae      	adds	r2, #174	; 0xae
 800f1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1fa:	6a1b      	ldr	r3, [r3, #32]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00b      	beq.n	800f218 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	32ae      	adds	r2, #174	; 0xae
 800f20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f20e:	6a1b      	ldr	r3, [r3, #32]
 800f210:	78fa      	ldrb	r2, [r7, #3]
 800f212:	4611      	mov	r1, r2
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b082      	sub	sp, #8
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
 800f22a:	460b      	mov	r3, r1
 800f22c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	32ae      	adds	r2, #174	; 0xae
 800f238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f240:	2303      	movs	r3, #3
 800f242:	e01c      	b.n	800f27e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	d115      	bne.n	800f27c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	32ae      	adds	r2, #174	; 0xae
 800f25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	32ae      	adds	r2, #174	; 0xae
 800f26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f274:	78fa      	ldrb	r2, [r7, #3]
 800f276:	4611      	mov	r1, r2
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3708      	adds	r7, #8
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f286:	b480      	push	{r7}
 800f288:	b083      	sub	sp, #12
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00e      	beq.n	800f2d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	6852      	ldr	r2, [r2, #4]
 800f2c6:	b2d2      	uxtb	r2, r2
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	4798      	blx	r3
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d001      	beq.n	800f2d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f2d4:	2303      	movs	r3, #3
 800f2d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f2e2:	b480      	push	{r7}
 800f2e4:	b083      	sub	sp, #12
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f2ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	460b      	mov	r3, r1
 800f306:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f308:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	370c      	adds	r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b086      	sub	sp, #24
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
 800f31e:	460b      	mov	r3, r1
 800f320:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f32a:	2300      	movs	r3, #0
 800f32c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	885b      	ldrh	r3, [r3, #2]
 800f332:	b29a      	uxth	r2, r3
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	b29b      	uxth	r3, r3
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d920      	bls.n	800f380 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	b29b      	uxth	r3, r3
 800f344:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f346:	e013      	b.n	800f370 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f348:	f107 030a 	add.w	r3, r7, #10
 800f34c:	4619      	mov	r1, r3
 800f34e:	6978      	ldr	r0, [r7, #20]
 800f350:	f000 f81b 	bl	800f38a <USBD_GetNextDesc>
 800f354:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	785b      	ldrb	r3, [r3, #1]
 800f35a:	2b05      	cmp	r3, #5
 800f35c:	d108      	bne.n	800f370 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	789b      	ldrb	r3, [r3, #2]
 800f366:	78fa      	ldrb	r2, [r7, #3]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d008      	beq.n	800f37e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f36c:	2300      	movs	r3, #0
 800f36e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	885b      	ldrh	r3, [r3, #2]
 800f374:	b29a      	uxth	r2, r3
 800f376:	897b      	ldrh	r3, [r7, #10]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d8e5      	bhi.n	800f348 <USBD_GetEpDesc+0x32>
 800f37c:	e000      	b.n	800f380 <USBD_GetEpDesc+0x6a>
          break;
 800f37e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f380:	693b      	ldr	r3, [r7, #16]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3718      	adds	r7, #24
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f38a:	b480      	push	{r7}
 800f38c:	b085      	sub	sp, #20
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	881a      	ldrh	r2, [r3, #0]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	4413      	add	r3, r2
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4413      	add	r3, r2
 800f3b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f3b6:	68fb      	ldr	r3, [r7, #12]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3714      	adds	r7, #20
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b087      	sub	sp, #28
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f3e2:	8a3b      	ldrh	r3, [r7, #16]
 800f3e4:	021b      	lsls	r3, r3, #8
 800f3e6:	b21a      	sxth	r2, r3
 800f3e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	b21b      	sxth	r3, r3
 800f3f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f3f2:	89fb      	ldrh	r3, [r7, #14]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	371c      	adds	r7, #28
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f416:	2b40      	cmp	r3, #64	; 0x40
 800f418:	d005      	beq.n	800f426 <USBD_StdDevReq+0x26>
 800f41a:	2b40      	cmp	r3, #64	; 0x40
 800f41c:	d857      	bhi.n	800f4ce <USBD_StdDevReq+0xce>
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d00f      	beq.n	800f442 <USBD_StdDevReq+0x42>
 800f422:	2b20      	cmp	r3, #32
 800f424:	d153      	bne.n	800f4ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	32ae      	adds	r2, #174	; 0xae
 800f430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f434:	689b      	ldr	r3, [r3, #8]
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	4798      	blx	r3
 800f43c:	4603      	mov	r3, r0
 800f43e:	73fb      	strb	r3, [r7, #15]
      break;
 800f440:	e04a      	b.n	800f4d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	785b      	ldrb	r3, [r3, #1]
 800f446:	2b09      	cmp	r3, #9
 800f448:	d83b      	bhi.n	800f4c2 <USBD_StdDevReq+0xc2>
 800f44a:	a201      	add	r2, pc, #4	; (adr r2, 800f450 <USBD_StdDevReq+0x50>)
 800f44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f450:	0800f4a5 	.word	0x0800f4a5
 800f454:	0800f4b9 	.word	0x0800f4b9
 800f458:	0800f4c3 	.word	0x0800f4c3
 800f45c:	0800f4af 	.word	0x0800f4af
 800f460:	0800f4c3 	.word	0x0800f4c3
 800f464:	0800f483 	.word	0x0800f483
 800f468:	0800f479 	.word	0x0800f479
 800f46c:	0800f4c3 	.word	0x0800f4c3
 800f470:	0800f49b 	.word	0x0800f49b
 800f474:	0800f48d 	.word	0x0800f48d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fa3c 	bl	800f8f8 <USBD_GetDescriptor>
          break;
 800f480:	e024      	b.n	800f4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f482:	6839      	ldr	r1, [r7, #0]
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f000 fba1 	bl	800fbcc <USBD_SetAddress>
          break;
 800f48a:	e01f      	b.n	800f4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f48c:	6839      	ldr	r1, [r7, #0]
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f000 fbe0 	bl	800fc54 <USBD_SetConfig>
 800f494:	4603      	mov	r3, r0
 800f496:	73fb      	strb	r3, [r7, #15]
          break;
 800f498:	e018      	b.n	800f4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f49a:	6839      	ldr	r1, [r7, #0]
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f000 fc83 	bl	800fda8 <USBD_GetConfig>
          break;
 800f4a2:	e013      	b.n	800f4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fcb4 	bl	800fe14 <USBD_GetStatus>
          break;
 800f4ac:	e00e      	b.n	800f4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 fce3 	bl	800fe7c <USBD_SetFeature>
          break;
 800f4b6:	e009      	b.n	800f4cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f4b8:	6839      	ldr	r1, [r7, #0]
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fd07 	bl	800fece <USBD_ClrFeature>
          break;
 800f4c0:	e004      	b.n	800f4cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f4c2:	6839      	ldr	r1, [r7, #0]
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fd5e 	bl	800ff86 <USBD_CtlError>
          break;
 800f4ca:	bf00      	nop
      }
      break;
 800f4cc:	e004      	b.n	800f4d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 fd58 	bl	800ff86 <USBD_CtlError>
      break;
 800f4d6:	bf00      	nop
  }

  return ret;
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop

0800f4e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f4fa:	2b40      	cmp	r3, #64	; 0x40
 800f4fc:	d005      	beq.n	800f50a <USBD_StdItfReq+0x26>
 800f4fe:	2b40      	cmp	r3, #64	; 0x40
 800f500:	d852      	bhi.n	800f5a8 <USBD_StdItfReq+0xc4>
 800f502:	2b00      	cmp	r3, #0
 800f504:	d001      	beq.n	800f50a <USBD_StdItfReq+0x26>
 800f506:	2b20      	cmp	r3, #32
 800f508:	d14e      	bne.n	800f5a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f510:	b2db      	uxtb	r3, r3
 800f512:	3b01      	subs	r3, #1
 800f514:	2b02      	cmp	r3, #2
 800f516:	d840      	bhi.n	800f59a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	889b      	ldrh	r3, [r3, #4]
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d836      	bhi.n	800f590 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	889b      	ldrh	r3, [r3, #4]
 800f526:	b2db      	uxtb	r3, r3
 800f528:	4619      	mov	r1, r3
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff fed9 	bl	800f2e2 <USBD_CoreFindIF>
 800f530:	4603      	mov	r3, r0
 800f532:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f534:	7bbb      	ldrb	r3, [r7, #14]
 800f536:	2bff      	cmp	r3, #255	; 0xff
 800f538:	d01d      	beq.n	800f576 <USBD_StdItfReq+0x92>
 800f53a:	7bbb      	ldrb	r3, [r7, #14]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d11a      	bne.n	800f576 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f540:	7bba      	ldrb	r2, [r7, #14]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	32ae      	adds	r2, #174	; 0xae
 800f546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00f      	beq.n	800f570 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f550:	7bba      	ldrb	r2, [r7, #14]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f558:	7bba      	ldrb	r2, [r7, #14]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	32ae      	adds	r2, #174	; 0xae
 800f55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	6839      	ldr	r1, [r7, #0]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	4798      	blx	r3
 800f56a:	4603      	mov	r3, r0
 800f56c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f56e:	e004      	b.n	800f57a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f570:	2303      	movs	r3, #3
 800f572:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f574:	e001      	b.n	800f57a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f576:	2303      	movs	r3, #3
 800f578:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	88db      	ldrh	r3, [r3, #6]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d110      	bne.n	800f5a4 <USBD_StdItfReq+0xc0>
 800f582:	7bfb      	ldrb	r3, [r7, #15]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10d      	bne.n	800f5a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 fdc7 	bl	801011c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f58e:	e009      	b.n	800f5a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fcf7 	bl	800ff86 <USBD_CtlError>
          break;
 800f598:	e004      	b.n	800f5a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f59a:	6839      	ldr	r1, [r7, #0]
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 fcf2 	bl	800ff86 <USBD_CtlError>
          break;
 800f5a2:	e000      	b.n	800f5a6 <USBD_StdItfReq+0xc2>
          break;
 800f5a4:	bf00      	nop
      }
      break;
 800f5a6:	e004      	b.n	800f5b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fceb 	bl	800ff86 <USBD_CtlError>
      break;
 800f5b0:	bf00      	nop
  }

  return ret;
 800f5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3710      	adds	r7, #16
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	889b      	ldrh	r3, [r3, #4]
 800f5ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f5d8:	2b40      	cmp	r3, #64	; 0x40
 800f5da:	d007      	beq.n	800f5ec <USBD_StdEPReq+0x30>
 800f5dc:	2b40      	cmp	r3, #64	; 0x40
 800f5de:	f200 817f 	bhi.w	800f8e0 <USBD_StdEPReq+0x324>
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d02a      	beq.n	800f63c <USBD_StdEPReq+0x80>
 800f5e6:	2b20      	cmp	r3, #32
 800f5e8:	f040 817a 	bne.w	800f8e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f5ec:	7bbb      	ldrb	r3, [r7, #14]
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff fe83 	bl	800f2fc <USBD_CoreFindEP>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5fa:	7b7b      	ldrb	r3, [r7, #13]
 800f5fc:	2bff      	cmp	r3, #255	; 0xff
 800f5fe:	f000 8174 	beq.w	800f8ea <USBD_StdEPReq+0x32e>
 800f602:	7b7b      	ldrb	r3, [r7, #13]
 800f604:	2b00      	cmp	r3, #0
 800f606:	f040 8170 	bne.w	800f8ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f60a:	7b7a      	ldrb	r2, [r7, #13]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f612:	7b7a      	ldrb	r2, [r7, #13]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	32ae      	adds	r2, #174	; 0xae
 800f618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f61c:	689b      	ldr	r3, [r3, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f000 8163 	beq.w	800f8ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f624:	7b7a      	ldrb	r2, [r7, #13]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	32ae      	adds	r2, #174	; 0xae
 800f62a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	6839      	ldr	r1, [r7, #0]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	4798      	blx	r3
 800f636:	4603      	mov	r3, r0
 800f638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f63a:	e156      	b.n	800f8ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	785b      	ldrb	r3, [r3, #1]
 800f640:	2b03      	cmp	r3, #3
 800f642:	d008      	beq.n	800f656 <USBD_StdEPReq+0x9a>
 800f644:	2b03      	cmp	r3, #3
 800f646:	f300 8145 	bgt.w	800f8d4 <USBD_StdEPReq+0x318>
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	f000 809b 	beq.w	800f786 <USBD_StdEPReq+0x1ca>
 800f650:	2b01      	cmp	r3, #1
 800f652:	d03c      	beq.n	800f6ce <USBD_StdEPReq+0x112>
 800f654:	e13e      	b.n	800f8d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	2b02      	cmp	r3, #2
 800f660:	d002      	beq.n	800f668 <USBD_StdEPReq+0xac>
 800f662:	2b03      	cmp	r3, #3
 800f664:	d016      	beq.n	800f694 <USBD_StdEPReq+0xd8>
 800f666:	e02c      	b.n	800f6c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f668:	7bbb      	ldrb	r3, [r7, #14]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00d      	beq.n	800f68a <USBD_StdEPReq+0xce>
 800f66e:	7bbb      	ldrb	r3, [r7, #14]
 800f670:	2b80      	cmp	r3, #128	; 0x80
 800f672:	d00a      	beq.n	800f68a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f674:	7bbb      	ldrb	r3, [r7, #14]
 800f676:	4619      	mov	r1, r3
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f005 f9d9 	bl	8014a30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f67e:	2180      	movs	r1, #128	; 0x80
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f005 f9d5 	bl	8014a30 <USBD_LL_StallEP>
 800f686:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f688:	e020      	b.n	800f6cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f68a:	6839      	ldr	r1, [r7, #0]
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 fc7a 	bl	800ff86 <USBD_CtlError>
              break;
 800f692:	e01b      	b.n	800f6cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	885b      	ldrh	r3, [r3, #2]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d10e      	bne.n	800f6ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f69c:	7bbb      	ldrb	r3, [r7, #14]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00b      	beq.n	800f6ba <USBD_StdEPReq+0xfe>
 800f6a2:	7bbb      	ldrb	r3, [r7, #14]
 800f6a4:	2b80      	cmp	r3, #128	; 0x80
 800f6a6:	d008      	beq.n	800f6ba <USBD_StdEPReq+0xfe>
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	88db      	ldrh	r3, [r3, #6]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d104      	bne.n	800f6ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6b0:	7bbb      	ldrb	r3, [r7, #14]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f005 f9bb 	bl	8014a30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 fd2e 	bl	801011c <USBD_CtlSendStatus>

              break;
 800f6c0:	e004      	b.n	800f6cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f6c2:	6839      	ldr	r1, [r7, #0]
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 fc5e 	bl	800ff86 <USBD_CtlError>
              break;
 800f6ca:	bf00      	nop
          }
          break;
 800f6cc:	e107      	b.n	800f8de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	d002      	beq.n	800f6e0 <USBD_StdEPReq+0x124>
 800f6da:	2b03      	cmp	r3, #3
 800f6dc:	d016      	beq.n	800f70c <USBD_StdEPReq+0x150>
 800f6de:	e04b      	b.n	800f778 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6e0:	7bbb      	ldrb	r3, [r7, #14]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00d      	beq.n	800f702 <USBD_StdEPReq+0x146>
 800f6e6:	7bbb      	ldrb	r3, [r7, #14]
 800f6e8:	2b80      	cmp	r3, #128	; 0x80
 800f6ea:	d00a      	beq.n	800f702 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6ec:	7bbb      	ldrb	r3, [r7, #14]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f005 f99d 	bl	8014a30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6f6:	2180      	movs	r1, #128	; 0x80
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f005 f999 	bl	8014a30 <USBD_LL_StallEP>
 800f6fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f700:	e040      	b.n	800f784 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fc3e 	bl	800ff86 <USBD_CtlError>
              break;
 800f70a:	e03b      	b.n	800f784 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	885b      	ldrh	r3, [r3, #2]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d136      	bne.n	800f782 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f714:	7bbb      	ldrb	r3, [r7, #14]
 800f716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d004      	beq.n	800f728 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f71e:	7bbb      	ldrb	r3, [r7, #14]
 800f720:	4619      	mov	r1, r3
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f005 f9a3 	bl	8014a6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 fcf7 	bl	801011c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f72e:	7bbb      	ldrb	r3, [r7, #14]
 800f730:	4619      	mov	r1, r3
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7ff fde2 	bl	800f2fc <USBD_CoreFindEP>
 800f738:	4603      	mov	r3, r0
 800f73a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f73c:	7b7b      	ldrb	r3, [r7, #13]
 800f73e:	2bff      	cmp	r3, #255	; 0xff
 800f740:	d01f      	beq.n	800f782 <USBD_StdEPReq+0x1c6>
 800f742:	7b7b      	ldrb	r3, [r7, #13]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d11c      	bne.n	800f782 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f748:	7b7a      	ldrb	r2, [r7, #13]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f750:	7b7a      	ldrb	r2, [r7, #13]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	32ae      	adds	r2, #174	; 0xae
 800f756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d010      	beq.n	800f782 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f760:	7b7a      	ldrb	r2, [r7, #13]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	32ae      	adds	r2, #174	; 0xae
 800f766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	6839      	ldr	r1, [r7, #0]
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	4798      	blx	r3
 800f772:	4603      	mov	r3, r0
 800f774:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f776:	e004      	b.n	800f782 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f778:	6839      	ldr	r1, [r7, #0]
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 fc03 	bl	800ff86 <USBD_CtlError>
              break;
 800f780:	e000      	b.n	800f784 <USBD_StdEPReq+0x1c8>
              break;
 800f782:	bf00      	nop
          }
          break;
 800f784:	e0ab      	b.n	800f8de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d002      	beq.n	800f798 <USBD_StdEPReq+0x1dc>
 800f792:	2b03      	cmp	r3, #3
 800f794:	d032      	beq.n	800f7fc <USBD_StdEPReq+0x240>
 800f796:	e097      	b.n	800f8c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f798:	7bbb      	ldrb	r3, [r7, #14]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d007      	beq.n	800f7ae <USBD_StdEPReq+0x1f2>
 800f79e:	7bbb      	ldrb	r3, [r7, #14]
 800f7a0:	2b80      	cmp	r3, #128	; 0x80
 800f7a2:	d004      	beq.n	800f7ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 fbed 	bl	800ff86 <USBD_CtlError>
                break;
 800f7ac:	e091      	b.n	800f8d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	da0b      	bge.n	800f7ce <USBD_StdEPReq+0x212>
 800f7b6:	7bbb      	ldrb	r3, [r7, #14]
 800f7b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f7bc:	4613      	mov	r3, r2
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	4413      	add	r3, r2
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	3310      	adds	r3, #16
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	3304      	adds	r3, #4
 800f7cc:	e00b      	b.n	800f7e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f7ce:	7bbb      	ldrb	r3, [r7, #14]
 800f7d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7d4:	4613      	mov	r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4413      	add	r3, r2
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	2202      	movs	r2, #2
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 fc37 	bl	8010068 <USBD_CtlSendData>
              break;
 800f7fa:	e06a      	b.n	800f8d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f7fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f800:	2b00      	cmp	r3, #0
 800f802:	da11      	bge.n	800f828 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f804:	7bbb      	ldrb	r3, [r7, #14]
 800f806:	f003 020f 	and.w	r2, r3, #15
 800f80a:	6879      	ldr	r1, [r7, #4]
 800f80c:	4613      	mov	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	009b      	lsls	r3, r3, #2
 800f814:	440b      	add	r3, r1
 800f816:	3324      	adds	r3, #36	; 0x24
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d117      	bne.n	800f84e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f81e:	6839      	ldr	r1, [r7, #0]
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f000 fbb0 	bl	800ff86 <USBD_CtlError>
                  break;
 800f826:	e054      	b.n	800f8d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f828:	7bbb      	ldrb	r3, [r7, #14]
 800f82a:	f003 020f 	and.w	r2, r3, #15
 800f82e:	6879      	ldr	r1, [r7, #4]
 800f830:	4613      	mov	r3, r2
 800f832:	009b      	lsls	r3, r3, #2
 800f834:	4413      	add	r3, r2
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	440b      	add	r3, r1
 800f83a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f83e:	881b      	ldrh	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d104      	bne.n	800f84e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f844:	6839      	ldr	r1, [r7, #0]
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 fb9d 	bl	800ff86 <USBD_CtlError>
                  break;
 800f84c:	e041      	b.n	800f8d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f84e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f852:	2b00      	cmp	r3, #0
 800f854:	da0b      	bge.n	800f86e <USBD_StdEPReq+0x2b2>
 800f856:	7bbb      	ldrb	r3, [r7, #14]
 800f858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f85c:	4613      	mov	r3, r2
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	4413      	add	r3, r2
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	3310      	adds	r3, #16
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	4413      	add	r3, r2
 800f86a:	3304      	adds	r3, #4
 800f86c:	e00b      	b.n	800f886 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f86e:	7bbb      	ldrb	r3, [r7, #14]
 800f870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f874:	4613      	mov	r3, r2
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	4413      	add	r3, r2
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	4413      	add	r3, r2
 800f884:	3304      	adds	r3, #4
 800f886:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f888:	7bbb      	ldrb	r3, [r7, #14]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <USBD_StdEPReq+0x2d8>
 800f88e:	7bbb      	ldrb	r3, [r7, #14]
 800f890:	2b80      	cmp	r3, #128	; 0x80
 800f892:	d103      	bne.n	800f89c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	2200      	movs	r2, #0
 800f898:	601a      	str	r2, [r3, #0]
 800f89a:	e00e      	b.n	800f8ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f89c:	7bbb      	ldrb	r3, [r7, #14]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f005 f903 	bl	8014aac <USBD_LL_IsStallEP>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d003      	beq.n	800f8b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	601a      	str	r2, [r3, #0]
 800f8b2:	e002      	b.n	800f8ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	2202      	movs	r2, #2
 800f8be:	4619      	mov	r1, r3
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fbd1 	bl	8010068 <USBD_CtlSendData>
              break;
 800f8c6:	e004      	b.n	800f8d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 fb5b 	bl	800ff86 <USBD_CtlError>
              break;
 800f8d0:	bf00      	nop
          }
          break;
 800f8d2:	e004      	b.n	800f8de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f8d4:	6839      	ldr	r1, [r7, #0]
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fb55 	bl	800ff86 <USBD_CtlError>
          break;
 800f8dc:	bf00      	nop
      }
      break;
 800f8de:	e005      	b.n	800f8ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f8e0:	6839      	ldr	r1, [r7, #0]
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f000 fb4f 	bl	800ff86 <USBD_CtlError>
      break;
 800f8e8:	e000      	b.n	800f8ec <USBD_StdEPReq+0x330>
      break;
 800f8ea:	bf00      	nop
  }

  return ret;
 800f8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3710      	adds	r7, #16
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
	...

0800f8f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f902:	2300      	movs	r3, #0
 800f904:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f906:	2300      	movs	r3, #0
 800f908:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f90a:	2300      	movs	r3, #0
 800f90c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	885b      	ldrh	r3, [r3, #2]
 800f912:	0a1b      	lsrs	r3, r3, #8
 800f914:	b29b      	uxth	r3, r3
 800f916:	3b01      	subs	r3, #1
 800f918:	2b06      	cmp	r3, #6
 800f91a:	f200 8128 	bhi.w	800fb6e <USBD_GetDescriptor+0x276>
 800f91e:	a201      	add	r2, pc, #4	; (adr r2, 800f924 <USBD_GetDescriptor+0x2c>)
 800f920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f924:	0800f941 	.word	0x0800f941
 800f928:	0800f959 	.word	0x0800f959
 800f92c:	0800f999 	.word	0x0800f999
 800f930:	0800fb6f 	.word	0x0800fb6f
 800f934:	0800fb6f 	.word	0x0800fb6f
 800f938:	0800fb0f 	.word	0x0800fb0f
 800f93c:	0800fb3b 	.word	0x0800fb3b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	7c12      	ldrb	r2, [r2, #16]
 800f94c:	f107 0108 	add.w	r1, r7, #8
 800f950:	4610      	mov	r0, r2
 800f952:	4798      	blx	r3
 800f954:	60f8      	str	r0, [r7, #12]
      break;
 800f956:	e112      	b.n	800fb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	7c1b      	ldrb	r3, [r3, #16]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10d      	bne.n	800f97c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f968:	f107 0208 	add.w	r2, r7, #8
 800f96c:	4610      	mov	r0, r2
 800f96e:	4798      	blx	r3
 800f970:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	3301      	adds	r3, #1
 800f976:	2202      	movs	r2, #2
 800f978:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f97a:	e100      	b.n	800fb7e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f984:	f107 0208 	add.w	r2, r7, #8
 800f988:	4610      	mov	r0, r2
 800f98a:	4798      	blx	r3
 800f98c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3301      	adds	r3, #1
 800f992:	2202      	movs	r2, #2
 800f994:	701a      	strb	r2, [r3, #0]
      break;
 800f996:	e0f2      	b.n	800fb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	885b      	ldrh	r3, [r3, #2]
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	f200 80ac 	bhi.w	800fafc <USBD_GetDescriptor+0x204>
 800f9a4:	a201      	add	r2, pc, #4	; (adr r2, 800f9ac <USBD_GetDescriptor+0xb4>)
 800f9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9aa:	bf00      	nop
 800f9ac:	0800f9c5 	.word	0x0800f9c5
 800f9b0:	0800f9f9 	.word	0x0800f9f9
 800f9b4:	0800fa2d 	.word	0x0800fa2d
 800f9b8:	0800fa61 	.word	0x0800fa61
 800f9bc:	0800fa95 	.word	0x0800fa95
 800f9c0:	0800fac9 	.word	0x0800fac9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00b      	beq.n	800f9e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	7c12      	ldrb	r2, [r2, #16]
 800f9dc:	f107 0108 	add.w	r1, r7, #8
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	4798      	blx	r3
 800f9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9e6:	e091      	b.n	800fb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9e8:	6839      	ldr	r1, [r7, #0]
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 facb 	bl	800ff86 <USBD_CtlError>
            err++;
 800f9f0:	7afb      	ldrb	r3, [r7, #11]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f9f6:	e089      	b.n	800fb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00b      	beq.n	800fa1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa0a:	689b      	ldr	r3, [r3, #8]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	7c12      	ldrb	r2, [r2, #16]
 800fa10:	f107 0108 	add.w	r1, r7, #8
 800fa14:	4610      	mov	r0, r2
 800fa16:	4798      	blx	r3
 800fa18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa1a:	e077      	b.n	800fb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa1c:	6839      	ldr	r1, [r7, #0]
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f000 fab1 	bl	800ff86 <USBD_CtlError>
            err++;
 800fa24:	7afb      	ldrb	r3, [r7, #11]
 800fa26:	3301      	adds	r3, #1
 800fa28:	72fb      	strb	r3, [r7, #11]
          break;
 800fa2a:	e06f      	b.n	800fb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00b      	beq.n	800fa50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	7c12      	ldrb	r2, [r2, #16]
 800fa44:	f107 0108 	add.w	r1, r7, #8
 800fa48:	4610      	mov	r0, r2
 800fa4a:	4798      	blx	r3
 800fa4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa4e:	e05d      	b.n	800fb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fa97 	bl	800ff86 <USBD_CtlError>
            err++;
 800fa58:	7afb      	ldrb	r3, [r7, #11]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	72fb      	strb	r3, [r7, #11]
          break;
 800fa5e:	e055      	b.n	800fb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00b      	beq.n	800fa84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa72:	691b      	ldr	r3, [r3, #16]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	7c12      	ldrb	r2, [r2, #16]
 800fa78:	f107 0108 	add.w	r1, r7, #8
 800fa7c:	4610      	mov	r0, r2
 800fa7e:	4798      	blx	r3
 800fa80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa82:	e043      	b.n	800fb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa84:	6839      	ldr	r1, [r7, #0]
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 fa7d 	bl	800ff86 <USBD_CtlError>
            err++;
 800fa8c:	7afb      	ldrb	r3, [r7, #11]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	72fb      	strb	r3, [r7, #11]
          break;
 800fa92:	e03b      	b.n	800fb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa9a:	695b      	ldr	r3, [r3, #20]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00b      	beq.n	800fab8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faa6:	695b      	ldr	r3, [r3, #20]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	7c12      	ldrb	r2, [r2, #16]
 800faac:	f107 0108 	add.w	r1, r7, #8
 800fab0:	4610      	mov	r0, r2
 800fab2:	4798      	blx	r3
 800fab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fab6:	e029      	b.n	800fb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fab8:	6839      	ldr	r1, [r7, #0]
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fa63 	bl	800ff86 <USBD_CtlError>
            err++;
 800fac0:	7afb      	ldrb	r3, [r7, #11]
 800fac2:	3301      	adds	r3, #1
 800fac4:	72fb      	strb	r3, [r7, #11]
          break;
 800fac6:	e021      	b.n	800fb0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800face:	699b      	ldr	r3, [r3, #24]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00b      	beq.n	800faec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fada:	699b      	ldr	r3, [r3, #24]
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	7c12      	ldrb	r2, [r2, #16]
 800fae0:	f107 0108 	add.w	r1, r7, #8
 800fae4:	4610      	mov	r0, r2
 800fae6:	4798      	blx	r3
 800fae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faea:	e00f      	b.n	800fb0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 fa49 	bl	800ff86 <USBD_CtlError>
            err++;
 800faf4:	7afb      	ldrb	r3, [r7, #11]
 800faf6:	3301      	adds	r3, #1
 800faf8:	72fb      	strb	r3, [r7, #11]
          break;
 800fafa:	e007      	b.n	800fb0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fafc:	6839      	ldr	r1, [r7, #0]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fa41 	bl	800ff86 <USBD_CtlError>
          err++;
 800fb04:	7afb      	ldrb	r3, [r7, #11]
 800fb06:	3301      	adds	r3, #1
 800fb08:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fb0a:	bf00      	nop
      }
      break;
 800fb0c:	e037      	b.n	800fb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	7c1b      	ldrb	r3, [r3, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d109      	bne.n	800fb2a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb1e:	f107 0208 	add.w	r2, r7, #8
 800fb22:	4610      	mov	r0, r2
 800fb24:	4798      	blx	r3
 800fb26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb28:	e029      	b.n	800fb7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fa2a 	bl	800ff86 <USBD_CtlError>
        err++;
 800fb32:	7afb      	ldrb	r3, [r7, #11]
 800fb34:	3301      	adds	r3, #1
 800fb36:	72fb      	strb	r3, [r7, #11]
      break;
 800fb38:	e021      	b.n	800fb7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	7c1b      	ldrb	r3, [r3, #16]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10d      	bne.n	800fb5e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb4a:	f107 0208 	add.w	r2, r7, #8
 800fb4e:	4610      	mov	r0, r2
 800fb50:	4798      	blx	r3
 800fb52:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	3301      	adds	r3, #1
 800fb58:	2207      	movs	r2, #7
 800fb5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb5c:	e00f      	b.n	800fb7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 fa10 	bl	800ff86 <USBD_CtlError>
        err++;
 800fb66:	7afb      	ldrb	r3, [r7, #11]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	72fb      	strb	r3, [r7, #11]
      break;
 800fb6c:	e007      	b.n	800fb7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fb6e:	6839      	ldr	r1, [r7, #0]
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fa08 	bl	800ff86 <USBD_CtlError>
      err++;
 800fb76:	7afb      	ldrb	r3, [r7, #11]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	72fb      	strb	r3, [r7, #11]
      break;
 800fb7c:	bf00      	nop
  }

  if (err != 0U)
 800fb7e:	7afb      	ldrb	r3, [r7, #11]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d11e      	bne.n	800fbc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	88db      	ldrh	r3, [r3, #6]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d016      	beq.n	800fbba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fb8c:	893b      	ldrh	r3, [r7, #8]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d00e      	beq.n	800fbb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	88da      	ldrh	r2, [r3, #6]
 800fb96:	893b      	ldrh	r3, [r7, #8]
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	bf28      	it	cs
 800fb9c:	4613      	movcs	r3, r2
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fba2:	893b      	ldrh	r3, [r7, #8]
 800fba4:	461a      	mov	r2, r3
 800fba6:	68f9      	ldr	r1, [r7, #12]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 fa5d 	bl	8010068 <USBD_CtlSendData>
 800fbae:	e009      	b.n	800fbc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f9e7 	bl	800ff86 <USBD_CtlError>
 800fbb8:	e004      	b.n	800fbc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 faae 	bl	801011c <USBD_CtlSendStatus>
 800fbc0:	e000      	b.n	800fbc4 <USBD_GetDescriptor+0x2cc>
    return;
 800fbc2:	bf00      	nop
  }
}
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop

0800fbcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	889b      	ldrh	r3, [r3, #4]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d131      	bne.n	800fc42 <USBD_SetAddress+0x76>
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	88db      	ldrh	r3, [r3, #6]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d12d      	bne.n	800fc42 <USBD_SetAddress+0x76>
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	885b      	ldrh	r3, [r3, #2]
 800fbea:	2b7f      	cmp	r3, #127	; 0x7f
 800fbec:	d829      	bhi.n	800fc42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	885b      	ldrh	r3, [r3, #2]
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	2b03      	cmp	r3, #3
 800fc04:	d104      	bne.n	800fc10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fc06:	6839      	ldr	r1, [r7, #0]
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f9bc 	bl	800ff86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc0e:	e01d      	b.n	800fc4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	7bfa      	ldrb	r2, [r7, #15]
 800fc14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f004 ff71 	bl	8014b04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fa7a 	bl	801011c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d004      	beq.n	800fc38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2202      	movs	r2, #2
 800fc32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc36:	e009      	b.n	800fc4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc40:	e004      	b.n	800fc4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fc42:	6839      	ldr	r1, [r7, #0]
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 f99e 	bl	800ff86 <USBD_CtlError>
  }
}
 800fc4a:	bf00      	nop
 800fc4c:	bf00      	nop
 800fc4e:	3710      	adds	r7, #16
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	885b      	ldrh	r3, [r3, #2]
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	4b4e      	ldr	r3, [pc, #312]	; (800fda4 <USBD_SetConfig+0x150>)
 800fc6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fc6c:	4b4d      	ldr	r3, [pc, #308]	; (800fda4 <USBD_SetConfig+0x150>)
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d905      	bls.n	800fc80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fc74:	6839      	ldr	r1, [r7, #0]
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f985 	bl	800ff86 <USBD_CtlError>
    return USBD_FAIL;
 800fc7c:	2303      	movs	r3, #3
 800fc7e:	e08c      	b.n	800fd9a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b02      	cmp	r3, #2
 800fc8a:	d002      	beq.n	800fc92 <USBD_SetConfig+0x3e>
 800fc8c:	2b03      	cmp	r3, #3
 800fc8e:	d029      	beq.n	800fce4 <USBD_SetConfig+0x90>
 800fc90:	e075      	b.n	800fd7e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fc92:	4b44      	ldr	r3, [pc, #272]	; (800fda4 <USBD_SetConfig+0x150>)
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d020      	beq.n	800fcdc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fc9a:	4b42      	ldr	r3, [pc, #264]	; (800fda4 <USBD_SetConfig+0x150>)
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fca4:	4b3f      	ldr	r3, [pc, #252]	; (800fda4 <USBD_SetConfig+0x150>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	4619      	mov	r1, r3
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7fe ffe7 	bl	800ec7e <USBD_SetClassConfig>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fcb4:	7bfb      	ldrb	r3, [r7, #15]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d008      	beq.n	800fccc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fcba:	6839      	ldr	r1, [r7, #0]
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 f962 	bl	800ff86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2202      	movs	r2, #2
 800fcc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fcca:	e065      	b.n	800fd98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fa25 	bl	801011c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2203      	movs	r2, #3
 800fcd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fcda:	e05d      	b.n	800fd98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 fa1d 	bl	801011c <USBD_CtlSendStatus>
      break;
 800fce2:	e059      	b.n	800fd98 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fce4:	4b2f      	ldr	r3, [pc, #188]	; (800fda4 <USBD_SetConfig+0x150>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d112      	bne.n	800fd12 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2202      	movs	r2, #2
 800fcf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fcf4:	4b2b      	ldr	r3, [pc, #172]	; (800fda4 <USBD_SetConfig+0x150>)
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fcfe:	4b29      	ldr	r3, [pc, #164]	; (800fda4 <USBD_SetConfig+0x150>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	4619      	mov	r1, r3
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f7fe ffd6 	bl	800ecb6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 fa06 	bl	801011c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd10:	e042      	b.n	800fd98 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fd12:	4b24      	ldr	r3, [pc, #144]	; (800fda4 <USBD_SetConfig+0x150>)
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	461a      	mov	r2, r3
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d02a      	beq.n	800fd76 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	4619      	mov	r1, r3
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7fe ffc4 	bl	800ecb6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fd2e:	4b1d      	ldr	r3, [pc, #116]	; (800fda4 <USBD_SetConfig+0x150>)
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	461a      	mov	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd38:	4b1a      	ldr	r3, [pc, #104]	; (800fda4 <USBD_SetConfig+0x150>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7fe ff9d 	bl	800ec7e <USBD_SetClassConfig>
 800fd44:	4603      	mov	r3, r0
 800fd46:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fd48:	7bfb      	ldrb	r3, [r7, #15]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00f      	beq.n	800fd6e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 f918 	bl	800ff86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f7fe ffa9 	bl	800ecb6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2202      	movs	r2, #2
 800fd68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fd6c:	e014      	b.n	800fd98 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 f9d4 	bl	801011c <USBD_CtlSendStatus>
      break;
 800fd74:	e010      	b.n	800fd98 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 f9d0 	bl	801011c <USBD_CtlSendStatus>
      break;
 800fd7c:	e00c      	b.n	800fd98 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 f900 	bl	800ff86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fd86:	4b07      	ldr	r3, [pc, #28]	; (800fda4 <USBD_SetConfig+0x150>)
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7fe ff92 	bl	800ecb6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fd92:	2303      	movs	r3, #3
 800fd94:	73fb      	strb	r3, [r7, #15]
      break;
 800fd96:	bf00      	nop
  }

  return ret;
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	20001b7c 	.word	0x20001b7c

0800fda8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	88db      	ldrh	r3, [r3, #6]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d004      	beq.n	800fdc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fdba:	6839      	ldr	r1, [r7, #0]
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 f8e2 	bl	800ff86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fdc2:	e023      	b.n	800fe0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	dc02      	bgt.n	800fdd6 <USBD_GetConfig+0x2e>
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	dc03      	bgt.n	800fddc <USBD_GetConfig+0x34>
 800fdd4:	e015      	b.n	800fe02 <USBD_GetConfig+0x5a>
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d00b      	beq.n	800fdf2 <USBD_GetConfig+0x4a>
 800fdda:	e012      	b.n	800fe02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3308      	adds	r3, #8
 800fde6:	2201      	movs	r2, #1
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 f93c 	bl	8010068 <USBD_CtlSendData>
        break;
 800fdf0:	e00c      	b.n	800fe0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3304      	adds	r3, #4
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 f934 	bl	8010068 <USBD_CtlSendData>
        break;
 800fe00:	e004      	b.n	800fe0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fe02:	6839      	ldr	r1, [r7, #0]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 f8be 	bl	800ff86 <USBD_CtlError>
        break;
 800fe0a:	bf00      	nop
}
 800fe0c:	bf00      	nop
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
 800fe1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	3b01      	subs	r3, #1
 800fe28:	2b02      	cmp	r3, #2
 800fe2a:	d81e      	bhi.n	800fe6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	88db      	ldrh	r3, [r3, #6]
 800fe30:	2b02      	cmp	r3, #2
 800fe32:	d004      	beq.n	800fe3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fe34:	6839      	ldr	r1, [r7, #0]
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 f8a5 	bl	800ff86 <USBD_CtlError>
        break;
 800fe3c:	e01a      	b.n	800fe74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2201      	movs	r2, #1
 800fe42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d005      	beq.n	800fe5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	f043 0202 	orr.w	r2, r3, #2
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	330c      	adds	r3, #12
 800fe5e:	2202      	movs	r2, #2
 800fe60:	4619      	mov	r1, r3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 f900 	bl	8010068 <USBD_CtlSendData>
      break;
 800fe68:	e004      	b.n	800fe74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fe6a:	6839      	ldr	r1, [r7, #0]
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 f88a 	bl	800ff86 <USBD_CtlError>
      break;
 800fe72:	bf00      	nop
  }
}
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	885b      	ldrh	r3, [r3, #2]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d107      	bne.n	800fe9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2201      	movs	r2, #1
 800fe92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f940 	bl	801011c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fe9c:	e013      	b.n	800fec6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	885b      	ldrh	r3, [r3, #2]
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d10b      	bne.n	800febe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	889b      	ldrh	r3, [r3, #4]
 800feaa:	0a1b      	lsrs	r3, r3, #8
 800feac:	b29b      	uxth	r3, r3
 800feae:	b2da      	uxtb	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f930 	bl	801011c <USBD_CtlSendStatus>
}
 800febc:	e003      	b.n	800fec6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800febe:	6839      	ldr	r1, [r7, #0]
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 f860 	bl	800ff86 <USBD_CtlError>
}
 800fec6:	bf00      	nop
 800fec8:	3708      	adds	r7, #8
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fece:	b580      	push	{r7, lr}
 800fed0:	b082      	sub	sp, #8
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	3b01      	subs	r3, #1
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d80b      	bhi.n	800fefe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	885b      	ldrh	r3, [r3, #2]
 800feea:	2b01      	cmp	r3, #1
 800feec:	d10c      	bne.n	800ff08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 f910 	bl	801011c <USBD_CtlSendStatus>
      }
      break;
 800fefc:	e004      	b.n	800ff08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fefe:	6839      	ldr	r1, [r7, #0]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 f840 	bl	800ff86 <USBD_CtlError>
      break;
 800ff06:	e000      	b.n	800ff0a <USBD_ClrFeature+0x3c>
      break;
 800ff08:	bf00      	nop
  }
}
 800ff0a:	bf00      	nop
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b084      	sub	sp, #16
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
 800ff1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	781a      	ldrb	r2, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	781a      	ldrb	r2, [r3, #0]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f7ff fa41 	bl	800f3c4 <SWAPBYTE>
 800ff42:	4603      	mov	r3, r0
 800ff44:	461a      	mov	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	3301      	adds	r3, #1
 800ff54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7ff fa34 	bl	800f3c4 <SWAPBYTE>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	3301      	adds	r3, #1
 800ff68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f7ff fa27 	bl	800f3c4 <SWAPBYTE>
 800ff76:	4603      	mov	r3, r0
 800ff78:	461a      	mov	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	80da      	strh	r2, [r3, #6]
}
 800ff7e:	bf00      	nop
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b082      	sub	sp, #8
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
 800ff8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff90:	2180      	movs	r1, #128	; 0x80
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f004 fd4c 	bl	8014a30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ff98:	2100      	movs	r1, #0
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f004 fd48 	bl	8014a30 <USBD_LL_StallEP>
}
 800ffa0:	bf00      	nop
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d036      	beq.n	801002c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ffc2:	6938      	ldr	r0, [r7, #16]
 800ffc4:	f000 f836 	bl	8010034 <USBD_GetLen>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	3301      	adds	r3, #1
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	005b      	lsls	r3, r3, #1
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ffd6:	7dfb      	ldrb	r3, [r7, #23]
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	4413      	add	r3, r2
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	7812      	ldrb	r2, [r2, #0]
 800ffe0:	701a      	strb	r2, [r3, #0]
  idx++;
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ffe8:	7dfb      	ldrb	r3, [r7, #23]
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	4413      	add	r3, r2
 800ffee:	2203      	movs	r2, #3
 800fff0:	701a      	strb	r2, [r3, #0]
  idx++;
 800fff2:	7dfb      	ldrb	r3, [r7, #23]
 800fff4:	3301      	adds	r3, #1
 800fff6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fff8:	e013      	b.n	8010022 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	4413      	add	r3, r2
 8010000:	693a      	ldr	r2, [r7, #16]
 8010002:	7812      	ldrb	r2, [r2, #0]
 8010004:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	3301      	adds	r3, #1
 801000a:	613b      	str	r3, [r7, #16]
    idx++;
 801000c:	7dfb      	ldrb	r3, [r7, #23]
 801000e:	3301      	adds	r3, #1
 8010010:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010012:	7dfb      	ldrb	r3, [r7, #23]
 8010014:	68ba      	ldr	r2, [r7, #8]
 8010016:	4413      	add	r3, r2
 8010018:	2200      	movs	r2, #0
 801001a:	701a      	strb	r2, [r3, #0]
    idx++;
 801001c:	7dfb      	ldrb	r3, [r7, #23]
 801001e:	3301      	adds	r3, #1
 8010020:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d1e7      	bne.n	800fffa <USBD_GetString+0x52>
 801002a:	e000      	b.n	801002e <USBD_GetString+0x86>
    return;
 801002c:	bf00      	nop
  }
}
 801002e:	3718      	adds	r7, #24
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801003c:	2300      	movs	r3, #0
 801003e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010044:	e005      	b.n	8010052 <USBD_GetLen+0x1e>
  {
    len++;
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	3301      	adds	r3, #1
 801004a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	3301      	adds	r3, #1
 8010050:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d1f5      	bne.n	8010046 <USBD_GetLen+0x12>
  }

  return len;
 801005a:	7bfb      	ldrb	r3, [r7, #15]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2202      	movs	r2, #2
 8010078:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	68ba      	ldr	r2, [r7, #8]
 801008c:	2100      	movs	r1, #0
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f004 fd57 	bl	8014b42 <USBD_LL_Transmit>

  return USBD_OK;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b084      	sub	sp, #16
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	60f8      	str	r0, [r7, #12]
 80100a6:	60b9      	str	r1, [r7, #8]
 80100a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	68ba      	ldr	r2, [r7, #8]
 80100ae:	2100      	movs	r1, #0
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	f004 fd46 	bl	8014b42 <USBD_LL_Transmit>

  return USBD_OK;
 80100b6:	2300      	movs	r3, #0
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2203      	movs	r2, #3
 80100d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	2100      	movs	r1, #0
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f004 fd4a 	bl	8014b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}

080100fa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80100fa:	b580      	push	{r7, lr}
 80100fc:	b084      	sub	sp, #16
 80100fe:	af00      	add	r7, sp, #0
 8010100:	60f8      	str	r0, [r7, #12]
 8010102:	60b9      	str	r1, [r7, #8]
 8010104:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	68ba      	ldr	r2, [r7, #8]
 801010a:	2100      	movs	r1, #0
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f004 fd39 	bl	8014b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2204      	movs	r2, #4
 8010128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801012c:	2300      	movs	r3, #0
 801012e:	2200      	movs	r2, #0
 8010130:	2100      	movs	r1, #0
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f004 fd05 	bl	8014b42 <USBD_LL_Transmit>

  return USBD_OK;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b082      	sub	sp, #8
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2205      	movs	r2, #5
 801014e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010152:	2300      	movs	r3, #0
 8010154:	2200      	movs	r2, #0
 8010156:	2100      	movs	r1, #0
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f004 fd13 	bl	8014b84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	4603      	mov	r3, r0
 8010170:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010172:	79fb      	ldrb	r3, [r7, #7]
 8010174:	4a08      	ldr	r2, [pc, #32]	; (8010198 <disk_status+0x30>)
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	4413      	add	r3, r2
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	79fa      	ldrb	r2, [r7, #7]
 8010180:	4905      	ldr	r1, [pc, #20]	; (8010198 <disk_status+0x30>)
 8010182:	440a      	add	r2, r1
 8010184:	7a12      	ldrb	r2, [r2, #8]
 8010186:	4610      	mov	r0, r2
 8010188:	4798      	blx	r3
 801018a:	4603      	mov	r3, r0
 801018c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801018e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010190:	4618      	mov	r0, r3
 8010192:	3710      	adds	r7, #16
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	20001cac 	.word	0x20001cac

0801019c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80101a6:	2300      	movs	r3, #0
 80101a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80101aa:	79fb      	ldrb	r3, [r7, #7]
 80101ac:	4a0d      	ldr	r2, [pc, #52]	; (80101e4 <disk_initialize+0x48>)
 80101ae:	5cd3      	ldrb	r3, [r2, r3]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d111      	bne.n	80101d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	4a0b      	ldr	r2, [pc, #44]	; (80101e4 <disk_initialize+0x48>)
 80101b8:	2101      	movs	r1, #1
 80101ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	4a09      	ldr	r2, [pc, #36]	; (80101e4 <disk_initialize+0x48>)
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	4413      	add	r3, r2
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	79fa      	ldrb	r2, [r7, #7]
 80101ca:	4906      	ldr	r1, [pc, #24]	; (80101e4 <disk_initialize+0x48>)
 80101cc:	440a      	add	r2, r1
 80101ce:	7a12      	ldrb	r2, [r2, #8]
 80101d0:	4610      	mov	r0, r2
 80101d2:	4798      	blx	r3
 80101d4:	4603      	mov	r3, r0
 80101d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3710      	adds	r7, #16
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	20001cac 	.word	0x20001cac

080101e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80101e8:	b590      	push	{r4, r7, lr}
 80101ea:	b087      	sub	sp, #28
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60b9      	str	r1, [r7, #8]
 80101f0:	607a      	str	r2, [r7, #4]
 80101f2:	603b      	str	r3, [r7, #0]
 80101f4:	4603      	mov	r3, r0
 80101f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80101f8:	7bfb      	ldrb	r3, [r7, #15]
 80101fa:	4a0a      	ldr	r2, [pc, #40]	; (8010224 <disk_read+0x3c>)
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4413      	add	r3, r2
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	689c      	ldr	r4, [r3, #8]
 8010204:	7bfb      	ldrb	r3, [r7, #15]
 8010206:	4a07      	ldr	r2, [pc, #28]	; (8010224 <disk_read+0x3c>)
 8010208:	4413      	add	r3, r2
 801020a:	7a18      	ldrb	r0, [r3, #8]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	68b9      	ldr	r1, [r7, #8]
 8010212:	47a0      	blx	r4
 8010214:	4603      	mov	r3, r0
 8010216:	75fb      	strb	r3, [r7, #23]
  return res;
 8010218:	7dfb      	ldrb	r3, [r7, #23]
}
 801021a:	4618      	mov	r0, r3
 801021c:	371c      	adds	r7, #28
 801021e:	46bd      	mov	sp, r7
 8010220:	bd90      	pop	{r4, r7, pc}
 8010222:	bf00      	nop
 8010224:	20001cac 	.word	0x20001cac

08010228 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010228:	b590      	push	{r4, r7, lr}
 801022a:	b087      	sub	sp, #28
 801022c:	af00      	add	r7, sp, #0
 801022e:	60b9      	str	r1, [r7, #8]
 8010230:	607a      	str	r2, [r7, #4]
 8010232:	603b      	str	r3, [r7, #0]
 8010234:	4603      	mov	r3, r0
 8010236:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010238:	7bfb      	ldrb	r3, [r7, #15]
 801023a:	4a0a      	ldr	r2, [pc, #40]	; (8010264 <disk_write+0x3c>)
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4413      	add	r3, r2
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	68dc      	ldr	r4, [r3, #12]
 8010244:	7bfb      	ldrb	r3, [r7, #15]
 8010246:	4a07      	ldr	r2, [pc, #28]	; (8010264 <disk_write+0x3c>)
 8010248:	4413      	add	r3, r2
 801024a:	7a18      	ldrb	r0, [r3, #8]
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	68b9      	ldr	r1, [r7, #8]
 8010252:	47a0      	blx	r4
 8010254:	4603      	mov	r3, r0
 8010256:	75fb      	strb	r3, [r7, #23]
  return res;
 8010258:	7dfb      	ldrb	r3, [r7, #23]
}
 801025a:	4618      	mov	r0, r3
 801025c:	371c      	adds	r7, #28
 801025e:	46bd      	mov	sp, r7
 8010260:	bd90      	pop	{r4, r7, pc}
 8010262:	bf00      	nop
 8010264:	20001cac 	.word	0x20001cac

08010268 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	4603      	mov	r3, r0
 8010270:	603a      	str	r2, [r7, #0]
 8010272:	71fb      	strb	r3, [r7, #7]
 8010274:	460b      	mov	r3, r1
 8010276:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	4a09      	ldr	r2, [pc, #36]	; (80102a0 <disk_ioctl+0x38>)
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	4413      	add	r3, r2
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	691b      	ldr	r3, [r3, #16]
 8010284:	79fa      	ldrb	r2, [r7, #7]
 8010286:	4906      	ldr	r1, [pc, #24]	; (80102a0 <disk_ioctl+0x38>)
 8010288:	440a      	add	r2, r1
 801028a:	7a10      	ldrb	r0, [r2, #8]
 801028c:	79b9      	ldrb	r1, [r7, #6]
 801028e:	683a      	ldr	r2, [r7, #0]
 8010290:	4798      	blx	r3
 8010292:	4603      	mov	r3, r0
 8010294:	73fb      	strb	r3, [r7, #15]
  return res;
 8010296:	7bfb      	ldrb	r3, [r7, #15]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	20001cac 	.word	0x20001cac

080102a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	3301      	adds	r3, #1
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80102b4:	89fb      	ldrh	r3, [r7, #14]
 80102b6:	021b      	lsls	r3, r3, #8
 80102b8:	b21a      	sxth	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	b21b      	sxth	r3, r3
 80102c0:	4313      	orrs	r3, r2
 80102c2:	b21b      	sxth	r3, r3
 80102c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80102c6:	89fb      	ldrh	r3, [r7, #14]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3714      	adds	r7, #20
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	3303      	adds	r3, #3
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	021b      	lsls	r3, r3, #8
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	3202      	adds	r2, #2
 80102ec:	7812      	ldrb	r2, [r2, #0]
 80102ee:	4313      	orrs	r3, r2
 80102f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	021b      	lsls	r3, r3, #8
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	3201      	adds	r2, #1
 80102fa:	7812      	ldrb	r2, [r2, #0]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	021b      	lsls	r3, r3, #8
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	7812      	ldrb	r2, [r2, #0]
 8010308:	4313      	orrs	r3, r2
 801030a:	60fb      	str	r3, [r7, #12]
	return rv;
 801030c:	68fb      	ldr	r3, [r7, #12]
}
 801030e:	4618      	mov	r0, r3
 8010310:	3714      	adds	r7, #20
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr

0801031a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801031a:	b480      	push	{r7}
 801031c:	b083      	sub	sp, #12
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	460b      	mov	r3, r1
 8010324:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	1c5a      	adds	r2, r3, #1
 801032a:	607a      	str	r2, [r7, #4]
 801032c:	887a      	ldrh	r2, [r7, #2]
 801032e:	b2d2      	uxtb	r2, r2
 8010330:	701a      	strb	r2, [r3, #0]
 8010332:	887b      	ldrh	r3, [r7, #2]
 8010334:	0a1b      	lsrs	r3, r3, #8
 8010336:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	1c5a      	adds	r2, r3, #1
 801033c:	607a      	str	r2, [r7, #4]
 801033e:	887a      	ldrh	r2, [r7, #2]
 8010340:	b2d2      	uxtb	r2, r2
 8010342:	701a      	strb	r2, [r3, #0]
}
 8010344:	bf00      	nop
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	1c5a      	adds	r2, r3, #1
 801035e:	607a      	str	r2, [r7, #4]
 8010360:	683a      	ldr	r2, [r7, #0]
 8010362:	b2d2      	uxtb	r2, r2
 8010364:	701a      	strb	r2, [r3, #0]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	0a1b      	lsrs	r3, r3, #8
 801036a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	1c5a      	adds	r2, r3, #1
 8010370:	607a      	str	r2, [r7, #4]
 8010372:	683a      	ldr	r2, [r7, #0]
 8010374:	b2d2      	uxtb	r2, r2
 8010376:	701a      	strb	r2, [r3, #0]
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	0a1b      	lsrs	r3, r3, #8
 801037c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	1c5a      	adds	r2, r3, #1
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	683a      	ldr	r2, [r7, #0]
 8010386:	b2d2      	uxtb	r2, r2
 8010388:	701a      	strb	r2, [r3, #0]
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	0a1b      	lsrs	r3, r3, #8
 801038e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	1c5a      	adds	r2, r3, #1
 8010394:	607a      	str	r2, [r7, #4]
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	b2d2      	uxtb	r2, r2
 801039a:	701a      	strb	r2, [r3, #0]
}
 801039c:	bf00      	nop
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80103a8:	b480      	push	{r7}
 80103aa:	b087      	sub	sp, #28
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00d      	beq.n	80103de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	1c53      	adds	r3, r2, #1
 80103c6:	613b      	str	r3, [r7, #16]
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	1c59      	adds	r1, r3, #1
 80103cc:	6179      	str	r1, [r7, #20]
 80103ce:	7812      	ldrb	r2, [r2, #0]
 80103d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	3b01      	subs	r3, #1
 80103d6:	607b      	str	r3, [r7, #4]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1f1      	bne.n	80103c2 <mem_cpy+0x1a>
	}
}
 80103de:	bf00      	nop
 80103e0:	371c      	adds	r7, #28
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr

080103ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80103ea:	b480      	push	{r7}
 80103ec:	b087      	sub	sp, #28
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	60f8      	str	r0, [r7, #12]
 80103f2:	60b9      	str	r1, [r7, #8]
 80103f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	617a      	str	r2, [r7, #20]
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	b2d2      	uxtb	r2, r2
 8010404:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	3b01      	subs	r3, #1
 801040a:	607b      	str	r3, [r7, #4]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1f3      	bne.n	80103fa <mem_set+0x10>
}
 8010412:	bf00      	nop
 8010414:	bf00      	nop
 8010416:	371c      	adds	r7, #28
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010420:	b480      	push	{r7}
 8010422:	b089      	sub	sp, #36	; 0x24
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	61fb      	str	r3, [r7, #28]
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010434:	2300      	movs	r3, #0
 8010436:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	1c5a      	adds	r2, r3, #1
 801043c:	61fa      	str	r2, [r7, #28]
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	4619      	mov	r1, r3
 8010442:	69bb      	ldr	r3, [r7, #24]
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	61ba      	str	r2, [r7, #24]
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	1acb      	subs	r3, r1, r3
 801044c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	3b01      	subs	r3, #1
 8010452:	607b      	str	r3, [r7, #4]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d002      	beq.n	8010460 <mem_cmp+0x40>
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d0eb      	beq.n	8010438 <mem_cmp+0x18>

	return r;
 8010460:	697b      	ldr	r3, [r7, #20]
}
 8010462:	4618      	mov	r0, r3
 8010464:	3724      	adds	r7, #36	; 0x24
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801046e:	b480      	push	{r7}
 8010470:	b083      	sub	sp, #12
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010478:	e002      	b.n	8010480 <chk_chr+0x12>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	3301      	adds	r3, #1
 801047e:	607b      	str	r3, [r7, #4]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d005      	beq.n	8010494 <chk_chr+0x26>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	461a      	mov	r2, r3
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	4293      	cmp	r3, r2
 8010492:	d1f2      	bne.n	801047a <chk_chr+0xc>
	return *str;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	781b      	ldrb	r3, [r3, #0]
}
 8010498:	4618      	mov	r0, r3
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80104ae:	2300      	movs	r3, #0
 80104b0:	60bb      	str	r3, [r7, #8]
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	60fb      	str	r3, [r7, #12]
 80104b6:	e029      	b.n	801050c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80104b8:	4a27      	ldr	r2, [pc, #156]	; (8010558 <chk_lock+0xb4>)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	011b      	lsls	r3, r3, #4
 80104be:	4413      	add	r3, r2
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d01d      	beq.n	8010502 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80104c6:	4a24      	ldr	r2, [pc, #144]	; (8010558 <chk_lock+0xb4>)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	011b      	lsls	r3, r3, #4
 80104cc:	4413      	add	r3, r2
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d116      	bne.n	8010506 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80104d8:	4a1f      	ldr	r2, [pc, #124]	; (8010558 <chk_lock+0xb4>)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	011b      	lsls	r3, r3, #4
 80104de:	4413      	add	r3, r2
 80104e0:	3304      	adds	r3, #4
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d10c      	bne.n	8010506 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80104ec:	4a1a      	ldr	r2, [pc, #104]	; (8010558 <chk_lock+0xb4>)
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	011b      	lsls	r3, r3, #4
 80104f2:	4413      	add	r3, r2
 80104f4:	3308      	adds	r3, #8
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d102      	bne.n	8010506 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010500:	e007      	b.n	8010512 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010502:	2301      	movs	r3, #1
 8010504:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	3301      	adds	r3, #1
 801050a:	60fb      	str	r3, [r7, #12]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d9d2      	bls.n	80104b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2b02      	cmp	r3, #2
 8010516:	d109      	bne.n	801052c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d102      	bne.n	8010524 <chk_lock+0x80>
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	2b02      	cmp	r3, #2
 8010522:	d101      	bne.n	8010528 <chk_lock+0x84>
 8010524:	2300      	movs	r3, #0
 8010526:	e010      	b.n	801054a <chk_lock+0xa6>
 8010528:	2312      	movs	r3, #18
 801052a:	e00e      	b.n	801054a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d108      	bne.n	8010544 <chk_lock+0xa0>
 8010532:	4a09      	ldr	r2, [pc, #36]	; (8010558 <chk_lock+0xb4>)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	011b      	lsls	r3, r3, #4
 8010538:	4413      	add	r3, r2
 801053a:	330c      	adds	r3, #12
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010542:	d101      	bne.n	8010548 <chk_lock+0xa4>
 8010544:	2310      	movs	r3, #16
 8010546:	e000      	b.n	801054a <chk_lock+0xa6>
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	20001b88 	.word	0x20001b88

0801055c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801055c:	b480      	push	{r7}
 801055e:	b083      	sub	sp, #12
 8010560:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010562:	2300      	movs	r3, #0
 8010564:	607b      	str	r3, [r7, #4]
 8010566:	e002      	b.n	801056e <enq_lock+0x12>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3301      	adds	r3, #1
 801056c:	607b      	str	r3, [r7, #4]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d806      	bhi.n	8010582 <enq_lock+0x26>
 8010574:	4a09      	ldr	r2, [pc, #36]	; (801059c <enq_lock+0x40>)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	011b      	lsls	r3, r3, #4
 801057a:	4413      	add	r3, r2
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1f2      	bne.n	8010568 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2b02      	cmp	r3, #2
 8010586:	bf14      	ite	ne
 8010588:	2301      	movne	r3, #1
 801058a:	2300      	moveq	r3, #0
 801058c:	b2db      	uxtb	r3, r3
}
 801058e:	4618      	mov	r0, r3
 8010590:	370c      	adds	r7, #12
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr
 801059a:	bf00      	nop
 801059c:	20001b88 	.word	0x20001b88

080105a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b085      	sub	sp, #20
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80105aa:	2300      	movs	r3, #0
 80105ac:	60fb      	str	r3, [r7, #12]
 80105ae:	e01f      	b.n	80105f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80105b0:	4a41      	ldr	r2, [pc, #260]	; (80106b8 <inc_lock+0x118>)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	011b      	lsls	r3, r3, #4
 80105b6:	4413      	add	r3, r2
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d113      	bne.n	80105ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80105c2:	4a3d      	ldr	r2, [pc, #244]	; (80106b8 <inc_lock+0x118>)
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	011b      	lsls	r3, r3, #4
 80105c8:	4413      	add	r3, r2
 80105ca:	3304      	adds	r3, #4
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d109      	bne.n	80105ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80105d6:	4a38      	ldr	r2, [pc, #224]	; (80106b8 <inc_lock+0x118>)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	011b      	lsls	r3, r3, #4
 80105dc:	4413      	add	r3, r2
 80105de:	3308      	adds	r3, #8
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d006      	beq.n	80105f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	3301      	adds	r3, #1
 80105ee:	60fb      	str	r3, [r7, #12]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2b01      	cmp	r3, #1
 80105f4:	d9dc      	bls.n	80105b0 <inc_lock+0x10>
 80105f6:	e000      	b.n	80105fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80105f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2b02      	cmp	r3, #2
 80105fe:	d132      	bne.n	8010666 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010600:	2300      	movs	r3, #0
 8010602:	60fb      	str	r3, [r7, #12]
 8010604:	e002      	b.n	801060c <inc_lock+0x6c>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	3301      	adds	r3, #1
 801060a:	60fb      	str	r3, [r7, #12]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d806      	bhi.n	8010620 <inc_lock+0x80>
 8010612:	4a29      	ldr	r2, [pc, #164]	; (80106b8 <inc_lock+0x118>)
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	011b      	lsls	r3, r3, #4
 8010618:	4413      	add	r3, r2
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1f2      	bne.n	8010606 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2b02      	cmp	r3, #2
 8010624:	d101      	bne.n	801062a <inc_lock+0x8a>
 8010626:	2300      	movs	r3, #0
 8010628:	e040      	b.n	80106ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	4922      	ldr	r1, [pc, #136]	; (80106b8 <inc_lock+0x118>)
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	011b      	lsls	r3, r3, #4
 8010634:	440b      	add	r3, r1
 8010636:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	689a      	ldr	r2, [r3, #8]
 801063c:	491e      	ldr	r1, [pc, #120]	; (80106b8 <inc_lock+0x118>)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	011b      	lsls	r3, r3, #4
 8010642:	440b      	add	r3, r1
 8010644:	3304      	adds	r3, #4
 8010646:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	695a      	ldr	r2, [r3, #20]
 801064c:	491a      	ldr	r1, [pc, #104]	; (80106b8 <inc_lock+0x118>)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	011b      	lsls	r3, r3, #4
 8010652:	440b      	add	r3, r1
 8010654:	3308      	adds	r3, #8
 8010656:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010658:	4a17      	ldr	r2, [pc, #92]	; (80106b8 <inc_lock+0x118>)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	011b      	lsls	r3, r3, #4
 801065e:	4413      	add	r3, r2
 8010660:	330c      	adds	r3, #12
 8010662:	2200      	movs	r2, #0
 8010664:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d009      	beq.n	8010680 <inc_lock+0xe0>
 801066c:	4a12      	ldr	r2, [pc, #72]	; (80106b8 <inc_lock+0x118>)
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	011b      	lsls	r3, r3, #4
 8010672:	4413      	add	r3, r2
 8010674:	330c      	adds	r3, #12
 8010676:	881b      	ldrh	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <inc_lock+0xe0>
 801067c:	2300      	movs	r3, #0
 801067e:	e015      	b.n	80106ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d108      	bne.n	8010698 <inc_lock+0xf8>
 8010686:	4a0c      	ldr	r2, [pc, #48]	; (80106b8 <inc_lock+0x118>)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	011b      	lsls	r3, r3, #4
 801068c:	4413      	add	r3, r2
 801068e:	330c      	adds	r3, #12
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	3301      	adds	r3, #1
 8010694:	b29a      	uxth	r2, r3
 8010696:	e001      	b.n	801069c <inc_lock+0xfc>
 8010698:	f44f 7280 	mov.w	r2, #256	; 0x100
 801069c:	4906      	ldr	r1, [pc, #24]	; (80106b8 <inc_lock+0x118>)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	011b      	lsls	r3, r3, #4
 80106a2:	440b      	add	r3, r1
 80106a4:	330c      	adds	r3, #12
 80106a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	3301      	adds	r3, #1
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3714      	adds	r7, #20
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr
 80106b8:	20001b88 	.word	0x20001b88

080106bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80106bc:	b480      	push	{r7}
 80106be:	b085      	sub	sp, #20
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	3b01      	subs	r3, #1
 80106c8:	607b      	str	r3, [r7, #4]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d825      	bhi.n	801071c <dec_lock+0x60>
		n = Files[i].ctr;
 80106d0:	4a17      	ldr	r2, [pc, #92]	; (8010730 <dec_lock+0x74>)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	011b      	lsls	r3, r3, #4
 80106d6:	4413      	add	r3, r2
 80106d8:	330c      	adds	r3, #12
 80106da:	881b      	ldrh	r3, [r3, #0]
 80106dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80106de:	89fb      	ldrh	r3, [r7, #14]
 80106e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106e4:	d101      	bne.n	80106ea <dec_lock+0x2e>
 80106e6:	2300      	movs	r3, #0
 80106e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80106ea:	89fb      	ldrh	r3, [r7, #14]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d002      	beq.n	80106f6 <dec_lock+0x3a>
 80106f0:	89fb      	ldrh	r3, [r7, #14]
 80106f2:	3b01      	subs	r3, #1
 80106f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80106f6:	4a0e      	ldr	r2, [pc, #56]	; (8010730 <dec_lock+0x74>)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	011b      	lsls	r3, r3, #4
 80106fc:	4413      	add	r3, r2
 80106fe:	330c      	adds	r3, #12
 8010700:	89fa      	ldrh	r2, [r7, #14]
 8010702:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010704:	89fb      	ldrh	r3, [r7, #14]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d105      	bne.n	8010716 <dec_lock+0x5a>
 801070a:	4a09      	ldr	r2, [pc, #36]	; (8010730 <dec_lock+0x74>)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	011b      	lsls	r3, r3, #4
 8010710:	4413      	add	r3, r2
 8010712:	2200      	movs	r2, #0
 8010714:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010716:	2300      	movs	r3, #0
 8010718:	737b      	strb	r3, [r7, #13]
 801071a:	e001      	b.n	8010720 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801071c:	2302      	movs	r3, #2
 801071e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010720:	7b7b      	ldrb	r3, [r7, #13]
}
 8010722:	4618      	mov	r0, r3
 8010724:	3714      	adds	r7, #20
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	20001b88 	.word	0x20001b88

08010734 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801073c:	2300      	movs	r3, #0
 801073e:	60fb      	str	r3, [r7, #12]
 8010740:	e010      	b.n	8010764 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010742:	4a0d      	ldr	r2, [pc, #52]	; (8010778 <clear_lock+0x44>)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	011b      	lsls	r3, r3, #4
 8010748:	4413      	add	r3, r2
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	429a      	cmp	r2, r3
 8010750:	d105      	bne.n	801075e <clear_lock+0x2a>
 8010752:	4a09      	ldr	r2, [pc, #36]	; (8010778 <clear_lock+0x44>)
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	011b      	lsls	r3, r3, #4
 8010758:	4413      	add	r3, r2
 801075a:	2200      	movs	r2, #0
 801075c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	3301      	adds	r3, #1
 8010762:	60fb      	str	r3, [r7, #12]
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d9eb      	bls.n	8010742 <clear_lock+0xe>
	}
}
 801076a:	bf00      	nop
 801076c:	bf00      	nop
 801076e:	3714      	adds	r7, #20
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr
 8010778:	20001b88 	.word	0x20001b88

0801077c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010784:	2300      	movs	r3, #0
 8010786:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	78db      	ldrb	r3, [r3, #3]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d034      	beq.n	80107fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010794:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	7858      	ldrb	r0, [r3, #1]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80107a0:	2301      	movs	r3, #1
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	f7ff fd40 	bl	8010228 <disk_write>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d002      	beq.n	80107b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	73fb      	strb	r3, [r7, #15]
 80107b2:	e022      	b.n	80107fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107be:	697a      	ldr	r2, [r7, #20]
 80107c0:	1ad2      	subs	r2, r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	69db      	ldr	r3, [r3, #28]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d217      	bcs.n	80107fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	789b      	ldrb	r3, [r3, #2]
 80107ce:	613b      	str	r3, [r7, #16]
 80107d0:	e010      	b.n	80107f4 <sync_window+0x78>
					wsect += fs->fsize;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	69db      	ldr	r3, [r3, #28]
 80107d6:	697a      	ldr	r2, [r7, #20]
 80107d8:	4413      	add	r3, r2
 80107da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7858      	ldrb	r0, [r3, #1]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80107e6:	2301      	movs	r3, #1
 80107e8:	697a      	ldr	r2, [r7, #20]
 80107ea:	f7ff fd1d 	bl	8010228 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	3b01      	subs	r3, #1
 80107f2:	613b      	str	r3, [r7, #16]
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d8eb      	bhi.n	80107d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80107fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3718      	adds	r7, #24
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010816:	683a      	ldr	r2, [r7, #0]
 8010818:	429a      	cmp	r2, r3
 801081a:	d01b      	beq.n	8010854 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7ff ffad 	bl	801077c <sync_window>
 8010822:	4603      	mov	r3, r0
 8010824:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010826:	7bfb      	ldrb	r3, [r7, #15]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d113      	bne.n	8010854 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	7858      	ldrb	r0, [r3, #1]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010836:	2301      	movs	r3, #1
 8010838:	683a      	ldr	r2, [r7, #0]
 801083a:	f7ff fcd5 	bl	80101e8 <disk_read>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d004      	beq.n	801084e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010848:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801084a:	2301      	movs	r3, #1
 801084c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	683a      	ldr	r2, [r7, #0]
 8010852:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010854:	7bfb      	ldrb	r3, [r7, #15]
}
 8010856:	4618      	mov	r0, r3
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
	...

08010860 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff ff87 	bl	801077c <sync_window>
 801086e:	4603      	mov	r3, r0
 8010870:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010872:	7bfb      	ldrb	r3, [r7, #15]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d158      	bne.n	801092a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	2b03      	cmp	r3, #3
 801087e:	d148      	bne.n	8010912 <sync_fs+0xb2>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	791b      	ldrb	r3, [r3, #4]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d144      	bne.n	8010912 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	3334      	adds	r3, #52	; 0x34
 801088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010890:	2100      	movs	r1, #0
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff fda9 	bl	80103ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	3334      	adds	r3, #52	; 0x34
 801089c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80108a0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7ff fd38 	bl	801031a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	3334      	adds	r3, #52	; 0x34
 80108ae:	4921      	ldr	r1, [pc, #132]	; (8010934 <sync_fs+0xd4>)
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7ff fd4d 	bl	8010350 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	3334      	adds	r3, #52	; 0x34
 80108ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80108be:	491e      	ldr	r1, [pc, #120]	; (8010938 <sync_fs+0xd8>)
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7ff fd45 	bl	8010350 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	3334      	adds	r3, #52	; 0x34
 80108ca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	695b      	ldr	r3, [r3, #20]
 80108d2:	4619      	mov	r1, r3
 80108d4:	4610      	mov	r0, r2
 80108d6:	f7ff fd3b 	bl	8010350 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	3334      	adds	r3, #52	; 0x34
 80108de:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	691b      	ldr	r3, [r3, #16]
 80108e6:	4619      	mov	r1, r3
 80108e8:	4610      	mov	r0, r2
 80108ea:	f7ff fd31 	bl	8010350 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a1b      	ldr	r3, [r3, #32]
 80108f2:	1c5a      	adds	r2, r3, #1
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	7858      	ldrb	r0, [r3, #1]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010906:	2301      	movs	r3, #1
 8010908:	f7ff fc8e 	bl	8010228 <disk_write>
			fs->fsi_flag = 0;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	785b      	ldrb	r3, [r3, #1]
 8010916:	2200      	movs	r2, #0
 8010918:	2100      	movs	r1, #0
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff fca4 	bl	8010268 <disk_ioctl>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d001      	beq.n	801092a <sync_fs+0xca>
 8010926:	2301      	movs	r3, #1
 8010928:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801092a:	7bfb      	ldrb	r3, [r7, #15]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3710      	adds	r7, #16
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}
 8010934:	41615252 	.word	0x41615252
 8010938:	61417272 	.word	0x61417272

0801093c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	3b02      	subs	r3, #2
 801094a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	699b      	ldr	r3, [r3, #24]
 8010950:	3b02      	subs	r3, #2
 8010952:	683a      	ldr	r2, [r7, #0]
 8010954:	429a      	cmp	r2, r3
 8010956:	d301      	bcc.n	801095c <clust2sect+0x20>
 8010958:	2300      	movs	r3, #0
 801095a:	e008      	b.n	801096e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	895b      	ldrh	r3, [r3, #10]
 8010960:	461a      	mov	r2, r3
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	fb03 f202 	mul.w	r2, r3, r2
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801096c:	4413      	add	r3, r2
}
 801096e:	4618      	mov	r0, r3
 8010970:	370c      	adds	r7, #12
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr

0801097a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b086      	sub	sp, #24
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	2b01      	cmp	r3, #1
 801098e:	d904      	bls.n	801099a <get_fat+0x20>
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	699b      	ldr	r3, [r3, #24]
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	429a      	cmp	r2, r3
 8010998:	d302      	bcc.n	80109a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 801099a:	2301      	movs	r3, #1
 801099c:	617b      	str	r3, [r7, #20]
 801099e:	e08f      	b.n	8010ac0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80109a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	2b03      	cmp	r3, #3
 80109ac:	d062      	beq.n	8010a74 <get_fat+0xfa>
 80109ae:	2b03      	cmp	r3, #3
 80109b0:	dc7c      	bgt.n	8010aac <get_fat+0x132>
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d002      	beq.n	80109bc <get_fat+0x42>
 80109b6:	2b02      	cmp	r3, #2
 80109b8:	d042      	beq.n	8010a40 <get_fat+0xc6>
 80109ba:	e077      	b.n	8010aac <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	60fb      	str	r3, [r7, #12]
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	085b      	lsrs	r3, r3, #1
 80109c4:	68fa      	ldr	r2, [r7, #12]
 80109c6:	4413      	add	r3, r2
 80109c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	0a5b      	lsrs	r3, r3, #9
 80109d2:	4413      	add	r3, r2
 80109d4:	4619      	mov	r1, r3
 80109d6:	6938      	ldr	r0, [r7, #16]
 80109d8:	f7ff ff14 	bl	8010804 <move_window>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d167      	bne.n	8010ab2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	1c5a      	adds	r2, r3, #1
 80109e6:	60fa      	str	r2, [r7, #12]
 80109e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109ec:	693a      	ldr	r2, [r7, #16]
 80109ee:	4413      	add	r3, r2
 80109f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80109f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	0a5b      	lsrs	r3, r3, #9
 80109fe:	4413      	add	r3, r2
 8010a00:	4619      	mov	r1, r3
 8010a02:	6938      	ldr	r0, [r7, #16]
 8010a04:	f7ff fefe 	bl	8010804 <move_window>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d153      	bne.n	8010ab6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a14:	693a      	ldr	r2, [r7, #16]
 8010a16:	4413      	add	r3, r2
 8010a18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010a1c:	021b      	lsls	r3, r3, #8
 8010a1e:	461a      	mov	r2, r3
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	4313      	orrs	r3, r2
 8010a24:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	f003 0301 	and.w	r3, r3, #1
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d002      	beq.n	8010a36 <get_fat+0xbc>
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	091b      	lsrs	r3, r3, #4
 8010a34:	e002      	b.n	8010a3c <get_fat+0xc2>
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010a3c:	617b      	str	r3, [r7, #20]
			break;
 8010a3e:	e03f      	b.n	8010ac0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	0a1b      	lsrs	r3, r3, #8
 8010a48:	4413      	add	r3, r2
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	6938      	ldr	r0, [r7, #16]
 8010a4e:	f7ff fed9 	bl	8010804 <move_window>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d130      	bne.n	8010aba <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010a66:	4413      	add	r3, r2
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff fc1b 	bl	80102a4 <ld_word>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	617b      	str	r3, [r7, #20]
			break;
 8010a72:	e025      	b.n	8010ac0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	09db      	lsrs	r3, r3, #7
 8010a7c:	4413      	add	r3, r2
 8010a7e:	4619      	mov	r1, r3
 8010a80:	6938      	ldr	r0, [r7, #16]
 8010a82:	f7ff febf 	bl	8010804 <move_window>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d118      	bne.n	8010abe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010a9a:	4413      	add	r3, r2
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff fc19 	bl	80102d4 <ld_dword>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010aa8:	617b      	str	r3, [r7, #20]
			break;
 8010aaa:	e009      	b.n	8010ac0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010aac:	2301      	movs	r3, #1
 8010aae:	617b      	str	r3, [r7, #20]
 8010ab0:	e006      	b.n	8010ac0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ab2:	bf00      	nop
 8010ab4:	e004      	b.n	8010ac0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ab6:	bf00      	nop
 8010ab8:	e002      	b.n	8010ac0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010aba:	bf00      	nop
 8010abc:	e000      	b.n	8010ac0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010abe:	bf00      	nop
		}
	}

	return val;
 8010ac0:	697b      	ldr	r3, [r7, #20]
}
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3718      	adds	r7, #24
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010aca:	b590      	push	{r4, r7, lr}
 8010acc:	b089      	sub	sp, #36	; 0x24
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	60f8      	str	r0, [r7, #12]
 8010ad2:	60b9      	str	r1, [r7, #8]
 8010ad4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010ad6:	2302      	movs	r3, #2
 8010ad8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	2b01      	cmp	r3, #1
 8010ade:	f240 80d2 	bls.w	8010c86 <put_fat+0x1bc>
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	699b      	ldr	r3, [r3, #24]
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	f080 80cc 	bcs.w	8010c86 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	2b03      	cmp	r3, #3
 8010af4:	f000 8096 	beq.w	8010c24 <put_fat+0x15a>
 8010af8:	2b03      	cmp	r3, #3
 8010afa:	f300 80cd 	bgt.w	8010c98 <put_fat+0x1ce>
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d002      	beq.n	8010b08 <put_fat+0x3e>
 8010b02:	2b02      	cmp	r3, #2
 8010b04:	d06e      	beq.n	8010be4 <put_fat+0x11a>
 8010b06:	e0c7      	b.n	8010c98 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	61bb      	str	r3, [r7, #24]
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	085b      	lsrs	r3, r3, #1
 8010b10:	69ba      	ldr	r2, [r7, #24]
 8010b12:	4413      	add	r3, r2
 8010b14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b1a:	69bb      	ldr	r3, [r7, #24]
 8010b1c:	0a5b      	lsrs	r3, r3, #9
 8010b1e:	4413      	add	r3, r2
 8010b20:	4619      	mov	r1, r3
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f7ff fe6e 	bl	8010804 <move_window>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b2c:	7ffb      	ldrb	r3, [r7, #31]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f040 80ab 	bne.w	8010c8a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	1c59      	adds	r1, r3, #1
 8010b3e:	61b9      	str	r1, [r7, #24]
 8010b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b44:	4413      	add	r3, r2
 8010b46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	f003 0301 	and.w	r3, r3, #1
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d00d      	beq.n	8010b6e <put_fat+0xa4>
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	b25b      	sxtb	r3, r3
 8010b58:	f003 030f 	and.w	r3, r3, #15
 8010b5c:	b25a      	sxtb	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	011b      	lsls	r3, r3, #4
 8010b64:	b25b      	sxtb	r3, r3
 8010b66:	4313      	orrs	r3, r2
 8010b68:	b25b      	sxtb	r3, r3
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	e001      	b.n	8010b72 <put_fat+0xa8>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2201      	movs	r2, #1
 8010b7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	0a5b      	lsrs	r3, r3, #9
 8010b84:	4413      	add	r3, r2
 8010b86:	4619      	mov	r1, r3
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f7ff fe3b 	bl	8010804 <move_window>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010b92:	7ffb      	ldrb	r3, [r7, #31]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d17a      	bne.n	8010c8e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b9e:	69bb      	ldr	r3, [r7, #24]
 8010ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ba4:	4413      	add	r3, r2
 8010ba6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d003      	beq.n	8010bba <put_fat+0xf0>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	091b      	lsrs	r3, r3, #4
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	e00e      	b.n	8010bd8 <put_fat+0x10e>
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	b25b      	sxtb	r3, r3
 8010bc0:	f023 030f 	bic.w	r3, r3, #15
 8010bc4:	b25a      	sxtb	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	0a1b      	lsrs	r3, r3, #8
 8010bca:	b25b      	sxtb	r3, r3
 8010bcc:	f003 030f 	and.w	r3, r3, #15
 8010bd0:	b25b      	sxtb	r3, r3
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	b25b      	sxtb	r3, r3
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	697a      	ldr	r2, [r7, #20]
 8010bda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2201      	movs	r2, #1
 8010be0:	70da      	strb	r2, [r3, #3]
			break;
 8010be2:	e059      	b.n	8010c98 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	0a1b      	lsrs	r3, r3, #8
 8010bec:	4413      	add	r3, r2
 8010bee:	4619      	mov	r1, r3
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f7ff fe07 	bl	8010804 <move_window>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010bfa:	7ffb      	ldrb	r3, [r7, #31]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d148      	bne.n	8010c92 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010c0e:	4413      	add	r3, r2
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	b292      	uxth	r2, r2
 8010c14:	4611      	mov	r1, r2
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fb7f 	bl	801031a <st_word>
			fs->wflag = 1;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	70da      	strb	r2, [r3, #3]
			break;
 8010c22:	e039      	b.n	8010c98 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	09db      	lsrs	r3, r3, #7
 8010c2c:	4413      	add	r3, r2
 8010c2e:	4619      	mov	r1, r3
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f7ff fde7 	bl	8010804 <move_window>
 8010c36:	4603      	mov	r3, r0
 8010c38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c3a:	7ffb      	ldrb	r3, [r7, #31]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d12a      	bne.n	8010c96 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010c54:	4413      	add	r3, r2
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7ff fb3c 	bl	80102d4 <ld_dword>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010c62:	4323      	orrs	r3, r4
 8010c64:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	009b      	lsls	r3, r3, #2
 8010c70:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010c74:	4413      	add	r3, r2
 8010c76:	6879      	ldr	r1, [r7, #4]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7ff fb69 	bl	8010350 <st_dword>
			fs->wflag = 1;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2201      	movs	r2, #1
 8010c82:	70da      	strb	r2, [r3, #3]
			break;
 8010c84:	e008      	b.n	8010c98 <put_fat+0x1ce>
		}
	}
 8010c86:	bf00      	nop
 8010c88:	e006      	b.n	8010c98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010c8a:	bf00      	nop
 8010c8c:	e004      	b.n	8010c98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010c8e:	bf00      	nop
 8010c90:	e002      	b.n	8010c98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010c92:	bf00      	nop
 8010c94:	e000      	b.n	8010c98 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8010c96:	bf00      	nop
	return res;
 8010c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3724      	adds	r7, #36	; 0x24
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd90      	pop	{r4, r7, pc}

08010ca2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b08c      	sub	sp, #48	; 0x30
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	60f8      	str	r0, [r7, #12]
 8010caa:	60b9      	str	r1, [r7, #8]
 8010cac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	623b      	str	r3, [r7, #32]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d904      	bls.n	8010cd2 <remove_chain+0x30>
 8010cc8:	6a3b      	ldr	r3, [r7, #32]
 8010cca:	699b      	ldr	r3, [r3, #24]
 8010ccc:	68ba      	ldr	r2, [r7, #8]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d301      	bcc.n	8010cd6 <remove_chain+0x34>
 8010cd2:	2302      	movs	r3, #2
 8010cd4:	e075      	b.n	8010dc2 <remove_chain+0x120>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00f      	beq.n	8010cfc <remove_chain+0x5a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ce0:	6879      	ldr	r1, [r7, #4]
 8010ce2:	6a38      	ldr	r0, [r7, #32]
 8010ce4:	f7ff fef1 	bl	8010aca <put_fat>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (res != FR_OK) return res;
 8010cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d002      	beq.n	8010cfc <remove_chain+0x5a>
 8010cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cfa:	e062      	b.n	8010dc2 <remove_chain+0x120>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010cfc:	68b9      	ldr	r1, [r7, #8]
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f7ff fe3b 	bl	801097a <get_fat>
 8010d04:	61f8      	str	r0, [r7, #28]
		if (nxt == 0) break;				/* Empty cluster? */
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d058      	beq.n	8010dbe <remove_chain+0x11c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d101      	bne.n	8010d16 <remove_chain+0x74>
 8010d12:	2302      	movs	r3, #2
 8010d14:	e055      	b.n	8010dc2 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d1c:	d101      	bne.n	8010d22 <remove_chain+0x80>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e04f      	b.n	8010dc2 <remove_chain+0x120>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010d22:	2200      	movs	r2, #0
 8010d24:	68b9      	ldr	r1, [r7, #8]
 8010d26:	6a38      	ldr	r0, [r7, #32]
 8010d28:	f7ff fecf 	bl	8010aca <put_fat>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) return res;
 8010d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d002      	beq.n	8010d40 <remove_chain+0x9e>
 8010d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d3e:	e040      	b.n	8010dc2 <remove_chain+0x120>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010d40:	6a3b      	ldr	r3, [r7, #32]
 8010d42:	695a      	ldr	r2, [r3, #20]
 8010d44:	6a3b      	ldr	r3, [r7, #32]
 8010d46:	699b      	ldr	r3, [r3, #24]
 8010d48:	3b02      	subs	r3, #2
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d20b      	bcs.n	8010d66 <remove_chain+0xc4>
			fs->free_clst++;
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	695b      	ldr	r3, [r3, #20]
 8010d52:	1c5a      	adds	r2, r3, #1
 8010d54:	6a3b      	ldr	r3, [r7, #32]
 8010d56:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010d58:	6a3b      	ldr	r3, [r7, #32]
 8010d5a:	791b      	ldrb	r3, [r3, #4]
 8010d5c:	f043 0301 	orr.w	r3, r3, #1
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	6a3b      	ldr	r3, [r7, #32]
 8010d64:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8010d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d68:	3301      	adds	r3, #1
 8010d6a:	69fa      	ldr	r2, [r7, #28]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d102      	bne.n	8010d76 <remove_chain+0xd4>
			ecl = nxt;
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d74:	e01b      	b.n	8010dae <remove_chain+0x10c>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
				if (res != FR_OK) return res;
			}
#endif
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
 8010d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d78:	6a38      	ldr	r0, [r7, #32]
 8010d7a:	f7ff fddf 	bl	801093c <clust2sect>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	617b      	str	r3, [r7, #20]
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 8010d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d84:	6a38      	ldr	r0, [r7, #32]
 8010d86:	f7ff fdd9 	bl	801093c <clust2sect>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	6a3b      	ldr	r3, [r7, #32]
 8010d8e:	895b      	ldrh	r3, [r3, #10]
 8010d90:	4413      	add	r3, r2
 8010d92:	3b01      	subs	r3, #1
 8010d94:	61bb      	str	r3, [r7, #24]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	785b      	ldrb	r3, [r3, #1]
 8010d9a:	f107 0214 	add.w	r2, r7, #20
 8010d9e:	2104      	movs	r1, #4
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7ff fa61 	bl	8010268 <disk_ioctl>
#endif
			scl = ecl = nxt;
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dac:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
#endif
		clst = nxt;					/* Next cluster */
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010db2:	6a3b      	ldr	r3, [r7, #32]
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d39f      	bcc.n	8010cfc <remove_chain+0x5a>
 8010dbc:	e000      	b.n	8010dc0 <remove_chain+0x11e>
		if (nxt == 0) break;				/* Empty cluster? */
 8010dbe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010dc0:	2300      	movs	r3, #0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3730      	adds	r7, #48	; 0x30
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}

08010dca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010dca:	b580      	push	{r7, lr}
 8010dcc:	b088      	sub	sp, #32
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d10d      	bne.n	8010dfc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d004      	beq.n	8010df6 <create_chain+0x2c>
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	699b      	ldr	r3, [r3, #24]
 8010df0:	69ba      	ldr	r2, [r7, #24]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d31b      	bcc.n	8010e2e <create_chain+0x64>
 8010df6:	2301      	movs	r3, #1
 8010df8:	61bb      	str	r3, [r7, #24]
 8010dfa:	e018      	b.n	8010e2e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010dfc:	6839      	ldr	r1, [r7, #0]
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7ff fdbb 	bl	801097a <get_fat>
 8010e04:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d801      	bhi.n	8010e10 <create_chain+0x46>
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e070      	b.n	8010ef2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e16:	d101      	bne.n	8010e1c <create_chain+0x52>
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	e06a      	b.n	8010ef2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	699b      	ldr	r3, [r3, #24]
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d201      	bcs.n	8010e2a <create_chain+0x60>
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	e063      	b.n	8010ef2 <create_chain+0x128>
		scl = clst;
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010e2e:	69bb      	ldr	r3, [r7, #24]
 8010e30:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	3301      	adds	r3, #1
 8010e36:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	699b      	ldr	r3, [r3, #24]
 8010e3c:	69fa      	ldr	r2, [r7, #28]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d307      	bcc.n	8010e52 <create_chain+0x88>
				ncl = 2;
 8010e42:	2302      	movs	r3, #2
 8010e44:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010e46:	69fa      	ldr	r2, [r7, #28]
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d901      	bls.n	8010e52 <create_chain+0x88>
 8010e4e:	2300      	movs	r3, #0
 8010e50:	e04f      	b.n	8010ef2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010e52:	69f9      	ldr	r1, [r7, #28]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff fd90 	bl	801097a <get_fat>
 8010e5a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00e      	beq.n	8010e80 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d003      	beq.n	8010e70 <create_chain+0xa6>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e6e:	d101      	bne.n	8010e74 <create_chain+0xaa>
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	e03e      	b.n	8010ef2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010e74:	69fa      	ldr	r2, [r7, #28]
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d1da      	bne.n	8010e32 <create_chain+0x68>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	e038      	b.n	8010ef2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010e80:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e86:	69f9      	ldr	r1, [r7, #28]
 8010e88:	6938      	ldr	r0, [r7, #16]
 8010e8a:	f7ff fe1e 	bl	8010aca <put_fat>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d109      	bne.n	8010eac <create_chain+0xe2>
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d006      	beq.n	8010eac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010e9e:	69fa      	ldr	r2, [r7, #28]
 8010ea0:	6839      	ldr	r1, [r7, #0]
 8010ea2:	6938      	ldr	r0, [r7, #16]
 8010ea4:	f7ff fe11 	bl	8010aca <put_fat>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010eac:	7dfb      	ldrb	r3, [r7, #23]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d116      	bne.n	8010ee0 <create_chain+0x116>
		fs->last_clst = ncl;
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	69fa      	ldr	r2, [r7, #28]
 8010eb6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	695a      	ldr	r2, [r3, #20]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	699b      	ldr	r3, [r3, #24]
 8010ec0:	3b02      	subs	r3, #2
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d804      	bhi.n	8010ed0 <create_chain+0x106>
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	695b      	ldr	r3, [r3, #20]
 8010eca:	1e5a      	subs	r2, r3, #1
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	791b      	ldrb	r3, [r3, #4]
 8010ed4:	f043 0301 	orr.w	r3, r3, #1
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	711a      	strb	r2, [r3, #4]
 8010ede:	e007      	b.n	8010ef0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010ee0:	7dfb      	ldrb	r3, [r7, #23]
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d102      	bne.n	8010eec <create_chain+0x122>
 8010ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eea:	e000      	b.n	8010eee <create_chain+0x124>
 8010eec:	2301      	movs	r3, #1
 8010eee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010ef0:	69fb      	ldr	r3, [r7, #28]
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3720      	adds	r7, #32
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010efa:	b480      	push	{r7}
 8010efc:	b087      	sub	sp, #28
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
 8010f02:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0e:	3304      	adds	r3, #4
 8010f10:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	0a5b      	lsrs	r3, r3, #9
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	8952      	ldrh	r2, [r2, #10]
 8010f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f1e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	1d1a      	adds	r2, r3, #4
 8010f24:	613a      	str	r2, [r7, #16]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d101      	bne.n	8010f34 <clmt_clust+0x3a>
 8010f30:	2300      	movs	r3, #0
 8010f32:	e010      	b.n	8010f56 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010f34:	697a      	ldr	r2, [r7, #20]
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d307      	bcc.n	8010f4c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010f3c:	697a      	ldr	r2, [r7, #20]
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	617b      	str	r3, [r7, #20]
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	3304      	adds	r3, #4
 8010f48:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010f4a:	e7e9      	b.n	8010f20 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010f4c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	4413      	add	r3, r2
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	371c      	adds	r7, #28
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr

08010f62 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b086      	sub	sp, #24
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
 8010f6a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f78:	d204      	bcs.n	8010f84 <dir_sdi+0x22>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	f003 031f 	and.w	r3, r3, #31
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010f84:	2302      	movs	r3, #2
 8010f86:	e063      	b.n	8011050 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	683a      	ldr	r2, [r7, #0]
 8010f8c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d106      	bne.n	8010fa8 <dir_sdi+0x46>
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	2b02      	cmp	r3, #2
 8010fa0:	d902      	bls.n	8010fa8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fa6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10c      	bne.n	8010fc8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	095b      	lsrs	r3, r3, #5
 8010fb2:	693a      	ldr	r2, [r7, #16]
 8010fb4:	8912      	ldrh	r2, [r2, #8]
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d301      	bcc.n	8010fbe <dir_sdi+0x5c>
 8010fba:	2302      	movs	r3, #2
 8010fbc:	e048      	b.n	8011050 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	61da      	str	r2, [r3, #28]
 8010fc6:	e029      	b.n	801101c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010fc8:	693b      	ldr	r3, [r7, #16]
 8010fca:	895b      	ldrh	r3, [r3, #10]
 8010fcc:	025b      	lsls	r3, r3, #9
 8010fce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010fd0:	e019      	b.n	8011006 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6979      	ldr	r1, [r7, #20]
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7ff fccf 	bl	801097a <get_fat>
 8010fdc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fe4:	d101      	bne.n	8010fea <dir_sdi+0x88>
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e032      	b.n	8011050 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d904      	bls.n	8010ffa <dir_sdi+0x98>
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	699b      	ldr	r3, [r3, #24]
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d301      	bcc.n	8010ffe <dir_sdi+0x9c>
 8010ffa:	2302      	movs	r3, #2
 8010ffc:	e028      	b.n	8011050 <dir_sdi+0xee>
			ofs -= csz;
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	1ad3      	subs	r3, r2, r3
 8011004:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011006:	683a      	ldr	r2, [r7, #0]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	429a      	cmp	r2, r3
 801100c:	d2e1      	bcs.n	8010fd2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801100e:	6979      	ldr	r1, [r7, #20]
 8011010:	6938      	ldr	r0, [r7, #16]
 8011012:	f7ff fc93 	bl	801093c <clust2sect>
 8011016:	4602      	mov	r2, r0
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	697a      	ldr	r2, [r7, #20]
 8011020:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	69db      	ldr	r3, [r3, #28]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d101      	bne.n	801102e <dir_sdi+0xcc>
 801102a:	2302      	movs	r3, #2
 801102c:	e010      	b.n	8011050 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	69da      	ldr	r2, [r3, #28]
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	0a5b      	lsrs	r3, r3, #9
 8011036:	441a      	add	r2, r3
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011048:	441a      	add	r2, r3
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3718      	adds	r7, #24
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	695b      	ldr	r3, [r3, #20]
 801106c:	3320      	adds	r3, #32
 801106e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	69db      	ldr	r3, [r3, #28]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d003      	beq.n	8011080 <dir_next+0x28>
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801107e:	d301      	bcc.n	8011084 <dir_next+0x2c>
 8011080:	2304      	movs	r3, #4
 8011082:	e0aa      	b.n	80111da <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801108a:	2b00      	cmp	r3, #0
 801108c:	f040 8098 	bne.w	80111c0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	69db      	ldr	r3, [r3, #28]
 8011094:	1c5a      	adds	r2, r3, #1
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	699b      	ldr	r3, [r3, #24]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d10b      	bne.n	80110ba <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	095b      	lsrs	r3, r3, #5
 80110a6:	68fa      	ldr	r2, [r7, #12]
 80110a8:	8912      	ldrh	r2, [r2, #8]
 80110aa:	4293      	cmp	r3, r2
 80110ac:	f0c0 8088 	bcc.w	80111c0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2200      	movs	r2, #0
 80110b4:	61da      	str	r2, [r3, #28]
 80110b6:	2304      	movs	r3, #4
 80110b8:	e08f      	b.n	80111da <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	0a5b      	lsrs	r3, r3, #9
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	8952      	ldrh	r2, [r2, #10]
 80110c2:	3a01      	subs	r2, #1
 80110c4:	4013      	ands	r3, r2
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d17a      	bne.n	80111c0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80110ca:	687a      	ldr	r2, [r7, #4]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	699b      	ldr	r3, [r3, #24]
 80110d0:	4619      	mov	r1, r3
 80110d2:	4610      	mov	r0, r2
 80110d4:	f7ff fc51 	bl	801097a <get_fat>
 80110d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d801      	bhi.n	80110e4 <dir_next+0x8c>
 80110e0:	2302      	movs	r3, #2
 80110e2:	e07a      	b.n	80111da <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110ea:	d101      	bne.n	80110f0 <dir_next+0x98>
 80110ec:	2301      	movs	r3, #1
 80110ee:	e074      	b.n	80111da <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	699b      	ldr	r3, [r3, #24]
 80110f4:	697a      	ldr	r2, [r7, #20]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d358      	bcc.n	80111ac <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d104      	bne.n	801110a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	61da      	str	r2, [r3, #28]
 8011106:	2304      	movs	r3, #4
 8011108:	e067      	b.n	80111da <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801110a:	687a      	ldr	r2, [r7, #4]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	699b      	ldr	r3, [r3, #24]
 8011110:	4619      	mov	r1, r3
 8011112:	4610      	mov	r0, r2
 8011114:	f7ff fe59 	bl	8010dca <create_chain>
 8011118:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d101      	bne.n	8011124 <dir_next+0xcc>
 8011120:	2307      	movs	r3, #7
 8011122:	e05a      	b.n	80111da <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	2b01      	cmp	r3, #1
 8011128:	d101      	bne.n	801112e <dir_next+0xd6>
 801112a:	2302      	movs	r3, #2
 801112c:	e055      	b.n	80111da <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011134:	d101      	bne.n	801113a <dir_next+0xe2>
 8011136:	2301      	movs	r3, #1
 8011138:	e04f      	b.n	80111da <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f7ff fb1e 	bl	801077c <sync_window>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <dir_next+0xf2>
 8011146:	2301      	movs	r3, #1
 8011148:	e047      	b.n	80111da <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	3334      	adds	r3, #52	; 0x34
 801114e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011152:	2100      	movs	r1, #0
 8011154:	4618      	mov	r0, r3
 8011156:	f7ff f948 	bl	80103ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801115a:	2300      	movs	r3, #0
 801115c:	613b      	str	r3, [r7, #16]
 801115e:	6979      	ldr	r1, [r7, #20]
 8011160:	68f8      	ldr	r0, [r7, #12]
 8011162:	f7ff fbeb 	bl	801093c <clust2sect>
 8011166:	4602      	mov	r2, r0
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	631a      	str	r2, [r3, #48]	; 0x30
 801116c:	e012      	b.n	8011194 <dir_next+0x13c>
						fs->wflag = 1;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2201      	movs	r2, #1
 8011172:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011174:	68f8      	ldr	r0, [r7, #12]
 8011176:	f7ff fb01 	bl	801077c <sync_window>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d001      	beq.n	8011184 <dir_next+0x12c>
 8011180:	2301      	movs	r3, #1
 8011182:	e02a      	b.n	80111da <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	3301      	adds	r3, #1
 8011188:	613b      	str	r3, [r7, #16]
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801118e:	1c5a      	adds	r2, r3, #1
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	631a      	str	r2, [r3, #48]	; 0x30
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	895b      	ldrh	r3, [r3, #10]
 8011198:	461a      	mov	r2, r3
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	4293      	cmp	r3, r2
 801119e:	d3e6      	bcc.n	801116e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	1ad2      	subs	r2, r2, r3
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	697a      	ldr	r2, [r7, #20]
 80111b0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80111b2:	6979      	ldr	r1, [r7, #20]
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f7ff fbc1 	bl	801093c <clust2sect>
 80111ba:	4602      	mov	r2, r0
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	68ba      	ldr	r2, [r7, #8]
 80111c4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d2:	441a      	add	r2, r3
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80111d8:	2300      	movs	r3, #0
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3718      	adds	r7, #24
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b086      	sub	sp, #24
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
 80111ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80111f2:	2100      	movs	r1, #0
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7ff feb4 	bl	8010f62 <dir_sdi>
 80111fa:	4603      	mov	r3, r0
 80111fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80111fe:	7dfb      	ldrb	r3, [r7, #23]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d12b      	bne.n	801125c <dir_alloc+0x7a>
		n = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	69db      	ldr	r3, [r3, #28]
 801120c:	4619      	mov	r1, r3
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f7ff faf8 	bl	8010804 <move_window>
 8011214:	4603      	mov	r3, r0
 8011216:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011218:	7dfb      	ldrb	r3, [r7, #23]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d11d      	bne.n	801125a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6a1b      	ldr	r3, [r3, #32]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	2be5      	cmp	r3, #229	; 0xe5
 8011226:	d004      	beq.n	8011232 <dir_alloc+0x50>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6a1b      	ldr	r3, [r3, #32]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d107      	bne.n	8011242 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	3301      	adds	r3, #1
 8011236:	613b      	str	r3, [r7, #16]
 8011238:	693a      	ldr	r2, [r7, #16]
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	429a      	cmp	r2, r3
 801123e:	d102      	bne.n	8011246 <dir_alloc+0x64>
 8011240:	e00c      	b.n	801125c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011242:	2300      	movs	r3, #0
 8011244:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011246:	2101      	movs	r1, #1
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7ff ff05 	bl	8011058 <dir_next>
 801124e:	4603      	mov	r3, r0
 8011250:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011252:	7dfb      	ldrb	r3, [r7, #23]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d0d7      	beq.n	8011208 <dir_alloc+0x26>
 8011258:	e000      	b.n	801125c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801125a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801125c:	7dfb      	ldrb	r3, [r7, #23]
 801125e:	2b04      	cmp	r3, #4
 8011260:	d101      	bne.n	8011266 <dir_alloc+0x84>
 8011262:	2307      	movs	r3, #7
 8011264:	75fb      	strb	r3, [r7, #23]
	return res;
 8011266:	7dfb      	ldrb	r3, [r7, #23]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	331a      	adds	r3, #26
 801127e:	4618      	mov	r0, r3
 8011280:	f7ff f810 	bl	80102a4 <ld_word>
 8011284:	4603      	mov	r3, r0
 8011286:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b03      	cmp	r3, #3
 801128e:	d109      	bne.n	80112a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	3314      	adds	r3, #20
 8011294:	4618      	mov	r0, r3
 8011296:	f7ff f805 	bl	80102a4 <ld_word>
 801129a:	4603      	mov	r3, r0
 801129c:	041b      	lsls	r3, r3, #16
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	4313      	orrs	r3, r2
 80112a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80112a4:	68fb      	ldr	r3, [r7, #12]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3710      	adds	r7, #16
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}

080112ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80112ae:	b580      	push	{r7, lr}
 80112b0:	b084      	sub	sp, #16
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	60f8      	str	r0, [r7, #12]
 80112b6:	60b9      	str	r1, [r7, #8]
 80112b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	331a      	adds	r3, #26
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	b292      	uxth	r2, r2
 80112c2:	4611      	mov	r1, r2
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7ff f828 	bl	801031a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d109      	bne.n	80112e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	f103 0214 	add.w	r2, r3, #20
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	0c1b      	lsrs	r3, r3, #16
 80112dc:	b29b      	uxth	r3, r3
 80112de:	4619      	mov	r1, r3
 80112e0:	4610      	mov	r0, r2
 80112e2:	f7ff f81a 	bl	801031a <st_word>
	}
}
 80112e6:	bf00      	nop
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
	...

080112f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b087      	sub	sp, #28
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	331a      	adds	r3, #26
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fe ffd0 	bl	80102a4 <ld_word>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	d001      	beq.n	801130e <cmp_lfn+0x1e>
 801130a:	2300      	movs	r3, #0
 801130c:	e059      	b.n	80113c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011316:	1e5a      	subs	r2, r3, #1
 8011318:	4613      	mov	r3, r2
 801131a:	005b      	lsls	r3, r3, #1
 801131c:	4413      	add	r3, r2
 801131e:	009b      	lsls	r3, r3, #2
 8011320:	4413      	add	r3, r2
 8011322:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011324:	2301      	movs	r3, #1
 8011326:	81fb      	strh	r3, [r7, #14]
 8011328:	2300      	movs	r3, #0
 801132a:	613b      	str	r3, [r7, #16]
 801132c:	e033      	b.n	8011396 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801132e:	4a27      	ldr	r2, [pc, #156]	; (80113cc <cmp_lfn+0xdc>)
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	4413      	add	r3, r2
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	461a      	mov	r2, r3
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	4413      	add	r3, r2
 801133c:	4618      	mov	r0, r3
 801133e:	f7fe ffb1 	bl	80102a4 <ld_word>
 8011342:	4603      	mov	r3, r0
 8011344:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011346:	89fb      	ldrh	r3, [r7, #14]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d01a      	beq.n	8011382 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	2b7f      	cmp	r3, #127	; 0x7f
 8011350:	d812      	bhi.n	8011378 <cmp_lfn+0x88>
 8011352:	89bb      	ldrh	r3, [r7, #12]
 8011354:	4618      	mov	r0, r3
 8011356:	f002 fed3 	bl	8014100 <ff_wtoupper>
 801135a:	4603      	mov	r3, r0
 801135c:	461c      	mov	r4, r3
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	1c5a      	adds	r2, r3, #1
 8011362:	617a      	str	r2, [r7, #20]
 8011364:	005b      	lsls	r3, r3, #1
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	4413      	add	r3, r2
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	4618      	mov	r0, r3
 801136e:	f002 fec7 	bl	8014100 <ff_wtoupper>
 8011372:	4603      	mov	r3, r0
 8011374:	429c      	cmp	r4, r3
 8011376:	d001      	beq.n	801137c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011378:	2300      	movs	r3, #0
 801137a:	e022      	b.n	80113c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 801137c:	89bb      	ldrh	r3, [r7, #12]
 801137e:	81fb      	strh	r3, [r7, #14]
 8011380:	e006      	b.n	8011390 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011382:	89bb      	ldrh	r3, [r7, #12]
 8011384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011388:	4293      	cmp	r3, r2
 801138a:	d001      	beq.n	8011390 <cmp_lfn+0xa0>
 801138c:	2300      	movs	r3, #0
 801138e:	e018      	b.n	80113c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	3301      	adds	r3, #1
 8011394:	613b      	str	r3, [r7, #16]
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	2b0c      	cmp	r3, #12
 801139a:	d9c8      	bls.n	801132e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	781b      	ldrb	r3, [r3, #0]
 80113a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d00b      	beq.n	80113c0 <cmp_lfn+0xd0>
 80113a8:	89fb      	ldrh	r3, [r7, #14]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d008      	beq.n	80113c0 <cmp_lfn+0xd0>
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	005b      	lsls	r3, r3, #1
 80113b2:	687a      	ldr	r2, [r7, #4]
 80113b4:	4413      	add	r3, r2
 80113b6:	881b      	ldrh	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d001      	beq.n	80113c0 <cmp_lfn+0xd0>
 80113bc:	2300      	movs	r3, #0
 80113be:	e000      	b.n	80113c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80113c0:	2301      	movs	r3, #1
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	371c      	adds	r7, #28
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd90      	pop	{r4, r7, pc}
 80113ca:	bf00      	nop
 80113cc:	0801692c 	.word	0x0801692c

080113d0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	331a      	adds	r3, #26
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fe ff60 	bl	80102a4 <ld_word>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d001      	beq.n	80113ee <pick_lfn+0x1e>
 80113ea:	2300      	movs	r3, #0
 80113ec:	e04d      	b.n	801148a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113f6:	1e5a      	subs	r2, r3, #1
 80113f8:	4613      	mov	r3, r2
 80113fa:	005b      	lsls	r3, r3, #1
 80113fc:	4413      	add	r3, r2
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	4413      	add	r3, r2
 8011402:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011404:	2301      	movs	r3, #1
 8011406:	81fb      	strh	r3, [r7, #14]
 8011408:	2300      	movs	r3, #0
 801140a:	613b      	str	r3, [r7, #16]
 801140c:	e028      	b.n	8011460 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801140e:	4a21      	ldr	r2, [pc, #132]	; (8011494 <pick_lfn+0xc4>)
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	4413      	add	r3, r2
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	461a      	mov	r2, r3
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	4413      	add	r3, r2
 801141c:	4618      	mov	r0, r3
 801141e:	f7fe ff41 	bl	80102a4 <ld_word>
 8011422:	4603      	mov	r3, r0
 8011424:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011426:	89fb      	ldrh	r3, [r7, #14]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00f      	beq.n	801144c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	2b7f      	cmp	r3, #127	; 0x7f
 8011430:	d901      	bls.n	8011436 <pick_lfn+0x66>
 8011432:	2300      	movs	r3, #0
 8011434:	e029      	b.n	801148a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011436:	89bb      	ldrh	r3, [r7, #12]
 8011438:	81fb      	strh	r3, [r7, #14]
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	617a      	str	r2, [r7, #20]
 8011440:	005b      	lsls	r3, r3, #1
 8011442:	687a      	ldr	r2, [r7, #4]
 8011444:	4413      	add	r3, r2
 8011446:	89fa      	ldrh	r2, [r7, #14]
 8011448:	801a      	strh	r2, [r3, #0]
 801144a:	e006      	b.n	801145a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801144c:	89bb      	ldrh	r3, [r7, #12]
 801144e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011452:	4293      	cmp	r3, r2
 8011454:	d001      	beq.n	801145a <pick_lfn+0x8a>
 8011456:	2300      	movs	r3, #0
 8011458:	e017      	b.n	801148a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	3301      	adds	r3, #1
 801145e:	613b      	str	r3, [r7, #16]
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	2b0c      	cmp	r3, #12
 8011464:	d9d3      	bls.n	801140e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00a      	beq.n	8011488 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2b7f      	cmp	r3, #127	; 0x7f
 8011476:	d901      	bls.n	801147c <pick_lfn+0xac>
 8011478:	2300      	movs	r3, #0
 801147a:	e006      	b.n	801148a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	005b      	lsls	r3, r3, #1
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	4413      	add	r3, r2
 8011484:	2200      	movs	r2, #0
 8011486:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011488:	2301      	movs	r3, #1
}
 801148a:	4618      	mov	r0, r3
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	0801692c 	.word	0x0801692c

08011498 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b088      	sub	sp, #32
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	4611      	mov	r1, r2
 80114a4:	461a      	mov	r2, r3
 80114a6:	460b      	mov	r3, r1
 80114a8:	71fb      	strb	r3, [r7, #7]
 80114aa:	4613      	mov	r3, r2
 80114ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	330d      	adds	r3, #13
 80114b2:	79ba      	ldrb	r2, [r7, #6]
 80114b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	330b      	adds	r3, #11
 80114ba:	220f      	movs	r2, #15
 80114bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	330c      	adds	r3, #12
 80114c2:	2200      	movs	r2, #0
 80114c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	331a      	adds	r3, #26
 80114ca:	2100      	movs	r1, #0
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fe ff24 	bl	801031a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	1e5a      	subs	r2, r3, #1
 80114d6:	4613      	mov	r3, r2
 80114d8:	005b      	lsls	r3, r3, #1
 80114da:	4413      	add	r3, r2
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	4413      	add	r3, r2
 80114e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80114e2:	2300      	movs	r3, #0
 80114e4:	82fb      	strh	r3, [r7, #22]
 80114e6:	2300      	movs	r3, #0
 80114e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80114ea:	8afb      	ldrh	r3, [r7, #22]
 80114ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d007      	beq.n	8011504 <put_lfn+0x6c>
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	1c5a      	adds	r2, r3, #1
 80114f8:	61fa      	str	r2, [r7, #28]
 80114fa:	005b      	lsls	r3, r3, #1
 80114fc:	68fa      	ldr	r2, [r7, #12]
 80114fe:	4413      	add	r3, r2
 8011500:	881b      	ldrh	r3, [r3, #0]
 8011502:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011504:	4a17      	ldr	r2, [pc, #92]	; (8011564 <put_lfn+0xcc>)
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	4413      	add	r3, r2
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	461a      	mov	r2, r3
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	4413      	add	r3, r2
 8011512:	8afa      	ldrh	r2, [r7, #22]
 8011514:	4611      	mov	r1, r2
 8011516:	4618      	mov	r0, r3
 8011518:	f7fe feff 	bl	801031a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801151c:	8afb      	ldrh	r3, [r7, #22]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d102      	bne.n	8011528 <put_lfn+0x90>
 8011522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011526:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	3301      	adds	r3, #1
 801152c:	61bb      	str	r3, [r7, #24]
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	2b0c      	cmp	r3, #12
 8011532:	d9da      	bls.n	80114ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011534:	8afb      	ldrh	r3, [r7, #22]
 8011536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801153a:	4293      	cmp	r3, r2
 801153c:	d006      	beq.n	801154c <put_lfn+0xb4>
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	005b      	lsls	r3, r3, #1
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	4413      	add	r3, r2
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d103      	bne.n	8011554 <put_lfn+0xbc>
 801154c:	79fb      	ldrb	r3, [r7, #7]
 801154e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011552:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	79fa      	ldrb	r2, [r7, #7]
 8011558:	701a      	strb	r2, [r3, #0]
}
 801155a:	bf00      	nop
 801155c:	3720      	adds	r7, #32
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	0801692c 	.word	0x0801692c

08011568 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b08c      	sub	sp, #48	; 0x30
 801156c:	af00      	add	r7, sp, #0
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	607a      	str	r2, [r7, #4]
 8011574:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011576:	220b      	movs	r2, #11
 8011578:	68b9      	ldr	r1, [r7, #8]
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f7fe ff14 	bl	80103a8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	2b05      	cmp	r3, #5
 8011584:	d92b      	bls.n	80115de <gen_numname+0x76>
		sr = seq;
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801158a:	e022      	b.n	80115d2 <gen_numname+0x6a>
			wc = *lfn++;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	1c9a      	adds	r2, r3, #2
 8011590:	607a      	str	r2, [r7, #4]
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011596:	2300      	movs	r3, #0
 8011598:	62bb      	str	r3, [r7, #40]	; 0x28
 801159a:	e017      	b.n	80115cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	005a      	lsls	r2, r3, #1
 80115a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115a2:	f003 0301 	and.w	r3, r3, #1
 80115a6:	4413      	add	r3, r2
 80115a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80115aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115ac:	085b      	lsrs	r3, r3, #1
 80115ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d005      	beq.n	80115c6 <gen_numname+0x5e>
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80115c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80115c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80115c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c8:	3301      	adds	r3, #1
 80115ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80115cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ce:	2b0f      	cmp	r3, #15
 80115d0:	d9e4      	bls.n	801159c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	881b      	ldrh	r3, [r3, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d1d8      	bne.n	801158c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80115de:	2307      	movs	r3, #7
 80115e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	f003 030f 	and.w	r3, r3, #15
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	3330      	adds	r3, #48	; 0x30
 80115ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80115f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115f6:	2b39      	cmp	r3, #57	; 0x39
 80115f8:	d904      	bls.n	8011604 <gen_numname+0x9c>
 80115fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115fe:	3307      	adds	r3, #7
 8011600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011606:	1e5a      	subs	r2, r3, #1
 8011608:	62ba      	str	r2, [r7, #40]	; 0x28
 801160a:	3330      	adds	r3, #48	; 0x30
 801160c:	443b      	add	r3, r7
 801160e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011612:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	091b      	lsrs	r3, r3, #4
 801161a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1df      	bne.n	80115e2 <gen_numname+0x7a>
	ns[i] = '~';
 8011622:	f107 0214 	add.w	r2, r7, #20
 8011626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011628:	4413      	add	r3, r2
 801162a:	227e      	movs	r2, #126	; 0x7e
 801162c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801162e:	2300      	movs	r3, #0
 8011630:	627b      	str	r3, [r7, #36]	; 0x24
 8011632:	e002      	b.n	801163a <gen_numname+0xd2>
 8011634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011636:	3301      	adds	r3, #1
 8011638:	627b      	str	r3, [r7, #36]	; 0x24
 801163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163e:	429a      	cmp	r2, r3
 8011640:	d205      	bcs.n	801164e <gen_numname+0xe6>
 8011642:	68fa      	ldr	r2, [r7, #12]
 8011644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011646:	4413      	add	r3, r2
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	2b20      	cmp	r3, #32
 801164c:	d1f2      	bne.n	8011634 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	2b07      	cmp	r3, #7
 8011652:	d807      	bhi.n	8011664 <gen_numname+0xfc>
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	62ba      	str	r2, [r7, #40]	; 0x28
 801165a:	3330      	adds	r3, #48	; 0x30
 801165c:	443b      	add	r3, r7
 801165e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011662:	e000      	b.n	8011666 <gen_numname+0xfe>
 8011664:	2120      	movs	r1, #32
 8011666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011668:	1c5a      	adds	r2, r3, #1
 801166a:	627a      	str	r2, [r7, #36]	; 0x24
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	4413      	add	r3, r2
 8011670:	460a      	mov	r2, r1
 8011672:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011676:	2b07      	cmp	r3, #7
 8011678:	d9e9      	bls.n	801164e <gen_numname+0xe6>
}
 801167a:	bf00      	nop
 801167c:	bf00      	nop
 801167e:	3730      	adds	r7, #48	; 0x30
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801168c:	2300      	movs	r3, #0
 801168e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011690:	230b      	movs	r3, #11
 8011692:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011694:	7bfb      	ldrb	r3, [r7, #15]
 8011696:	b2da      	uxtb	r2, r3
 8011698:	0852      	lsrs	r2, r2, #1
 801169a:	01db      	lsls	r3, r3, #7
 801169c:	4313      	orrs	r3, r2
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	1c59      	adds	r1, r3, #1
 80116a4:	6079      	str	r1, [r7, #4]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	4413      	add	r3, r2
 80116aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	3b01      	subs	r3, #1
 80116b0:	60bb      	str	r3, [r7, #8]
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1ed      	bne.n	8011694 <sum_sfn+0x10>
	return sum;
 80116b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr

080116c6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80116c6:	b580      	push	{r7, lr}
 80116c8:	b086      	sub	sp, #24
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
 80116ce:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80116d0:	2304      	movs	r3, #4
 80116d2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80116da:	23ff      	movs	r3, #255	; 0xff
 80116dc:	757b      	strb	r3, [r7, #21]
 80116de:	23ff      	movs	r3, #255	; 0xff
 80116e0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80116e2:	e081      	b.n	80117e8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	69db      	ldr	r3, [r3, #28]
 80116e8:	4619      	mov	r1, r3
 80116ea:	6938      	ldr	r0, [r7, #16]
 80116ec:	f7ff f88a 	bl	8010804 <move_window>
 80116f0:	4603      	mov	r3, r0
 80116f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d17c      	bne.n	80117f4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a1b      	ldr	r3, [r3, #32]
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011702:	7dbb      	ldrb	r3, [r7, #22]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d102      	bne.n	801170e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011708:	2304      	movs	r3, #4
 801170a:	75fb      	strb	r3, [r7, #23]
 801170c:	e077      	b.n	80117fe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	330b      	adds	r3, #11
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801171a:	73fb      	strb	r3, [r7, #15]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	7bfa      	ldrb	r2, [r7, #15]
 8011720:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011722:	7dbb      	ldrb	r3, [r7, #22]
 8011724:	2be5      	cmp	r3, #229	; 0xe5
 8011726:	d00e      	beq.n	8011746 <dir_read+0x80>
 8011728:	7dbb      	ldrb	r3, [r7, #22]
 801172a:	2b2e      	cmp	r3, #46	; 0x2e
 801172c:	d00b      	beq.n	8011746 <dir_read+0x80>
 801172e:	7bfb      	ldrb	r3, [r7, #15]
 8011730:	f023 0320 	bic.w	r3, r3, #32
 8011734:	2b08      	cmp	r3, #8
 8011736:	bf0c      	ite	eq
 8011738:	2301      	moveq	r3, #1
 801173a:	2300      	movne	r3, #0
 801173c:	b2db      	uxtb	r3, r3
 801173e:	461a      	mov	r2, r3
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	4293      	cmp	r3, r2
 8011744:	d002      	beq.n	801174c <dir_read+0x86>
				ord = 0xFF;
 8011746:	23ff      	movs	r3, #255	; 0xff
 8011748:	757b      	strb	r3, [r7, #21]
 801174a:	e044      	b.n	80117d6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801174c:	7bfb      	ldrb	r3, [r7, #15]
 801174e:	2b0f      	cmp	r3, #15
 8011750:	d12f      	bne.n	80117b2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011752:	7dbb      	ldrb	r3, [r7, #22]
 8011754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00d      	beq.n	8011778 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6a1b      	ldr	r3, [r3, #32]
 8011760:	7b5b      	ldrb	r3, [r3, #13]
 8011762:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011764:	7dbb      	ldrb	r3, [r7, #22]
 8011766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801176a:	75bb      	strb	r3, [r7, #22]
 801176c:	7dbb      	ldrb	r3, [r7, #22]
 801176e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	695a      	ldr	r2, [r3, #20]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011778:	7dba      	ldrb	r2, [r7, #22]
 801177a:	7d7b      	ldrb	r3, [r7, #21]
 801177c:	429a      	cmp	r2, r3
 801177e:	d115      	bne.n	80117ac <dir_read+0xe6>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a1b      	ldr	r3, [r3, #32]
 8011784:	330d      	adds	r3, #13
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	7d3a      	ldrb	r2, [r7, #20]
 801178a:	429a      	cmp	r2, r3
 801178c:	d10e      	bne.n	80117ac <dir_read+0xe6>
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	68da      	ldr	r2, [r3, #12]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a1b      	ldr	r3, [r3, #32]
 8011796:	4619      	mov	r1, r3
 8011798:	4610      	mov	r0, r2
 801179a:	f7ff fe19 	bl	80113d0 <pick_lfn>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d003      	beq.n	80117ac <dir_read+0xe6>
 80117a4:	7d7b      	ldrb	r3, [r7, #21]
 80117a6:	3b01      	subs	r3, #1
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	e000      	b.n	80117ae <dir_read+0xe8>
 80117ac:	23ff      	movs	r3, #255	; 0xff
 80117ae:	757b      	strb	r3, [r7, #21]
 80117b0:	e011      	b.n	80117d6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80117b2:	7d7b      	ldrb	r3, [r7, #21]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d109      	bne.n	80117cc <dir_read+0x106>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6a1b      	ldr	r3, [r3, #32]
 80117bc:	4618      	mov	r0, r3
 80117be:	f7ff ff61 	bl	8011684 <sum_sfn>
 80117c2:	4603      	mov	r3, r0
 80117c4:	461a      	mov	r2, r3
 80117c6:	7d3b      	ldrb	r3, [r7, #20]
 80117c8:	4293      	cmp	r3, r2
 80117ca:	d015      	beq.n	80117f8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80117d4:	e010      	b.n	80117f8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80117d6:	2100      	movs	r1, #0
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff fc3d 	bl	8011058 <dir_next>
 80117de:	4603      	mov	r3, r0
 80117e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117e2:	7dfb      	ldrb	r3, [r7, #23]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d109      	bne.n	80117fc <dir_read+0x136>
	while (dp->sect) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	69db      	ldr	r3, [r3, #28]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f47f af79 	bne.w	80116e4 <dir_read+0x1e>
 80117f2:	e004      	b.n	80117fe <dir_read+0x138>
		if (res != FR_OK) break;
 80117f4:	bf00      	nop
 80117f6:	e002      	b.n	80117fe <dir_read+0x138>
					break;
 80117f8:	bf00      	nop
 80117fa:	e000      	b.n	80117fe <dir_read+0x138>
		if (res != FR_OK) break;
 80117fc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80117fe:	7dfb      	ldrb	r3, [r7, #23]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d002      	beq.n	801180a <dir_read+0x144>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	61da      	str	r2, [r3, #28]
	return res;
 801180a:	7dfb      	ldrb	r3, [r7, #23]
}
 801180c:	4618      	mov	r0, r3
 801180e:	3718      	adds	r7, #24
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011822:	2100      	movs	r1, #0
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7ff fb9c 	bl	8010f62 <dir_sdi>
 801182a:	4603      	mov	r3, r0
 801182c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801182e:	7dfb      	ldrb	r3, [r7, #23]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d001      	beq.n	8011838 <dir_find+0x24>
 8011834:	7dfb      	ldrb	r3, [r7, #23]
 8011836:	e0a9      	b.n	801198c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011838:	23ff      	movs	r3, #255	; 0xff
 801183a:	753b      	strb	r3, [r7, #20]
 801183c:	7d3b      	ldrb	r3, [r7, #20]
 801183e:	757b      	strb	r3, [r7, #21]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011846:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	69db      	ldr	r3, [r3, #28]
 801184c:	4619      	mov	r1, r3
 801184e:	6938      	ldr	r0, [r7, #16]
 8011850:	f7fe ffd8 	bl	8010804 <move_window>
 8011854:	4603      	mov	r3, r0
 8011856:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011858:	7dfb      	ldrb	r3, [r7, #23]
 801185a:	2b00      	cmp	r3, #0
 801185c:	f040 8090 	bne.w	8011980 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6a1b      	ldr	r3, [r3, #32]
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011868:	7dbb      	ldrb	r3, [r7, #22]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d102      	bne.n	8011874 <dir_find+0x60>
 801186e:	2304      	movs	r3, #4
 8011870:	75fb      	strb	r3, [r7, #23]
 8011872:	e08a      	b.n	801198a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6a1b      	ldr	r3, [r3, #32]
 8011878:	330b      	adds	r3, #11
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011880:	73fb      	strb	r3, [r7, #15]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	7bfa      	ldrb	r2, [r7, #15]
 8011886:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011888:	7dbb      	ldrb	r3, [r7, #22]
 801188a:	2be5      	cmp	r3, #229	; 0xe5
 801188c:	d007      	beq.n	801189e <dir_find+0x8a>
 801188e:	7bfb      	ldrb	r3, [r7, #15]
 8011890:	f003 0308 	and.w	r3, r3, #8
 8011894:	2b00      	cmp	r3, #0
 8011896:	d009      	beq.n	80118ac <dir_find+0x98>
 8011898:	7bfb      	ldrb	r3, [r7, #15]
 801189a:	2b0f      	cmp	r3, #15
 801189c:	d006      	beq.n	80118ac <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801189e:	23ff      	movs	r3, #255	; 0xff
 80118a0:	757b      	strb	r3, [r7, #21]
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118a8:	631a      	str	r2, [r3, #48]	; 0x30
 80118aa:	e05e      	b.n	801196a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80118ac:	7bfb      	ldrb	r3, [r7, #15]
 80118ae:	2b0f      	cmp	r3, #15
 80118b0:	d136      	bne.n	8011920 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80118b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d154      	bne.n	801196a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80118c0:	7dbb      	ldrb	r3, [r7, #22]
 80118c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d00d      	beq.n	80118e6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6a1b      	ldr	r3, [r3, #32]
 80118ce:	7b5b      	ldrb	r3, [r3, #13]
 80118d0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80118d2:	7dbb      	ldrb	r3, [r7, #22]
 80118d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80118d8:	75bb      	strb	r3, [r7, #22]
 80118da:	7dbb      	ldrb	r3, [r7, #22]
 80118dc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	695a      	ldr	r2, [r3, #20]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80118e6:	7dba      	ldrb	r2, [r7, #22]
 80118e8:	7d7b      	ldrb	r3, [r7, #21]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d115      	bne.n	801191a <dir_find+0x106>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a1b      	ldr	r3, [r3, #32]
 80118f2:	330d      	adds	r3, #13
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	7d3a      	ldrb	r2, [r7, #20]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d10e      	bne.n	801191a <dir_find+0x106>
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	68da      	ldr	r2, [r3, #12]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6a1b      	ldr	r3, [r3, #32]
 8011904:	4619      	mov	r1, r3
 8011906:	4610      	mov	r0, r2
 8011908:	f7ff fcf2 	bl	80112f0 <cmp_lfn>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d003      	beq.n	801191a <dir_find+0x106>
 8011912:	7d7b      	ldrb	r3, [r7, #21]
 8011914:	3b01      	subs	r3, #1
 8011916:	b2db      	uxtb	r3, r3
 8011918:	e000      	b.n	801191c <dir_find+0x108>
 801191a:	23ff      	movs	r3, #255	; 0xff
 801191c:	757b      	strb	r3, [r7, #21]
 801191e:	e024      	b.n	801196a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011920:	7d7b      	ldrb	r3, [r7, #21]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d109      	bne.n	801193a <dir_find+0x126>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6a1b      	ldr	r3, [r3, #32]
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff feaa 	bl	8011684 <sum_sfn>
 8011930:	4603      	mov	r3, r0
 8011932:	461a      	mov	r2, r3
 8011934:	7d3b      	ldrb	r3, [r7, #20]
 8011936:	4293      	cmp	r3, r2
 8011938:	d024      	beq.n	8011984 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011940:	f003 0301 	and.w	r3, r3, #1
 8011944:	2b00      	cmp	r3, #0
 8011946:	d10a      	bne.n	801195e <dir_find+0x14a>
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6a18      	ldr	r0, [r3, #32]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	3324      	adds	r3, #36	; 0x24
 8011950:	220b      	movs	r2, #11
 8011952:	4619      	mov	r1, r3
 8011954:	f7fe fd64 	bl	8010420 <mem_cmp>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	d014      	beq.n	8011988 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801195e:	23ff      	movs	r3, #255	; 0xff
 8011960:	757b      	strb	r3, [r7, #21]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011968:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801196a:	2100      	movs	r1, #0
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f7ff fb73 	bl	8011058 <dir_next>
 8011972:	4603      	mov	r3, r0
 8011974:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011976:	7dfb      	ldrb	r3, [r7, #23]
 8011978:	2b00      	cmp	r3, #0
 801197a:	f43f af65 	beq.w	8011848 <dir_find+0x34>
 801197e:	e004      	b.n	801198a <dir_find+0x176>
		if (res != FR_OK) break;
 8011980:	bf00      	nop
 8011982:	e002      	b.n	801198a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011984:	bf00      	nop
 8011986:	e000      	b.n	801198a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011988:	bf00      	nop

	return res;
 801198a:	7dfb      	ldrb	r3, [r7, #23]
}
 801198c:	4618      	mov	r0, r3
 801198e:	3718      	adds	r7, #24
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b08c      	sub	sp, #48	; 0x30
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80119a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d001      	beq.n	80119b4 <dir_register+0x20>
 80119b0:	2306      	movs	r3, #6
 80119b2:	e0e0      	b.n	8011b76 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80119b4:	2300      	movs	r3, #0
 80119b6:	627b      	str	r3, [r7, #36]	; 0x24
 80119b8:	e002      	b.n	80119c0 <dir_register+0x2c>
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	3301      	adds	r3, #1
 80119be:	627b      	str	r3, [r7, #36]	; 0x24
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	68da      	ldr	r2, [r3, #12]
 80119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c6:	005b      	lsls	r3, r3, #1
 80119c8:	4413      	add	r3, r2
 80119ca:	881b      	ldrh	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1f4      	bne.n	80119ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80119d6:	f107 030c 	add.w	r3, r7, #12
 80119da:	220c      	movs	r2, #12
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fe fce3 	bl	80103a8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80119e2:	7dfb      	ldrb	r3, [r7, #23]
 80119e4:	f003 0301 	and.w	r3, r3, #1
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d032      	beq.n	8011a52 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2240      	movs	r2, #64	; 0x40
 80119f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80119f4:	2301      	movs	r3, #1
 80119f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80119f8:	e016      	b.n	8011a28 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	68da      	ldr	r2, [r3, #12]
 8011a04:	f107 010c 	add.w	r1, r7, #12
 8011a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0a:	f7ff fdad 	bl	8011568 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7ff ff00 	bl	8011814 <dir_find>
 8011a14:	4603      	mov	r3, r0
 8011a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8011a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d106      	bne.n	8011a30 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a24:	3301      	adds	r3, #1
 8011a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2a:	2b63      	cmp	r3, #99	; 0x63
 8011a2c:	d9e5      	bls.n	80119fa <dir_register+0x66>
 8011a2e:	e000      	b.n	8011a32 <dir_register+0x9e>
			if (res != FR_OK) break;
 8011a30:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a34:	2b64      	cmp	r3, #100	; 0x64
 8011a36:	d101      	bne.n	8011a3c <dir_register+0xa8>
 8011a38:	2307      	movs	r3, #7
 8011a3a:	e09c      	b.n	8011b76 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a40:	2b04      	cmp	r3, #4
 8011a42:	d002      	beq.n	8011a4a <dir_register+0xb6>
 8011a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a48:	e095      	b.n	8011b76 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011a4a:	7dfa      	ldrb	r2, [r7, #23]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	f003 0302 	and.w	r3, r3, #2
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d007      	beq.n	8011a6c <dir_register+0xd8>
 8011a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5e:	330c      	adds	r3, #12
 8011a60:	4a47      	ldr	r2, [pc, #284]	; (8011b80 <dir_register+0x1ec>)
 8011a62:	fba2 2303 	umull	r2, r3, r2, r3
 8011a66:	089b      	lsrs	r3, r3, #2
 8011a68:	3301      	adds	r3, #1
 8011a6a:	e000      	b.n	8011a6e <dir_register+0xda>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011a70:	6a39      	ldr	r1, [r7, #32]
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f7ff fbb5 	bl	80111e2 <dir_alloc>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d148      	bne.n	8011b18 <dir_register+0x184>
 8011a86:	6a3b      	ldr	r3, [r7, #32]
 8011a88:	3b01      	subs	r3, #1
 8011a8a:	623b      	str	r3, [r7, #32]
 8011a8c:	6a3b      	ldr	r3, [r7, #32]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d042      	beq.n	8011b18 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	695a      	ldr	r2, [r3, #20]
 8011a96:	6a3b      	ldr	r3, [r7, #32]
 8011a98:	015b      	lsls	r3, r3, #5
 8011a9a:	1ad3      	subs	r3, r2, r3
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f7ff fa5f 	bl	8010f62 <dir_sdi>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8011aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d132      	bne.n	8011b18 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	3324      	adds	r3, #36	; 0x24
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff fde4 	bl	8011684 <sum_sfn>
 8011abc:	4603      	mov	r3, r0
 8011abe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	69db      	ldr	r3, [r3, #28]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	69f8      	ldr	r0, [r7, #28]
 8011ac8:	f7fe fe9c 	bl	8010804 <move_window>
 8011acc:	4603      	mov	r3, r0
 8011ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8011ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d11d      	bne.n	8011b16 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	68d8      	ldr	r0, [r3, #12]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6a19      	ldr	r1, [r3, #32]
 8011ae2:	6a3b      	ldr	r3, [r7, #32]
 8011ae4:	b2da      	uxtb	r2, r3
 8011ae6:	7efb      	ldrb	r3, [r7, #27]
 8011ae8:	f7ff fcd6 	bl	8011498 <put_lfn>
				fs->wflag = 1;
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	2201      	movs	r2, #1
 8011af0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011af2:	2100      	movs	r1, #0
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f7ff faaf 	bl	8011058 <dir_next>
 8011afa:	4603      	mov	r3, r0
 8011afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8011b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d107      	bne.n	8011b18 <dir_register+0x184>
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	623b      	str	r3, [r7, #32]
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1d5      	bne.n	8011ac0 <dir_register+0x12c>
 8011b14:	e000      	b.n	8011b18 <dir_register+0x184>
				if (res != FR_OK) break;
 8011b16:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d128      	bne.n	8011b72 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	69db      	ldr	r3, [r3, #28]
 8011b24:	4619      	mov	r1, r3
 8011b26:	69f8      	ldr	r0, [r7, #28]
 8011b28:	f7fe fe6c 	bl	8010804 <move_window>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8011b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d11b      	bne.n	8011b72 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6a1b      	ldr	r3, [r3, #32]
 8011b3e:	2220      	movs	r2, #32
 8011b40:	2100      	movs	r1, #0
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fe fc51 	bl	80103ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6a18      	ldr	r0, [r3, #32]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	3324      	adds	r3, #36	; 0x24
 8011b50:	220b      	movs	r2, #11
 8011b52:	4619      	mov	r1, r3
 8011b54:	f7fe fc28 	bl	80103a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6a1b      	ldr	r3, [r3, #32]
 8011b62:	330c      	adds	r3, #12
 8011b64:	f002 0218 	and.w	r2, r2, #24
 8011b68:	b2d2      	uxtb	r2, r2
 8011b6a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	2201      	movs	r2, #1
 8011b70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3730      	adds	r7, #48	; 0x30
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	4ec4ec4f 	.word	0x4ec4ec4f

08011b84 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	695b      	ldr	r3, [r3, #20]
 8011b96:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ba0:	d007      	beq.n	8011bb2 <dir_remove+0x2e>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff f9da 	bl	8010f62 <dir_sdi>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	e000      	b.n	8011bb4 <dir_remove+0x30>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011bb6:	7dfb      	ldrb	r3, [r7, #23]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d128      	bne.n	8011c0e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	69db      	ldr	r3, [r3, #28]
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	6938      	ldr	r0, [r7, #16]
 8011bc4:	f7fe fe1e 	bl	8010804 <move_window>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011bcc:	7dfb      	ldrb	r3, [r7, #23]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d115      	bne.n	8011bfe <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a1b      	ldr	r3, [r3, #32]
 8011bd6:	22e5      	movs	r2, #229	; 0xe5
 8011bd8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	2201      	movs	r2, #1
 8011bde:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	695b      	ldr	r3, [r3, #20]
 8011be4:	68fa      	ldr	r2, [r7, #12]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d90b      	bls.n	8011c02 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8011bea:	2100      	movs	r1, #0
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7ff fa33 	bl	8011058 <dir_next>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8011bf6:	7dfb      	ldrb	r3, [r7, #23]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d0df      	beq.n	8011bbc <dir_remove+0x38>
 8011bfc:	e002      	b.n	8011c04 <dir_remove+0x80>
			if (res != FR_OK) break;
 8011bfe:	bf00      	nop
 8011c00:	e000      	b.n	8011c04 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8011c02:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8011c04:	7dfb      	ldrb	r3, [r7, #23]
 8011c06:	2b04      	cmp	r3, #4
 8011c08:	d101      	bne.n	8011c0e <dir_remove+0x8a>
 8011c0a:	2302      	movs	r3, #2
 8011c0c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8011c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b088      	sub	sp, #32
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	69db      	ldr	r3, [r3, #28]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 80c9 	beq.w	8011dca <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c40:	d032      	beq.n	8011ca8 <get_fileinfo+0x90>
			i = j = 0;
 8011c42:	2300      	movs	r3, #0
 8011c44:	61bb      	str	r3, [r7, #24]
 8011c46:	69bb      	ldr	r3, [r7, #24]
 8011c48:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011c4a:	e01b      	b.n	8011c84 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8011c4c:	89fb      	ldrh	r3, [r7, #14]
 8011c4e:	2100      	movs	r1, #0
 8011c50:	4618      	mov	r0, r3
 8011c52:	f002 fa19 	bl	8014088 <ff_convert>
 8011c56:	4603      	mov	r3, r0
 8011c58:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8011c5a:	89fb      	ldrh	r3, [r7, #14]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d102      	bne.n	8011c66 <get_fileinfo+0x4e>
 8011c60:	2300      	movs	r3, #0
 8011c62:	61fb      	str	r3, [r7, #28]
 8011c64:	e01a      	b.n	8011c9c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8011c66:	69fb      	ldr	r3, [r7, #28]
 8011c68:	2b7f      	cmp	r3, #127	; 0x7f
 8011c6a:	d902      	bls.n	8011c72 <get_fileinfo+0x5a>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	61fb      	str	r3, [r7, #28]
 8011c70:	e014      	b.n	8011c9c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	1c5a      	adds	r2, r3, #1
 8011c76:	61fa      	str	r2, [r7, #28]
 8011c78:	89fa      	ldrh	r2, [r7, #14]
 8011c7a:	b2d1      	uxtb	r1, r2
 8011c7c:	683a      	ldr	r2, [r7, #0]
 8011c7e:	4413      	add	r3, r2
 8011c80:	460a      	mov	r2, r1
 8011c82:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	68da      	ldr	r2, [r3, #12]
 8011c88:	69bb      	ldr	r3, [r7, #24]
 8011c8a:	1c59      	adds	r1, r3, #1
 8011c8c:	61b9      	str	r1, [r7, #24]
 8011c8e:	005b      	lsls	r3, r3, #1
 8011c90:	4413      	add	r3, r2
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	81fb      	strh	r3, [r7, #14]
 8011c96:	89fb      	ldrh	r3, [r7, #14]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1d7      	bne.n	8011c4c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8011c9c:	683a      	ldr	r2, [r7, #0]
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	4413      	add	r3, r2
 8011ca2:	3316      	adds	r3, #22
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	61bb      	str	r3, [r7, #24]
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011cb0:	683a      	ldr	r2, [r7, #0]
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	3316      	adds	r3, #22
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8011cbc:	e04c      	b.n	8011d58 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6a1a      	ldr	r2, [r3, #32]
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	1c59      	adds	r1, r3, #1
 8011cc6:	61f9      	str	r1, [r7, #28]
 8011cc8:	4413      	add	r3, r2
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011cce:	7dfb      	ldrb	r3, [r7, #23]
 8011cd0:	2b20      	cmp	r3, #32
 8011cd2:	d100      	bne.n	8011cd6 <get_fileinfo+0xbe>
 8011cd4:	e040      	b.n	8011d58 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011cd6:	7dfb      	ldrb	r3, [r7, #23]
 8011cd8:	2b05      	cmp	r3, #5
 8011cda:	d101      	bne.n	8011ce0 <get_fileinfo+0xc8>
 8011cdc:	23e5      	movs	r3, #229	; 0xe5
 8011cde:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	2b09      	cmp	r3, #9
 8011ce4:	d10f      	bne.n	8011d06 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8011ce6:	89bb      	ldrh	r3, [r7, #12]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d105      	bne.n	8011cf8 <get_fileinfo+0xe0>
 8011cec:	683a      	ldr	r2, [r7, #0]
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	3316      	adds	r3, #22
 8011cf4:	222e      	movs	r2, #46	; 0x2e
 8011cf6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8011cf8:	69bb      	ldr	r3, [r7, #24]
 8011cfa:	1c5a      	adds	r2, r3, #1
 8011cfc:	61ba      	str	r2, [r7, #24]
 8011cfe:	683a      	ldr	r2, [r7, #0]
 8011d00:	4413      	add	r3, r2
 8011d02:	222e      	movs	r2, #46	; 0x2e
 8011d04:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8011d06:	683a      	ldr	r2, [r7, #0]
 8011d08:	69bb      	ldr	r3, [r7, #24]
 8011d0a:	4413      	add	r3, r2
 8011d0c:	3309      	adds	r3, #9
 8011d0e:	7dfa      	ldrb	r2, [r7, #23]
 8011d10:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8011d12:	89bb      	ldrh	r3, [r7, #12]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d11c      	bne.n	8011d52 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8011d18:	7dfb      	ldrb	r3, [r7, #23]
 8011d1a:	2b40      	cmp	r3, #64	; 0x40
 8011d1c:	d913      	bls.n	8011d46 <get_fileinfo+0x12e>
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	2b5a      	cmp	r3, #90	; 0x5a
 8011d22:	d810      	bhi.n	8011d46 <get_fileinfo+0x12e>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a1b      	ldr	r3, [r3, #32]
 8011d28:	330c      	adds	r3, #12
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	2b08      	cmp	r3, #8
 8011d32:	d901      	bls.n	8011d38 <get_fileinfo+0x120>
 8011d34:	2310      	movs	r3, #16
 8011d36:	e000      	b.n	8011d3a <get_fileinfo+0x122>
 8011d38:	2308      	movs	r3, #8
 8011d3a:	4013      	ands	r3, r2
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d002      	beq.n	8011d46 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8011d40:	7dfb      	ldrb	r3, [r7, #23]
 8011d42:	3320      	adds	r3, #32
 8011d44:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8011d46:	683a      	ldr	r2, [r7, #0]
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	3316      	adds	r3, #22
 8011d4e:	7dfa      	ldrb	r2, [r7, #23]
 8011d50:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	3301      	adds	r3, #1
 8011d56:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	2b0a      	cmp	r3, #10
 8011d5c:	d9af      	bls.n	8011cbe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8011d5e:	89bb      	ldrh	r3, [r7, #12]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10d      	bne.n	8011d80 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8011d64:	683a      	ldr	r2, [r7, #0]
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	4413      	add	r3, r2
 8011d6a:	3316      	adds	r3, #22
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6a1b      	ldr	r3, [r3, #32]
 8011d74:	330c      	adds	r3, #12
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d101      	bne.n	8011d80 <get_fileinfo+0x168>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8011d80:	683a      	ldr	r2, [r7, #0]
 8011d82:	69bb      	ldr	r3, [r7, #24]
 8011d84:	4413      	add	r3, r2
 8011d86:	3309      	adds	r3, #9
 8011d88:	2200      	movs	r2, #0
 8011d8a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6a1b      	ldr	r3, [r3, #32]
 8011d90:	7ada      	ldrb	r2, [r3, #11]
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6a1b      	ldr	r3, [r3, #32]
 8011d9a:	331c      	adds	r3, #28
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fe fa99 	bl	80102d4 <ld_dword>
 8011da2:	4602      	mov	r2, r0
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6a1b      	ldr	r3, [r3, #32]
 8011dac:	3316      	adds	r3, #22
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7fe fa90 	bl	80102d4 <ld_dword>
 8011db4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	b29a      	uxth	r2, r3
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	80da      	strh	r2, [r3, #6]
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	0c1b      	lsrs	r3, r3, #16
 8011dc2:	b29a      	uxth	r2, r3
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	809a      	strh	r2, [r3, #4]
 8011dc8:	e000      	b.n	8011dcc <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011dca:	bf00      	nop
}
 8011dcc:	3720      	adds	r7, #32
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
	...

08011dd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b08a      	sub	sp, #40	; 0x28
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	613b      	str	r3, [r7, #16]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	60fb      	str	r3, [r7, #12]
 8011dec:	2300      	movs	r3, #0
 8011dee:	617b      	str	r3, [r7, #20]
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	1c5a      	adds	r2, r3, #1
 8011df8:	61ba      	str	r2, [r7, #24]
 8011dfa:	693a      	ldr	r2, [r7, #16]
 8011dfc:	4413      	add	r3, r2
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e04:	2b1f      	cmp	r3, #31
 8011e06:	d940      	bls.n	8011e8a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e0a:	2b2f      	cmp	r3, #47	; 0x2f
 8011e0c:	d006      	beq.n	8011e1c <create_name+0x48>
 8011e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e10:	2b5c      	cmp	r3, #92	; 0x5c
 8011e12:	d110      	bne.n	8011e36 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011e14:	e002      	b.n	8011e1c <create_name+0x48>
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	3301      	adds	r3, #1
 8011e1a:	61bb      	str	r3, [r7, #24]
 8011e1c:	693a      	ldr	r2, [r7, #16]
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	4413      	add	r3, r2
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	2b2f      	cmp	r3, #47	; 0x2f
 8011e26:	d0f6      	beq.n	8011e16 <create_name+0x42>
 8011e28:	693a      	ldr	r2, [r7, #16]
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	2b5c      	cmp	r3, #92	; 0x5c
 8011e32:	d0f0      	beq.n	8011e16 <create_name+0x42>
			break;
 8011e34:	e02a      	b.n	8011e8c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	2b7f      	cmp	r3, #127	; 0x7f
 8011e3a:	d901      	bls.n	8011e40 <create_name+0x6c>
 8011e3c:	2306      	movs	r3, #6
 8011e3e:	e17d      	b.n	801213c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8011e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e48:	2101      	movs	r1, #1
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f002 f91c 	bl	8014088 <ff_convert>
 8011e50:	4603      	mov	r3, r0
 8011e52:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d101      	bne.n	8011e5e <create_name+0x8a>
 8011e5a:	2306      	movs	r3, #6
 8011e5c:	e16e      	b.n	801213c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e60:	2b7f      	cmp	r3, #127	; 0x7f
 8011e62:	d809      	bhi.n	8011e78 <create_name+0xa4>
 8011e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e66:	4619      	mov	r1, r3
 8011e68:	488d      	ldr	r0, [pc, #564]	; (80120a0 <create_name+0x2cc>)
 8011e6a:	f7fe fb00 	bl	801046e <chk_chr>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d001      	beq.n	8011e78 <create_name+0xa4>
 8011e74:	2306      	movs	r3, #6
 8011e76:	e161      	b.n	801213c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	1c5a      	adds	r2, r3, #1
 8011e7c:	617a      	str	r2, [r7, #20]
 8011e7e:	005b      	lsls	r3, r3, #1
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	4413      	add	r3, r2
 8011e84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e86:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011e88:	e7b4      	b.n	8011df4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011e8a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011e8c:	693a      	ldr	r2, [r7, #16]
 8011e8e:	69bb      	ldr	r3, [r7, #24]
 8011e90:	441a      	add	r2, r3
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e98:	2b1f      	cmp	r3, #31
 8011e9a:	d801      	bhi.n	8011ea0 <create_name+0xcc>
 8011e9c:	2304      	movs	r3, #4
 8011e9e:	e000      	b.n	8011ea2 <create_name+0xce>
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011ea6:	e011      	b.n	8011ecc <create_name+0xf8>
		w = lfn[di - 1];
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011eae:	3b01      	subs	r3, #1
 8011eb0:	005b      	lsls	r3, r3, #1
 8011eb2:	68fa      	ldr	r2, [r7, #12]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	881b      	ldrh	r3, [r3, #0]
 8011eb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8011eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ebc:	2b20      	cmp	r3, #32
 8011ebe:	d002      	beq.n	8011ec6 <create_name+0xf2>
 8011ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ec4:	d106      	bne.n	8011ed4 <create_name+0x100>
		di--;
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	3b01      	subs	r3, #1
 8011eca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1ea      	bne.n	8011ea8 <create_name+0xd4>
 8011ed2:	e000      	b.n	8011ed6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8011ed4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	4413      	add	r3, r2
 8011ede:	2200      	movs	r2, #0
 8011ee0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d101      	bne.n	8011eec <create_name+0x118>
 8011ee8:	2306      	movs	r3, #6
 8011eea:	e127      	b.n	801213c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3324      	adds	r3, #36	; 0x24
 8011ef0:	220b      	movs	r2, #11
 8011ef2:	2120      	movs	r1, #32
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe fa78 	bl	80103ea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011efa:	2300      	movs	r3, #0
 8011efc:	61bb      	str	r3, [r7, #24]
 8011efe:	e002      	b.n	8011f06 <create_name+0x132>
 8011f00:	69bb      	ldr	r3, [r7, #24]
 8011f02:	3301      	adds	r3, #1
 8011f04:	61bb      	str	r3, [r7, #24]
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	005b      	lsls	r3, r3, #1
 8011f0a:	68fa      	ldr	r2, [r7, #12]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	881b      	ldrh	r3, [r3, #0]
 8011f10:	2b20      	cmp	r3, #32
 8011f12:	d0f5      	beq.n	8011f00 <create_name+0x12c>
 8011f14:	69bb      	ldr	r3, [r7, #24]
 8011f16:	005b      	lsls	r3, r3, #1
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	4413      	add	r3, r2
 8011f1c:	881b      	ldrh	r3, [r3, #0]
 8011f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8011f20:	d0ee      	beq.n	8011f00 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d009      	beq.n	8011f3c <create_name+0x168>
 8011f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f2c:	f043 0303 	orr.w	r3, r3, #3
 8011f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011f34:	e002      	b.n	8011f3c <create_name+0x168>
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	3b01      	subs	r3, #1
 8011f3a:	617b      	str	r3, [r7, #20]
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d009      	beq.n	8011f56 <create_name+0x182>
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f48:	3b01      	subs	r3, #1
 8011f4a:	005b      	lsls	r3, r3, #1
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	4413      	add	r3, r2
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	2b2e      	cmp	r3, #46	; 0x2e
 8011f54:	d1ef      	bne.n	8011f36 <create_name+0x162>

	i = b = 0; ni = 8;
 8011f56:	2300      	movs	r3, #0
 8011f58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	623b      	str	r3, [r7, #32]
 8011f60:	2308      	movs	r3, #8
 8011f62:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8011f64:	69bb      	ldr	r3, [r7, #24]
 8011f66:	1c5a      	adds	r2, r3, #1
 8011f68:	61ba      	str	r2, [r7, #24]
 8011f6a:	005b      	lsls	r3, r3, #1
 8011f6c:	68fa      	ldr	r2, [r7, #12]
 8011f6e:	4413      	add	r3, r2
 8011f70:	881b      	ldrh	r3, [r3, #0]
 8011f72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011f74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f000 8090 	beq.w	801209c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f7e:	2b20      	cmp	r3, #32
 8011f80:	d006      	beq.n	8011f90 <create_name+0x1bc>
 8011f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f84:	2b2e      	cmp	r3, #46	; 0x2e
 8011f86:	d10a      	bne.n	8011f9e <create_name+0x1ca>
 8011f88:	69ba      	ldr	r2, [r7, #24]
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d006      	beq.n	8011f9e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8011f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f94:	f043 0303 	orr.w	r3, r3, #3
 8011f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011f9c:	e07d      	b.n	801209a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011f9e:	6a3a      	ldr	r2, [r7, #32]
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d203      	bcs.n	8011fae <create_name+0x1da>
 8011fa6:	69ba      	ldr	r2, [r7, #24]
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d123      	bne.n	8011ff6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	2b0b      	cmp	r3, #11
 8011fb2:	d106      	bne.n	8011fc2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8011fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fb8:	f043 0303 	orr.w	r3, r3, #3
 8011fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011fc0:	e075      	b.n	80120ae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011fc2:	69ba      	ldr	r2, [r7, #24]
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d005      	beq.n	8011fd6 <create_name+0x202>
 8011fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fce:	f043 0303 	orr.w	r3, r3, #3
 8011fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8011fd6:	69ba      	ldr	r2, [r7, #24]
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d866      	bhi.n	80120ac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	61bb      	str	r3, [r7, #24]
 8011fe2:	2308      	movs	r3, #8
 8011fe4:	623b      	str	r3, [r7, #32]
 8011fe6:	230b      	movs	r3, #11
 8011fe8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011fea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fee:	009b      	lsls	r3, r3, #2
 8011ff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011ff4:	e051      	b.n	801209a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8011ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8011ffa:	d914      	bls.n	8012026 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ffe:	2100      	movs	r1, #0
 8012000:	4618      	mov	r0, r3
 8012002:	f002 f841 	bl	8014088 <ff_convert>
 8012006:	4603      	mov	r3, r0
 8012008:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801200a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801200c:	2b00      	cmp	r3, #0
 801200e:	d004      	beq.n	801201a <create_name+0x246>
 8012010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012012:	3b80      	subs	r3, #128	; 0x80
 8012014:	4a23      	ldr	r2, [pc, #140]	; (80120a4 <create_name+0x2d0>)
 8012016:	5cd3      	ldrb	r3, [r2, r3]
 8012018:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801201a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801201e:	f043 0302 	orr.w	r3, r3, #2
 8012022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012028:	2b00      	cmp	r3, #0
 801202a:	d007      	beq.n	801203c <create_name+0x268>
 801202c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801202e:	4619      	mov	r1, r3
 8012030:	481d      	ldr	r0, [pc, #116]	; (80120a8 <create_name+0x2d4>)
 8012032:	f7fe fa1c 	bl	801046e <chk_chr>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d008      	beq.n	801204e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801203c:	235f      	movs	r3, #95	; 0x5f
 801203e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012044:	f043 0303 	orr.w	r3, r3, #3
 8012048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801204c:	e01b      	b.n	8012086 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801204e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012050:	2b40      	cmp	r3, #64	; 0x40
 8012052:	d909      	bls.n	8012068 <create_name+0x294>
 8012054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012056:	2b5a      	cmp	r3, #90	; 0x5a
 8012058:	d806      	bhi.n	8012068 <create_name+0x294>
					b |= 2;
 801205a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801205e:	f043 0302 	orr.w	r3, r3, #2
 8012062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012066:	e00e      	b.n	8012086 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801206a:	2b60      	cmp	r3, #96	; 0x60
 801206c:	d90b      	bls.n	8012086 <create_name+0x2b2>
 801206e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012070:	2b7a      	cmp	r3, #122	; 0x7a
 8012072:	d808      	bhi.n	8012086 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012074:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012078:	f043 0301 	orr.w	r3, r3, #1
 801207c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012082:	3b20      	subs	r3, #32
 8012084:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012086:	6a3b      	ldr	r3, [r7, #32]
 8012088:	1c5a      	adds	r2, r3, #1
 801208a:	623a      	str	r2, [r7, #32]
 801208c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801208e:	b2d1      	uxtb	r1, r2
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	4413      	add	r3, r2
 8012094:	460a      	mov	r2, r1
 8012096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801209a:	e763      	b.n	8011f64 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801209c:	bf00      	nop
 801209e:	e006      	b.n	80120ae <create_name+0x2da>
 80120a0:	0801614c 	.word	0x0801614c
 80120a4:	080168ac 	.word	0x080168ac
 80120a8:	08016158 	.word	0x08016158
			if (si > di) break;			/* No extension */
 80120ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80120b4:	2be5      	cmp	r3, #229	; 0xe5
 80120b6:	d103      	bne.n	80120c0 <create_name+0x2ec>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2205      	movs	r2, #5
 80120bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	2b08      	cmp	r3, #8
 80120c4:	d104      	bne.n	80120d0 <create_name+0x2fc>
 80120c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80120d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80120d4:	f003 030c 	and.w	r3, r3, #12
 80120d8:	2b0c      	cmp	r3, #12
 80120da:	d005      	beq.n	80120e8 <create_name+0x314>
 80120dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80120e0:	f003 0303 	and.w	r3, r3, #3
 80120e4:	2b03      	cmp	r3, #3
 80120e6:	d105      	bne.n	80120f4 <create_name+0x320>
 80120e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120ec:	f043 0302 	orr.w	r3, r3, #2
 80120f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80120f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120f8:	f003 0302 	and.w	r3, r3, #2
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d117      	bne.n	8012130 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012104:	f003 0303 	and.w	r3, r3, #3
 8012108:	2b01      	cmp	r3, #1
 801210a:	d105      	bne.n	8012118 <create_name+0x344>
 801210c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012110:	f043 0310 	orr.w	r3, r3, #16
 8012114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012118:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801211c:	f003 030c 	and.w	r3, r3, #12
 8012120:	2b04      	cmp	r3, #4
 8012122:	d105      	bne.n	8012130 <create_name+0x35c>
 8012124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012128:	f043 0308 	orr.w	r3, r3, #8
 801212c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012136:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801213a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801213c:	4618      	mov	r0, r3
 801213e:	3728      	adds	r7, #40	; 0x28
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b086      	sub	sp, #24
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
 801214c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012158:	e002      	b.n	8012160 <follow_path+0x1c>
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	3301      	adds	r3, #1
 801215e:	603b      	str	r3, [r7, #0]
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	2b2f      	cmp	r3, #47	; 0x2f
 8012166:	d0f8      	beq.n	801215a <follow_path+0x16>
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	2b5c      	cmp	r3, #92	; 0x5c
 801216e:	d0f4      	beq.n	801215a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2200      	movs	r2, #0
 8012174:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	2b1f      	cmp	r3, #31
 801217c:	d80a      	bhi.n	8012194 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2280      	movs	r2, #128	; 0x80
 8012182:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012186:	2100      	movs	r1, #0
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7fe feea 	bl	8010f62 <dir_sdi>
 801218e:	4603      	mov	r3, r0
 8012190:	75fb      	strb	r3, [r7, #23]
 8012192:	e043      	b.n	801221c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012194:	463b      	mov	r3, r7
 8012196:	4619      	mov	r1, r3
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f7ff fe1b 	bl	8011dd4 <create_name>
 801219e:	4603      	mov	r3, r0
 80121a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d134      	bne.n	8012212 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7ff fb33 	bl	8011814 <dir_find>
 80121ae:	4603      	mov	r3, r0
 80121b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80121b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80121ba:	7dfb      	ldrb	r3, [r7, #23]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d00a      	beq.n	80121d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80121c0:	7dfb      	ldrb	r3, [r7, #23]
 80121c2:	2b04      	cmp	r3, #4
 80121c4:	d127      	bne.n	8012216 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80121c6:	7afb      	ldrb	r3, [r7, #11]
 80121c8:	f003 0304 	and.w	r3, r3, #4
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d122      	bne.n	8012216 <follow_path+0xd2>
 80121d0:	2305      	movs	r3, #5
 80121d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80121d4:	e01f      	b.n	8012216 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80121d6:	7afb      	ldrb	r3, [r7, #11]
 80121d8:	f003 0304 	and.w	r3, r3, #4
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d11c      	bne.n	801221a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	799b      	ldrb	r3, [r3, #6]
 80121e4:	f003 0310 	and.w	r3, r3, #16
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d102      	bne.n	80121f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80121ec:	2305      	movs	r3, #5
 80121ee:	75fb      	strb	r3, [r7, #23]
 80121f0:	e014      	b.n	801221c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	695b      	ldr	r3, [r3, #20]
 80121fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012200:	4413      	add	r3, r2
 8012202:	4619      	mov	r1, r3
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f7ff f833 	bl	8011270 <ld_clust>
 801220a:	4602      	mov	r2, r0
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012210:	e7c0      	b.n	8012194 <follow_path+0x50>
			if (res != FR_OK) break;
 8012212:	bf00      	nop
 8012214:	e002      	b.n	801221c <follow_path+0xd8>
				break;
 8012216:	bf00      	nop
 8012218:	e000      	b.n	801221c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801221a:	bf00      	nop
			}
		}
	}

	return res;
 801221c:	7dfb      	ldrb	r3, [r7, #23]
}
 801221e:	4618      	mov	r0, r3
 8012220:	3718      	adds	r7, #24
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012226:	b480      	push	{r7}
 8012228:	b087      	sub	sp, #28
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801222e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012232:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d031      	beq.n	80122a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	617b      	str	r3, [r7, #20]
 8012242:	e002      	b.n	801224a <get_ldnumber+0x24>
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	3301      	adds	r3, #1
 8012248:	617b      	str	r3, [r7, #20]
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	2b1f      	cmp	r3, #31
 8012250:	d903      	bls.n	801225a <get_ldnumber+0x34>
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	2b3a      	cmp	r3, #58	; 0x3a
 8012258:	d1f4      	bne.n	8012244 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	2b3a      	cmp	r3, #58	; 0x3a
 8012260:	d11c      	bne.n	801229c <get_ldnumber+0x76>
			tp = *path;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	1c5a      	adds	r2, r3, #1
 801226c:	60fa      	str	r2, [r7, #12]
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	3b30      	subs	r3, #48	; 0x30
 8012272:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	2b09      	cmp	r3, #9
 8012278:	d80e      	bhi.n	8012298 <get_ldnumber+0x72>
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	429a      	cmp	r2, r3
 8012280:	d10a      	bne.n	8012298 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d107      	bne.n	8012298 <get_ldnumber+0x72>
					vol = (int)i;
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	3301      	adds	r3, #1
 8012290:	617b      	str	r3, [r7, #20]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	697a      	ldr	r2, [r7, #20]
 8012296:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	e002      	b.n	80122a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801229c:	2300      	movs	r3, #0
 801229e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80122a0:	693b      	ldr	r3, [r7, #16]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	371c      	adds	r7, #28
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
	...

080122b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2200      	movs	r2, #0
 80122be:	70da      	strb	r2, [r3, #3]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122c6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80122c8:	6839      	ldr	r1, [r7, #0]
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7fe fa9a 	bl	8010804 <move_window>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d001      	beq.n	80122da <check_fs+0x2a>
 80122d6:	2304      	movs	r3, #4
 80122d8:	e038      	b.n	801234c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	3334      	adds	r3, #52	; 0x34
 80122de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fd ffde 	bl	80102a4 <ld_word>
 80122e8:	4603      	mov	r3, r0
 80122ea:	461a      	mov	r2, r3
 80122ec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d001      	beq.n	80122f8 <check_fs+0x48>
 80122f4:	2303      	movs	r3, #3
 80122f6:	e029      	b.n	801234c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80122fe:	2be9      	cmp	r3, #233	; 0xe9
 8012300:	d009      	beq.n	8012316 <check_fs+0x66>
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012308:	2beb      	cmp	r3, #235	; 0xeb
 801230a:	d11e      	bne.n	801234a <check_fs+0x9a>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012312:	2b90      	cmp	r3, #144	; 0x90
 8012314:	d119      	bne.n	801234a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	3334      	adds	r3, #52	; 0x34
 801231a:	3336      	adds	r3, #54	; 0x36
 801231c:	4618      	mov	r0, r3
 801231e:	f7fd ffd9 	bl	80102d4 <ld_dword>
 8012322:	4603      	mov	r3, r0
 8012324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012328:	4a0a      	ldr	r2, [pc, #40]	; (8012354 <check_fs+0xa4>)
 801232a:	4293      	cmp	r3, r2
 801232c:	d101      	bne.n	8012332 <check_fs+0x82>
 801232e:	2300      	movs	r3, #0
 8012330:	e00c      	b.n	801234c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	3334      	adds	r3, #52	; 0x34
 8012336:	3352      	adds	r3, #82	; 0x52
 8012338:	4618      	mov	r0, r3
 801233a:	f7fd ffcb 	bl	80102d4 <ld_dword>
 801233e:	4603      	mov	r3, r0
 8012340:	4a05      	ldr	r2, [pc, #20]	; (8012358 <check_fs+0xa8>)
 8012342:	4293      	cmp	r3, r2
 8012344:	d101      	bne.n	801234a <check_fs+0x9a>
 8012346:	2300      	movs	r3, #0
 8012348:	e000      	b.n	801234c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801234a:	2302      	movs	r3, #2
}
 801234c:	4618      	mov	r0, r3
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	00544146 	.word	0x00544146
 8012358:	33544146 	.word	0x33544146

0801235c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b096      	sub	sp, #88	; 0x58
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	4613      	mov	r3, r2
 8012368:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	2200      	movs	r2, #0
 801236e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f7ff ff58 	bl	8012226 <get_ldnumber>
 8012376:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801237a:	2b00      	cmp	r3, #0
 801237c:	da01      	bge.n	8012382 <find_volume+0x26>
 801237e:	230b      	movs	r3, #11
 8012380:	e230      	b.n	80127e4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012382:	4aa1      	ldr	r2, [pc, #644]	; (8012608 <find_volume+0x2ac>)
 8012384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801238a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238e:	2b00      	cmp	r3, #0
 8012390:	d101      	bne.n	8012396 <find_volume+0x3a>
 8012392:	230c      	movs	r3, #12
 8012394:	e226      	b.n	80127e4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801239a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801239c:	79fb      	ldrb	r3, [r7, #7]
 801239e:	f023 0301 	bic.w	r3, r3, #1
 80123a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80123a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d01a      	beq.n	80123e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80123ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ae:	785b      	ldrb	r3, [r3, #1]
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fd fed9 	bl	8010168 <disk_status>
 80123b6:	4603      	mov	r3, r0
 80123b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80123bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123c0:	f003 0301 	and.w	r3, r3, #1
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d10c      	bne.n	80123e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80123c8:	79fb      	ldrb	r3, [r7, #7]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d007      	beq.n	80123de <find_volume+0x82>
 80123ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123d2:	f003 0304 	and.w	r3, r3, #4
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d001      	beq.n	80123de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80123da:	230a      	movs	r3, #10
 80123dc:	e202      	b.n	80127e4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80123de:	2300      	movs	r3, #0
 80123e0:	e200      	b.n	80127e4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80123e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e4:	2200      	movs	r2, #0
 80123e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80123e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ea:	b2da      	uxtb	r2, r3
 80123ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80123f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f2:	785b      	ldrb	r3, [r3, #1]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fd fed1 	bl	801019c <disk_initialize>
 80123fa:	4603      	mov	r3, r0
 80123fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012404:	f003 0301 	and.w	r3, r3, #1
 8012408:	2b00      	cmp	r3, #0
 801240a:	d001      	beq.n	8012410 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801240c:	2303      	movs	r3, #3
 801240e:	e1e9      	b.n	80127e4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d007      	beq.n	8012426 <find_volume+0xca>
 8012416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801241a:	f003 0304 	and.w	r3, r3, #4
 801241e:	2b00      	cmp	r3, #0
 8012420:	d001      	beq.n	8012426 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012422:	230a      	movs	r3, #10
 8012424:	e1de      	b.n	80127e4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801242a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801242c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801242e:	f7ff ff3f 	bl	80122b0 <check_fs>
 8012432:	4603      	mov	r3, r0
 8012434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801243c:	2b02      	cmp	r3, #2
 801243e:	d149      	bne.n	80124d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012440:	2300      	movs	r3, #0
 8012442:	643b      	str	r3, [r7, #64]	; 0x40
 8012444:	e01e      	b.n	8012484 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012448:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801244c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801244e:	011b      	lsls	r3, r3, #4
 8012450:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012454:	4413      	add	r3, r2
 8012456:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245a:	3304      	adds	r3, #4
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d006      	beq.n	8012470 <find_volume+0x114>
 8012462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012464:	3308      	adds	r3, #8
 8012466:	4618      	mov	r0, r3
 8012468:	f7fd ff34 	bl	80102d4 <ld_dword>
 801246c:	4602      	mov	r2, r0
 801246e:	e000      	b.n	8012472 <find_volume+0x116>
 8012470:	2200      	movs	r2, #0
 8012472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	3358      	adds	r3, #88	; 0x58
 8012478:	443b      	add	r3, r7
 801247a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012480:	3301      	adds	r3, #1
 8012482:	643b      	str	r3, [r7, #64]	; 0x40
 8012484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012486:	2b03      	cmp	r3, #3
 8012488:	d9dd      	bls.n	8012446 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801248a:	2300      	movs	r3, #0
 801248c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012490:	2b00      	cmp	r3, #0
 8012492:	d002      	beq.n	801249a <find_volume+0x13e>
 8012494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012496:	3b01      	subs	r3, #1
 8012498:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801249a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	3358      	adds	r3, #88	; 0x58
 80124a0:	443b      	add	r3, r7
 80124a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80124a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80124a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d005      	beq.n	80124ba <find_volume+0x15e>
 80124ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124b2:	f7ff fefd 	bl	80122b0 <check_fs>
 80124b6:	4603      	mov	r3, r0
 80124b8:	e000      	b.n	80124bc <find_volume+0x160>
 80124ba:	2303      	movs	r3, #3
 80124bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80124c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d905      	bls.n	80124d4 <find_volume+0x178>
 80124c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124ca:	3301      	adds	r3, #1
 80124cc:	643b      	str	r3, [r7, #64]	; 0x40
 80124ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124d0:	2b03      	cmp	r3, #3
 80124d2:	d9e2      	bls.n	801249a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80124d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124d8:	2b04      	cmp	r3, #4
 80124da:	d101      	bne.n	80124e0 <find_volume+0x184>
 80124dc:	2301      	movs	r3, #1
 80124de:	e181      	b.n	80127e4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80124e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d901      	bls.n	80124ec <find_volume+0x190>
 80124e8:	230d      	movs	r3, #13
 80124ea:	e17b      	b.n	80127e4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80124ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ee:	3334      	adds	r3, #52	; 0x34
 80124f0:	330b      	adds	r3, #11
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fd fed6 	bl	80102a4 <ld_word>
 80124f8:	4603      	mov	r3, r0
 80124fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124fe:	d001      	beq.n	8012504 <find_volume+0x1a8>
 8012500:	230d      	movs	r3, #13
 8012502:	e16f      	b.n	80127e4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012506:	3334      	adds	r3, #52	; 0x34
 8012508:	3316      	adds	r3, #22
 801250a:	4618      	mov	r0, r3
 801250c:	f7fd feca 	bl	80102a4 <ld_word>
 8012510:	4603      	mov	r3, r0
 8012512:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <find_volume+0x1cc>
 801251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251c:	3334      	adds	r3, #52	; 0x34
 801251e:	3324      	adds	r3, #36	; 0x24
 8012520:	4618      	mov	r0, r3
 8012522:	f7fd fed7 	bl	80102d4 <ld_dword>
 8012526:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801252c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012530:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012536:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253a:	789b      	ldrb	r3, [r3, #2]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d005      	beq.n	801254c <find_volume+0x1f0>
 8012540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012542:	789b      	ldrb	r3, [r3, #2]
 8012544:	2b02      	cmp	r3, #2
 8012546:	d001      	beq.n	801254c <find_volume+0x1f0>
 8012548:	230d      	movs	r3, #13
 801254a:	e14b      	b.n	80127e4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	789b      	ldrb	r3, [r3, #2]
 8012550:	461a      	mov	r2, r3
 8012552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012554:	fb02 f303 	mul.w	r3, r2, r3
 8012558:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012560:	b29a      	uxth	r2, r3
 8012562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012564:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012568:	895b      	ldrh	r3, [r3, #10]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d008      	beq.n	8012580 <find_volume+0x224>
 801256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012570:	895b      	ldrh	r3, [r3, #10]
 8012572:	461a      	mov	r2, r3
 8012574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012576:	895b      	ldrh	r3, [r3, #10]
 8012578:	3b01      	subs	r3, #1
 801257a:	4013      	ands	r3, r2
 801257c:	2b00      	cmp	r3, #0
 801257e:	d001      	beq.n	8012584 <find_volume+0x228>
 8012580:	230d      	movs	r3, #13
 8012582:	e12f      	b.n	80127e4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012586:	3334      	adds	r3, #52	; 0x34
 8012588:	3311      	adds	r3, #17
 801258a:	4618      	mov	r0, r3
 801258c:	f7fd fe8a 	bl	80102a4 <ld_word>
 8012590:	4603      	mov	r3, r0
 8012592:	461a      	mov	r2, r3
 8012594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012596:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801259a:	891b      	ldrh	r3, [r3, #8]
 801259c:	f003 030f 	and.w	r3, r3, #15
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d001      	beq.n	80125aa <find_volume+0x24e>
 80125a6:	230d      	movs	r3, #13
 80125a8:	e11c      	b.n	80127e4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80125aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ac:	3334      	adds	r3, #52	; 0x34
 80125ae:	3313      	adds	r3, #19
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fd fe77 	bl	80102a4 <ld_word>
 80125b6:	4603      	mov	r3, r0
 80125b8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80125ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d106      	bne.n	80125ce <find_volume+0x272>
 80125c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c2:	3334      	adds	r3, #52	; 0x34
 80125c4:	3320      	adds	r3, #32
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7fd fe84 	bl	80102d4 <ld_dword>
 80125cc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80125ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d0:	3334      	adds	r3, #52	; 0x34
 80125d2:	330e      	adds	r3, #14
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7fd fe65 	bl	80102a4 <ld_word>
 80125da:	4603      	mov	r3, r0
 80125dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80125de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d101      	bne.n	80125e8 <find_volume+0x28c>
 80125e4:	230d      	movs	r3, #13
 80125e6:	e0fd      	b.n	80127e4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80125e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80125ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ec:	4413      	add	r3, r2
 80125ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125f0:	8912      	ldrh	r2, [r2, #8]
 80125f2:	0912      	lsrs	r2, r2, #4
 80125f4:	b292      	uxth	r2, r2
 80125f6:	4413      	add	r3, r2
 80125f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80125fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80125fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fe:	429a      	cmp	r2, r3
 8012600:	d204      	bcs.n	801260c <find_volume+0x2b0>
 8012602:	230d      	movs	r3, #13
 8012604:	e0ee      	b.n	80127e4 <find_volume+0x488>
 8012606:	bf00      	nop
 8012608:	20001b80 	.word	0x20001b80
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801260c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012614:	8952      	ldrh	r2, [r2, #10]
 8012616:	fbb3 f3f2 	udiv	r3, r3, r2
 801261a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261e:	2b00      	cmp	r3, #0
 8012620:	d101      	bne.n	8012626 <find_volume+0x2ca>
 8012622:	230d      	movs	r3, #13
 8012624:	e0de      	b.n	80127e4 <find_volume+0x488>
		fmt = FS_FAT32;
 8012626:	2303      	movs	r3, #3
 8012628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012632:	4293      	cmp	r3, r2
 8012634:	d802      	bhi.n	801263c <find_volume+0x2e0>
 8012636:	2302      	movs	r3, #2
 8012638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012642:	4293      	cmp	r3, r2
 8012644:	d802      	bhi.n	801264c <find_volume+0x2f0>
 8012646:	2301      	movs	r3, #1
 8012648:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264e:	1c9a      	adds	r2, r3, #2
 8012650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012652:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012658:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801265a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801265e:	441a      	add	r2, r3
 8012660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012662:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012664:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	441a      	add	r2, r3
 801266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801266e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012672:	2b03      	cmp	r3, #3
 8012674:	d11e      	bne.n	80126b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012678:	3334      	adds	r3, #52	; 0x34
 801267a:	332a      	adds	r3, #42	; 0x2a
 801267c:	4618      	mov	r0, r3
 801267e:	f7fd fe11 	bl	80102a4 <ld_word>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d001      	beq.n	801268c <find_volume+0x330>
 8012688:	230d      	movs	r3, #13
 801268a:	e0ab      	b.n	80127e4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801268e:	891b      	ldrh	r3, [r3, #8]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d001      	beq.n	8012698 <find_volume+0x33c>
 8012694:	230d      	movs	r3, #13
 8012696:	e0a5      	b.n	80127e4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	3334      	adds	r3, #52	; 0x34
 801269c:	332c      	adds	r3, #44	; 0x2c
 801269e:	4618      	mov	r0, r3
 80126a0:	f7fd fe18 	bl	80102d4 <ld_dword>
 80126a4:	4602      	mov	r2, r0
 80126a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80126aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ac:	699b      	ldr	r3, [r3, #24]
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	647b      	str	r3, [r7, #68]	; 0x44
 80126b2:	e01f      	b.n	80126f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80126b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b6:	891b      	ldrh	r3, [r3, #8]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d101      	bne.n	80126c0 <find_volume+0x364>
 80126bc:	230d      	movs	r3, #13
 80126be:	e091      	b.n	80127e4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80126c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c6:	441a      	add	r2, r3
 80126c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80126cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126d0:	2b02      	cmp	r3, #2
 80126d2:	d103      	bne.n	80126dc <find_volume+0x380>
 80126d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d6:	699b      	ldr	r3, [r3, #24]
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	e00a      	b.n	80126f2 <find_volume+0x396>
 80126dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126de:	699a      	ldr	r2, [r3, #24]
 80126e0:	4613      	mov	r3, r2
 80126e2:	005b      	lsls	r3, r3, #1
 80126e4:	4413      	add	r3, r2
 80126e6:	085a      	lsrs	r2, r3, #1
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	699b      	ldr	r3, [r3, #24]
 80126ec:	f003 0301 	and.w	r3, r3, #1
 80126f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80126f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	69da      	ldr	r2, [r3, #28]
 80126f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80126fe:	0a5b      	lsrs	r3, r3, #9
 8012700:	429a      	cmp	r2, r3
 8012702:	d201      	bcs.n	8012708 <find_volume+0x3ac>
 8012704:	230d      	movs	r3, #13
 8012706:	e06d      	b.n	80127e4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801270e:	615a      	str	r2, [r3, #20]
 8012710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012712:	695a      	ldr	r2, [r3, #20]
 8012714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012716:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271a:	2280      	movs	r2, #128	; 0x80
 801271c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801271e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012722:	2b03      	cmp	r3, #3
 8012724:	d149      	bne.n	80127ba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012728:	3334      	adds	r3, #52	; 0x34
 801272a:	3330      	adds	r3, #48	; 0x30
 801272c:	4618      	mov	r0, r3
 801272e:	f7fd fdb9 	bl	80102a4 <ld_word>
 8012732:	4603      	mov	r3, r0
 8012734:	2b01      	cmp	r3, #1
 8012736:	d140      	bne.n	80127ba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801273a:	3301      	adds	r3, #1
 801273c:	4619      	mov	r1, r3
 801273e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012740:	f7fe f860 	bl	8010804 <move_window>
 8012744:	4603      	mov	r3, r0
 8012746:	2b00      	cmp	r3, #0
 8012748:	d137      	bne.n	80127ba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274c:	2200      	movs	r2, #0
 801274e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	3334      	adds	r3, #52	; 0x34
 8012754:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012758:	4618      	mov	r0, r3
 801275a:	f7fd fda3 	bl	80102a4 <ld_word>
 801275e:	4603      	mov	r3, r0
 8012760:	461a      	mov	r2, r3
 8012762:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012766:	429a      	cmp	r2, r3
 8012768:	d127      	bne.n	80127ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276c:	3334      	adds	r3, #52	; 0x34
 801276e:	4618      	mov	r0, r3
 8012770:	f7fd fdb0 	bl	80102d4 <ld_dword>
 8012774:	4603      	mov	r3, r0
 8012776:	4a1d      	ldr	r2, [pc, #116]	; (80127ec <find_volume+0x490>)
 8012778:	4293      	cmp	r3, r2
 801277a:	d11e      	bne.n	80127ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277e:	3334      	adds	r3, #52	; 0x34
 8012780:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012784:	4618      	mov	r0, r3
 8012786:	f7fd fda5 	bl	80102d4 <ld_dword>
 801278a:	4603      	mov	r3, r0
 801278c:	4a18      	ldr	r2, [pc, #96]	; (80127f0 <find_volume+0x494>)
 801278e:	4293      	cmp	r3, r2
 8012790:	d113      	bne.n	80127ba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012794:	3334      	adds	r3, #52	; 0x34
 8012796:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801279a:	4618      	mov	r0, r3
 801279c:	f7fd fd9a 	bl	80102d4 <ld_dword>
 80127a0:	4602      	mov	r2, r0
 80127a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80127a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a8:	3334      	adds	r3, #52	; 0x34
 80127aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fd fd90 	bl	80102d4 <ld_dword>
 80127b4:	4602      	mov	r2, r0
 80127b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80127ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80127c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80127c2:	4b0c      	ldr	r3, [pc, #48]	; (80127f4 <find_volume+0x498>)
 80127c4:	881b      	ldrh	r3, [r3, #0]
 80127c6:	3301      	adds	r3, #1
 80127c8:	b29a      	uxth	r2, r3
 80127ca:	4b0a      	ldr	r3, [pc, #40]	; (80127f4 <find_volume+0x498>)
 80127cc:	801a      	strh	r2, [r3, #0]
 80127ce:	4b09      	ldr	r3, [pc, #36]	; (80127f4 <find_volume+0x498>)
 80127d0:	881a      	ldrh	r2, [r3, #0]
 80127d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80127d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d8:	4a07      	ldr	r2, [pc, #28]	; (80127f8 <find_volume+0x49c>)
 80127da:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80127dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127de:	f7fd ffa9 	bl	8010734 <clear_lock>
#endif
	return FR_OK;
 80127e2:	2300      	movs	r3, #0
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3758      	adds	r7, #88	; 0x58
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	41615252 	.word	0x41615252
 80127f0:	61417272 	.word	0x61417272
 80127f4:	20001b84 	.word	0x20001b84
 80127f8:	20001ba8 	.word	0x20001ba8

080127fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012806:	2309      	movs	r3, #9
 8012808:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d01c      	beq.n	801284a <validate+0x4e>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d018      	beq.n	801284a <validate+0x4e>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d013      	beq.n	801284a <validate+0x4e>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	889a      	ldrh	r2, [r3, #4]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	88db      	ldrh	r3, [r3, #6]
 801282c:	429a      	cmp	r2, r3
 801282e:	d10c      	bne.n	801284a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	785b      	ldrb	r3, [r3, #1]
 8012836:	4618      	mov	r0, r3
 8012838:	f7fd fc96 	bl	8010168 <disk_status>
 801283c:	4603      	mov	r3, r0
 801283e:	f003 0301 	and.w	r3, r3, #1
 8012842:	2b00      	cmp	r3, #0
 8012844:	d101      	bne.n	801284a <validate+0x4e>
			res = FR_OK;
 8012846:	2300      	movs	r3, #0
 8012848:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801284a:	7bfb      	ldrb	r3, [r7, #15]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d102      	bne.n	8012856 <validate+0x5a>
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	e000      	b.n	8012858 <validate+0x5c>
 8012856:	2300      	movs	r3, #0
 8012858:	683a      	ldr	r2, [r7, #0]
 801285a:	6013      	str	r3, [r2, #0]
	return res;
 801285c:	7bfb      	ldrb	r3, [r7, #15]
}
 801285e:	4618      	mov	r0, r3
 8012860:	3710      	adds	r7, #16
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
	...

08012868 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b088      	sub	sp, #32
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	4613      	mov	r3, r2
 8012874:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801287a:	f107 0310 	add.w	r3, r7, #16
 801287e:	4618      	mov	r0, r3
 8012880:	f7ff fcd1 	bl	8012226 <get_ldnumber>
 8012884:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	2b00      	cmp	r3, #0
 801288a:	da01      	bge.n	8012890 <f_mount+0x28>
 801288c:	230b      	movs	r3, #11
 801288e:	e02b      	b.n	80128e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012890:	4a17      	ldr	r2, [pc, #92]	; (80128f0 <f_mount+0x88>)
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012898:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d005      	beq.n	80128ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80128a0:	69b8      	ldr	r0, [r7, #24]
 80128a2:	f7fd ff47 	bl	8010734 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	2200      	movs	r2, #0
 80128aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d002      	beq.n	80128b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2200      	movs	r2, #0
 80128b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	490d      	ldr	r1, [pc, #52]	; (80128f0 <f_mount+0x88>)
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d002      	beq.n	80128ce <f_mount+0x66>
 80128c8:	79fb      	ldrb	r3, [r7, #7]
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	d001      	beq.n	80128d2 <f_mount+0x6a>
 80128ce:	2300      	movs	r3, #0
 80128d0:	e00a      	b.n	80128e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80128d2:	f107 010c 	add.w	r1, r7, #12
 80128d6:	f107 0308 	add.w	r3, r7, #8
 80128da:	2200      	movs	r2, #0
 80128dc:	4618      	mov	r0, r3
 80128de:	f7ff fd3d 	bl	801235c <find_volume>
 80128e2:	4603      	mov	r3, r0
 80128e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80128e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3720      	adds	r7, #32
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	20001b80 	.word	0x20001b80

080128f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b09a      	sub	sp, #104	; 0x68
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	4613      	mov	r3, r2
 8012900:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d101      	bne.n	801290c <f_open+0x18>
 8012908:	2309      	movs	r3, #9
 801290a:	e1ad      	b.n	8012c68 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801290c:	79fb      	ldrb	r3, [r7, #7]
 801290e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012912:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012914:	79fa      	ldrb	r2, [r7, #7]
 8012916:	f107 0114 	add.w	r1, r7, #20
 801291a:	f107 0308 	add.w	r3, r7, #8
 801291e:	4618      	mov	r0, r3
 8012920:	f7ff fd1c 	bl	801235c <find_volume>
 8012924:	4603      	mov	r3, r0
 8012926:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801292a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801292e:	2b00      	cmp	r3, #0
 8012930:	f040 8191 	bne.w	8012c56 <f_open+0x362>
		dj.obj.fs = fs;
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012938:	68ba      	ldr	r2, [r7, #8]
 801293a:	f107 0318 	add.w	r3, r7, #24
 801293e:	4611      	mov	r1, r2
 8012940:	4618      	mov	r0, r3
 8012942:	f7ff fbff 	bl	8012144 <follow_path>
 8012946:	4603      	mov	r3, r0
 8012948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801294c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012950:	2b00      	cmp	r3, #0
 8012952:	d11a      	bne.n	801298a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012954:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012958:	b25b      	sxtb	r3, r3
 801295a:	2b00      	cmp	r3, #0
 801295c:	da03      	bge.n	8012966 <f_open+0x72>
				res = FR_INVALID_NAME;
 801295e:	2306      	movs	r3, #6
 8012960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012964:	e011      	b.n	801298a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012966:	79fb      	ldrb	r3, [r7, #7]
 8012968:	f023 0301 	bic.w	r3, r3, #1
 801296c:	2b00      	cmp	r3, #0
 801296e:	bf14      	ite	ne
 8012970:	2301      	movne	r3, #1
 8012972:	2300      	moveq	r3, #0
 8012974:	b2db      	uxtb	r3, r3
 8012976:	461a      	mov	r2, r3
 8012978:	f107 0318 	add.w	r3, r7, #24
 801297c:	4611      	mov	r1, r2
 801297e:	4618      	mov	r0, r3
 8012980:	f7fd fd90 	bl	80104a4 <chk_lock>
 8012984:	4603      	mov	r3, r0
 8012986:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	f003 031c 	and.w	r3, r3, #28
 8012990:	2b00      	cmp	r3, #0
 8012992:	d07f      	beq.n	8012a94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012994:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012998:	2b00      	cmp	r3, #0
 801299a:	d017      	beq.n	80129cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801299c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129a0:	2b04      	cmp	r3, #4
 80129a2:	d10e      	bne.n	80129c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80129a4:	f7fd fdda 	bl	801055c <enq_lock>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d006      	beq.n	80129bc <f_open+0xc8>
 80129ae:	f107 0318 	add.w	r3, r7, #24
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fe ffee 	bl	8011994 <dir_register>
 80129b8:	4603      	mov	r3, r0
 80129ba:	e000      	b.n	80129be <f_open+0xca>
 80129bc:	2312      	movs	r3, #18
 80129be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80129c2:	79fb      	ldrb	r3, [r7, #7]
 80129c4:	f043 0308 	orr.w	r3, r3, #8
 80129c8:	71fb      	strb	r3, [r7, #7]
 80129ca:	e010      	b.n	80129ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80129cc:	7fbb      	ldrb	r3, [r7, #30]
 80129ce:	f003 0311 	and.w	r3, r3, #17
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d003      	beq.n	80129de <f_open+0xea>
					res = FR_DENIED;
 80129d6:	2307      	movs	r3, #7
 80129d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80129dc:	e007      	b.n	80129ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80129de:	79fb      	ldrb	r3, [r7, #7]
 80129e0:	f003 0304 	and.w	r3, r3, #4
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d002      	beq.n	80129ee <f_open+0xfa>
 80129e8:	2308      	movs	r3, #8
 80129ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80129ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d168      	bne.n	8012ac8 <f_open+0x1d4>
 80129f6:	79fb      	ldrb	r3, [r7, #7]
 80129f8:	f003 0308 	and.w	r3, r3, #8
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d063      	beq.n	8012ac8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012a00:	f7fb fa3e 	bl	800de80 <get_fattime>
 8012a04:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a08:	330e      	adds	r3, #14
 8012a0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7fd fc9f 	bl	8010350 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a14:	3316      	adds	r3, #22
 8012a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7fd fc99 	bl	8010350 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	330b      	adds	r3, #11
 8012a22:	2220      	movs	r2, #32
 8012a24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a2a:	4611      	mov	r1, r2
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fe fc1f 	bl	8011270 <ld_clust>
 8012a32:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a38:	2200      	movs	r2, #0
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fe fc37 	bl	80112ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a42:	331c      	adds	r3, #28
 8012a44:	2100      	movs	r1, #0
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7fd fc82 	bl	8010350 <st_dword>
					fs->wflag = 1;
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	2201      	movs	r2, #1
 8012a50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d037      	beq.n	8012ac8 <f_open+0x1d4>
						dw = fs->winsect;
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a5c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8012a5e:	f107 0318 	add.w	r3, r7, #24
 8012a62:	2200      	movs	r2, #0
 8012a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7fe f91b 	bl	8010ca2 <remove_chain>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8012a72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d126      	bne.n	8012ac8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fd fec0 	bl	8010804 <move_window>
 8012a84:	4603      	mov	r3, r0
 8012a86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a8e:	3a01      	subs	r2, #1
 8012a90:	611a      	str	r2, [r3, #16]
 8012a92:	e019      	b.n	8012ac8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012a94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d115      	bne.n	8012ac8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012a9c:	7fbb      	ldrb	r3, [r7, #30]
 8012a9e:	f003 0310 	and.w	r3, r3, #16
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d003      	beq.n	8012aae <f_open+0x1ba>
					res = FR_NO_FILE;
 8012aa6:	2304      	movs	r3, #4
 8012aa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012aac:	e00c      	b.n	8012ac8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012aae:	79fb      	ldrb	r3, [r7, #7]
 8012ab0:	f003 0302 	and.w	r3, r3, #2
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d007      	beq.n	8012ac8 <f_open+0x1d4>
 8012ab8:	7fbb      	ldrb	r3, [r7, #30]
 8012aba:	f003 0301 	and.w	r3, r3, #1
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d002      	beq.n	8012ac8 <f_open+0x1d4>
						res = FR_DENIED;
 8012ac2:	2307      	movs	r3, #7
 8012ac4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012ac8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d128      	bne.n	8012b22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012ad0:	79fb      	ldrb	r3, [r7, #7]
 8012ad2:	f003 0308 	and.w	r3, r3, #8
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d003      	beq.n	8012ae2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012ada:	79fb      	ldrb	r3, [r7, #7]
 8012adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ae0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012af0:	79fb      	ldrb	r3, [r7, #7]
 8012af2:	f023 0301 	bic.w	r3, r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	bf14      	ite	ne
 8012afa:	2301      	movne	r3, #1
 8012afc:	2300      	moveq	r3, #0
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	461a      	mov	r2, r3
 8012b02:	f107 0318 	add.w	r3, r7, #24
 8012b06:	4611      	mov	r1, r2
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7fd fd49 	bl	80105a0 <inc_lock>
 8012b0e:	4602      	mov	r2, r0
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d102      	bne.n	8012b22 <f_open+0x22e>
 8012b1c:	2302      	movs	r3, #2
 8012b1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012b22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f040 8095 	bne.w	8012c56 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b30:	4611      	mov	r1, r2
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fe fb9c 	bl	8011270 <ld_clust>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b40:	331c      	adds	r3, #28
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fd fbc6 	bl	80102d4 <ld_dword>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2200      	movs	r2, #0
 8012b52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012b54:	697a      	ldr	r2, [r7, #20]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	88da      	ldrh	r2, [r3, #6]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	79fa      	ldrb	r2, [r7, #7]
 8012b66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2200      	movs	r2, #0
 8012b72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2200      	movs	r2, #0
 8012b78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	3330      	adds	r3, #48	; 0x30
 8012b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b82:	2100      	movs	r1, #0
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fd fc30 	bl	80103ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012b8a:	79fb      	ldrb	r3, [r7, #7]
 8012b8c:	f003 0320 	and.w	r3, r3, #32
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d060      	beq.n	8012c56 <f_open+0x362>
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d05c      	beq.n	8012c56 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	68da      	ldr	r2, [r3, #12]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	895b      	ldrh	r3, [r3, #10]
 8012ba8:	025b      	lsls	r3, r3, #9
 8012baa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	68db      	ldr	r3, [r3, #12]
 8012bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012bb8:	e016      	b.n	8012be8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fd fedb 	bl	801097a <get_fat>
 8012bc4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d802      	bhi.n	8012bd2 <f_open+0x2de>
 8012bcc:	2302      	movs	r3, #2
 8012bce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bd8:	d102      	bne.n	8012be0 <f_open+0x2ec>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012be0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012be4:	1ad3      	subs	r3, r2, r3
 8012be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012be8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d103      	bne.n	8012bf8 <f_open+0x304>
 8012bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d8e0      	bhi.n	8012bba <f_open+0x2c6>
				}
				fp->clust = clst;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012bfc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d127      	bne.n	8012c56 <f_open+0x362>
 8012c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d022      	beq.n	8012c56 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fd fe91 	bl	801093c <clust2sect>
 8012c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d103      	bne.n	8012c2a <f_open+0x336>
						res = FR_INT_ERR;
 8012c22:	2302      	movs	r3, #2
 8012c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012c28:	e015      	b.n	8012c56 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c2c:	0a5a      	lsrs	r2, r3, #9
 8012c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c30:	441a      	add	r2, r3
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	7858      	ldrb	r0, [r3, #1]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6a1a      	ldr	r2, [r3, #32]
 8012c44:	2301      	movs	r3, #1
 8012c46:	f7fd facf 	bl	80101e8 <disk_read>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d002      	beq.n	8012c56 <f_open+0x362>
 8012c50:	2301      	movs	r3, #1
 8012c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012c56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d002      	beq.n	8012c64 <f_open+0x370>
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2200      	movs	r2, #0
 8012c62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3768      	adds	r7, #104	; 0x68
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}

08012c70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b08e      	sub	sp, #56	; 0x38
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	607a      	str	r2, [r7, #4]
 8012c7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	2200      	movs	r2, #0
 8012c86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	f107 0214 	add.w	r2, r7, #20
 8012c8e:	4611      	mov	r1, r2
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7ff fdb3 	bl	80127fc <validate>
 8012c96:	4603      	mov	r3, r0
 8012c98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d107      	bne.n	8012cb4 <f_read+0x44>
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	7d5b      	ldrb	r3, [r3, #21]
 8012ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d002      	beq.n	8012cba <f_read+0x4a>
 8012cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cb8:	e115      	b.n	8012ee6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	7d1b      	ldrb	r3, [r3, #20]
 8012cbe:	f003 0301 	and.w	r3, r3, #1
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d101      	bne.n	8012cca <f_read+0x5a>
 8012cc6:	2307      	movs	r3, #7
 8012cc8:	e10d      	b.n	8012ee6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	68da      	ldr	r2, [r3, #12]
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	699b      	ldr	r3, [r3, #24]
 8012cd2:	1ad3      	subs	r3, r2, r3
 8012cd4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	6a3b      	ldr	r3, [r7, #32]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	f240 80fe 	bls.w	8012edc <f_read+0x26c>
 8012ce0:	6a3b      	ldr	r3, [r7, #32]
 8012ce2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012ce4:	e0fa      	b.n	8012edc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	699b      	ldr	r3, [r3, #24]
 8012cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f040 80c6 	bne.w	8012e80 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	699b      	ldr	r3, [r3, #24]
 8012cf8:	0a5b      	lsrs	r3, r3, #9
 8012cfa:	697a      	ldr	r2, [r7, #20]
 8012cfc:	8952      	ldrh	r2, [r2, #10]
 8012cfe:	3a01      	subs	r2, #1
 8012d00:	4013      	ands	r3, r2
 8012d02:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d12f      	bne.n	8012d6a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	699b      	ldr	r3, [r3, #24]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d103      	bne.n	8012d1a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	633b      	str	r3, [r7, #48]	; 0x30
 8012d18:	e013      	b.n	8012d42 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d007      	beq.n	8012d32 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	699b      	ldr	r3, [r3, #24]
 8012d26:	4619      	mov	r1, r3
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f7fe f8e6 	bl	8010efa <clmt_clust>
 8012d2e:	6338      	str	r0, [r7, #48]	; 0x30
 8012d30:	e007      	b.n	8012d42 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012d32:	68fa      	ldr	r2, [r7, #12]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	69db      	ldr	r3, [r3, #28]
 8012d38:	4619      	mov	r1, r3
 8012d3a:	4610      	mov	r0, r2
 8012d3c:	f7fd fe1d 	bl	801097a <get_fat>
 8012d40:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d804      	bhi.n	8012d52 <f_read+0xe2>
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	755a      	strb	r2, [r3, #21]
 8012d4e:	2302      	movs	r3, #2
 8012d50:	e0c9      	b.n	8012ee6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d58:	d104      	bne.n	8012d64 <f_read+0xf4>
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	755a      	strb	r2, [r3, #21]
 8012d60:	2301      	movs	r3, #1
 8012d62:	e0c0      	b.n	8012ee6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d68:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012d6a:	697a      	ldr	r2, [r7, #20]
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	69db      	ldr	r3, [r3, #28]
 8012d70:	4619      	mov	r1, r3
 8012d72:	4610      	mov	r0, r2
 8012d74:	f7fd fde2 	bl	801093c <clust2sect>
 8012d78:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012d7a:	69bb      	ldr	r3, [r7, #24]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d104      	bne.n	8012d8a <f_read+0x11a>
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2202      	movs	r2, #2
 8012d84:	755a      	strb	r2, [r3, #21]
 8012d86:	2302      	movs	r3, #2
 8012d88:	e0ad      	b.n	8012ee6 <f_read+0x276>
			sect += csect;
 8012d8a:	69ba      	ldr	r2, [r7, #24]
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	4413      	add	r3, r2
 8012d90:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	0a5b      	lsrs	r3, r3, #9
 8012d96:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d039      	beq.n	8012e12 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012d9e:	69fa      	ldr	r2, [r7, #28]
 8012da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da2:	4413      	add	r3, r2
 8012da4:	697a      	ldr	r2, [r7, #20]
 8012da6:	8952      	ldrh	r2, [r2, #10]
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d905      	bls.n	8012db8 <f_read+0x148>
					cc = fs->csize - csect;
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	895b      	ldrh	r3, [r3, #10]
 8012db0:	461a      	mov	r2, r3
 8012db2:	69fb      	ldr	r3, [r7, #28]
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	7858      	ldrb	r0, [r3, #1]
 8012dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dbe:	69ba      	ldr	r2, [r7, #24]
 8012dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012dc2:	f7fd fa11 	bl	80101e8 <disk_read>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d004      	beq.n	8012dd6 <f_read+0x166>
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	2201      	movs	r2, #1
 8012dd0:	755a      	strb	r2, [r3, #21]
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e087      	b.n	8012ee6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	7d1b      	ldrb	r3, [r3, #20]
 8012dda:	b25b      	sxtb	r3, r3
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	da14      	bge.n	8012e0a <f_read+0x19a>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	6a1a      	ldr	r2, [r3, #32]
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d90d      	bls.n	8012e0a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	6a1a      	ldr	r2, [r3, #32]
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	1ad3      	subs	r3, r2, r3
 8012df6:	025b      	lsls	r3, r3, #9
 8012df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dfa:	18d0      	adds	r0, r2, r3
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	3330      	adds	r3, #48	; 0x30
 8012e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e04:	4619      	mov	r1, r3
 8012e06:	f7fd facf 	bl	80103a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0c:	025b      	lsls	r3, r3, #9
 8012e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012e10:	e050      	b.n	8012eb4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	6a1b      	ldr	r3, [r3, #32]
 8012e16:	69ba      	ldr	r2, [r7, #24]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d02e      	beq.n	8012e7a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	7d1b      	ldrb	r3, [r3, #20]
 8012e20:	b25b      	sxtb	r3, r3
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	da18      	bge.n	8012e58 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	7858      	ldrb	r0, [r3, #1]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	6a1a      	ldr	r2, [r3, #32]
 8012e34:	2301      	movs	r3, #1
 8012e36:	f7fd f9f7 	bl	8010228 <disk_write>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d004      	beq.n	8012e4a <f_read+0x1da>
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2201      	movs	r2, #1
 8012e44:	755a      	strb	r2, [r3, #21]
 8012e46:	2301      	movs	r3, #1
 8012e48:	e04d      	b.n	8012ee6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7d1b      	ldrb	r3, [r3, #20]
 8012e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	7858      	ldrb	r0, [r3, #1]
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e62:	2301      	movs	r3, #1
 8012e64:	69ba      	ldr	r2, [r7, #24]
 8012e66:	f7fd f9bf 	bl	80101e8 <disk_read>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d004      	beq.n	8012e7a <f_read+0x20a>
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	2201      	movs	r2, #1
 8012e74:	755a      	strb	r2, [r3, #21]
 8012e76:	2301      	movs	r3, #1
 8012e78:	e035      	b.n	8012ee6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	69ba      	ldr	r2, [r7, #24]
 8012e7e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	699b      	ldr	r3, [r3, #24]
 8012e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e88:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d901      	bls.n	8012e9a <f_read+0x22a>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	699b      	ldr	r3, [r3, #24]
 8012ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ea8:	4413      	add	r3, r2
 8012eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012eac:	4619      	mov	r1, r3
 8012eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012eb0:	f7fd fa7a 	bl	80103a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb8:	4413      	add	r3, r2
 8012eba:	627b      	str	r3, [r7, #36]	; 0x24
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	699a      	ldr	r2, [r3, #24]
 8012ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec2:	441a      	add	r2, r3
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	619a      	str	r2, [r3, #24]
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ece:	441a      	add	r2, r3
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	601a      	str	r2, [r3, #0]
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	f47f af01 	bne.w	8012ce6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012ee4:	2300      	movs	r3, #0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3738      	adds	r7, #56	; 0x38
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012eee:	b580      	push	{r7, lr}
 8012ef0:	b086      	sub	sp, #24
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f107 0208 	add.w	r2, r7, #8
 8012efc:	4611      	mov	r1, r2
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7ff fc7c 	bl	80127fc <validate>
 8012f04:	4603      	mov	r3, r0
 8012f06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012f08:	7dfb      	ldrb	r3, [r7, #23]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d168      	bne.n	8012fe0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	7d1b      	ldrb	r3, [r3, #20]
 8012f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d062      	beq.n	8012fe0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	7d1b      	ldrb	r3, [r3, #20]
 8012f1e:	b25b      	sxtb	r3, r3
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	da15      	bge.n	8012f50 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	7858      	ldrb	r0, [r3, #1]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6a1a      	ldr	r2, [r3, #32]
 8012f32:	2301      	movs	r3, #1
 8012f34:	f7fd f978 	bl	8010228 <disk_write>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d001      	beq.n	8012f42 <f_sync+0x54>
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e04f      	b.n	8012fe2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	7d1b      	ldrb	r3, [r3, #20]
 8012f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f4a:	b2da      	uxtb	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012f50:	f7fa ff96 	bl	800de80 <get_fattime>
 8012f54:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012f56:	68ba      	ldr	r2, [r7, #8]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	4610      	mov	r0, r2
 8012f60:	f7fd fc50 	bl	8010804 <move_window>
 8012f64:	4603      	mov	r3, r0
 8012f66:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012f68:	7dfb      	ldrb	r3, [r7, #23]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d138      	bne.n	8012fe0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f72:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	330b      	adds	r3, #11
 8012f78:	781a      	ldrb	r2, [r3, #0]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	330b      	adds	r3, #11
 8012f7e:	f042 0220 	orr.w	r2, r2, #32
 8012f82:	b2d2      	uxtb	r2, r2
 8012f84:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6818      	ldr	r0, [r3, #0]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	689b      	ldr	r3, [r3, #8]
 8012f8e:	461a      	mov	r2, r3
 8012f90:	68f9      	ldr	r1, [r7, #12]
 8012f92:	f7fe f98c 	bl	80112ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	f103 021c 	add.w	r2, r3, #28
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	68db      	ldr	r3, [r3, #12]
 8012fa0:	4619      	mov	r1, r3
 8012fa2:	4610      	mov	r0, r2
 8012fa4:	f7fd f9d4 	bl	8010350 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	3316      	adds	r3, #22
 8012fac:	6939      	ldr	r1, [r7, #16]
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fd f9ce 	bl	8010350 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	3312      	adds	r3, #18
 8012fb8:	2100      	movs	r1, #0
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7fd f9ad 	bl	801031a <st_word>
					fs->wflag = 1;
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fd fc49 	bl	8010860 <sync_fs>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	7d1b      	ldrb	r3, [r3, #20]
 8012fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012fda:	b2da      	uxtb	r2, r3
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3718      	adds	r7, #24
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012fea:	b580      	push	{r7, lr}
 8012fec:	b084      	sub	sp, #16
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff ff7b 	bl	8012eee <f_sync>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012ffc:	7bfb      	ldrb	r3, [r7, #15]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d118      	bne.n	8013034 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f107 0208 	add.w	r2, r7, #8
 8013008:	4611      	mov	r1, r2
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff fbf6 	bl	80127fc <validate>
 8013010:	4603      	mov	r3, r0
 8013012:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013014:	7bfb      	ldrb	r3, [r7, #15]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d10c      	bne.n	8013034 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	691b      	ldr	r3, [r3, #16]
 801301e:	4618      	mov	r0, r3
 8013020:	f7fd fb4c 	bl	80106bc <dec_lock>
 8013024:	4603      	mov	r3, r0
 8013026:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013028:	7bfb      	ldrb	r3, [r7, #15]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d102      	bne.n	8013034 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2200      	movs	r2, #0
 8013032:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013034:	7bfb      	ldrb	r3, [r7, #15]
}
 8013036:	4618      	mov	r0, r3
 8013038:	3710      	adds	r7, #16
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b086      	sub	sp, #24
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d101      	bne.n	8013052 <f_opendir+0x14>
 801304e:	2309      	movs	r3, #9
 8013050:	e064      	b.n	801311c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8013056:	f107 010c 	add.w	r1, r7, #12
 801305a:	463b      	mov	r3, r7
 801305c:	2200      	movs	r2, #0
 801305e:	4618      	mov	r0, r3
 8013060:	f7ff f97c 	bl	801235c <find_volume>
 8013064:	4603      	mov	r3, r0
 8013066:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013068:	7dfb      	ldrb	r3, [r7, #23]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d14f      	bne.n	801310e <f_opendir+0xd0>
		obj->fs = fs;
 801306e:	68fa      	ldr	r2, [r7, #12]
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	4619      	mov	r1, r3
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f7ff f863 	bl	8012144 <follow_path>
 801307e:	4603      	mov	r3, r0
 8013080:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8013082:	7dfb      	ldrb	r3, [r7, #23]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d13d      	bne.n	8013104 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801308e:	b25b      	sxtb	r3, r3
 8013090:	2b00      	cmp	r3, #0
 8013092:	db12      	blt.n	80130ba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	799b      	ldrb	r3, [r3, #6]
 8013098:	f003 0310 	and.w	r3, r3, #16
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00a      	beq.n	80130b6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6a1b      	ldr	r3, [r3, #32]
 80130a6:	4619      	mov	r1, r3
 80130a8:	4610      	mov	r0, r2
 80130aa:	f7fe f8e1 	bl	8011270 <ld_clust>
 80130ae:	4602      	mov	r2, r0
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	609a      	str	r2, [r3, #8]
 80130b4:	e001      	b.n	80130ba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80130b6:	2305      	movs	r3, #5
 80130b8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80130ba:	7dfb      	ldrb	r3, [r7, #23]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d121      	bne.n	8013104 <f_opendir+0xc6>
				obj->id = fs->id;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	88da      	ldrh	r2, [r3, #6]
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80130c8:	2100      	movs	r1, #0
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f7fd ff49 	bl	8010f62 <dir_sdi>
 80130d0:	4603      	mov	r3, r0
 80130d2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80130d4:	7dfb      	ldrb	r3, [r7, #23]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d114      	bne.n	8013104 <f_opendir+0xc6>
					if (obj->sclust) {
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	689b      	ldr	r3, [r3, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d00d      	beq.n	80130fe <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80130e2:	2100      	movs	r1, #0
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7fd fa5b 	bl	80105a0 <inc_lock>
 80130ea:	4602      	mov	r2, r0
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	691b      	ldr	r3, [r3, #16]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d105      	bne.n	8013104 <f_opendir+0xc6>
 80130f8:	2312      	movs	r3, #18
 80130fa:	75fb      	strb	r3, [r7, #23]
 80130fc:	e002      	b.n	8013104 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	2200      	movs	r2, #0
 8013102:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013104:	7dfb      	ldrb	r3, [r7, #23]
 8013106:	2b04      	cmp	r3, #4
 8013108:	d101      	bne.n	801310e <f_opendir+0xd0>
 801310a:	2305      	movs	r3, #5
 801310c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801310e:	7dfb      	ldrb	r3, [r7, #23]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d002      	beq.n	801311a <f_opendir+0xdc>
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	2200      	movs	r2, #0
 8013118:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801311a:	7dfb      	ldrb	r3, [r7, #23]
}
 801311c:	4618      	mov	r0, r3
 801311e:	3718      	adds	r7, #24
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f107 0208 	add.w	r2, r7, #8
 8013132:	4611      	mov	r1, r2
 8013134:	4618      	mov	r0, r3
 8013136:	f7ff fb61 	bl	80127fc <validate>
 801313a:	4603      	mov	r3, r0
 801313c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801313e:	7bfb      	ldrb	r3, [r7, #15]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d110      	bne.n	8013166 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	691b      	ldr	r3, [r3, #16]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d006      	beq.n	801315a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	691b      	ldr	r3, [r3, #16]
 8013150:	4618      	mov	r0, r3
 8013152:	f7fd fab3 	bl	80106bc <dec_lock>
 8013156:	4603      	mov	r3, r0
 8013158:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801315a:	7bfb      	ldrb	r3, [r7, #15]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d102      	bne.n	8013166 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2200      	movs	r2, #0
 8013164:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8013166:	7bfb      	ldrb	r3, [r7, #15]
}
 8013168:	4618      	mov	r0, r3
 801316a:	3710      	adds	r7, #16
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f107 0208 	add.w	r2, r7, #8
 8013180:	4611      	mov	r1, r2
 8013182:	4618      	mov	r0, r3
 8013184:	f7ff fb3a 	bl	80127fc <validate>
 8013188:	4603      	mov	r3, r0
 801318a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801318c:	7bfb      	ldrb	r3, [r7, #15]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d126      	bne.n	80131e0 <f_readdir+0x70>
		if (!fno) {
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d106      	bne.n	80131a6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013198:	2100      	movs	r1, #0
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7fd fee1 	bl	8010f62 <dir_sdi>
 80131a0:	4603      	mov	r3, r0
 80131a2:	73fb      	strb	r3, [r7, #15]
 80131a4:	e01c      	b.n	80131e0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80131a6:	2100      	movs	r1, #0
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7fe fa8c 	bl	80116c6 <dir_read>
 80131ae:	4603      	mov	r3, r0
 80131b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80131b2:	7bfb      	ldrb	r3, [r7, #15]
 80131b4:	2b04      	cmp	r3, #4
 80131b6:	d101      	bne.n	80131bc <f_readdir+0x4c>
 80131b8:	2300      	movs	r3, #0
 80131ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80131bc:	7bfb      	ldrb	r3, [r7, #15]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d10e      	bne.n	80131e0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80131c2:	6839      	ldr	r1, [r7, #0]
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f7fe fd27 	bl	8011c18 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80131ca:	2100      	movs	r1, #0
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f7fd ff43 	bl	8011058 <dir_next>
 80131d2:	4603      	mov	r3, r0
 80131d4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
 80131d8:	2b04      	cmp	r3, #4
 80131da:	d101      	bne.n	80131e0 <f_readdir+0x70>
 80131dc:	2300      	movs	r3, #0
 80131de:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80131e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3710      	adds	r7, #16
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}

080131ea <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80131ea:	b580      	push	{r7, lr}
 80131ec:	b092      	sub	sp, #72	; 0x48
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	60f8      	str	r0, [r7, #12]
 80131f2:	60b9      	str	r1, [r7, #8]
 80131f4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80131f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80131fa:	f107 030c 	add.w	r3, r7, #12
 80131fe:	2200      	movs	r2, #0
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff f8ab 	bl	801235c <find_volume>
 8013206:	4603      	mov	r3, r0
 8013208:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801320c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013210:	2b00      	cmp	r3, #0
 8013212:	f040 8099 	bne.w	8013348 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8013216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321e:	695a      	ldr	r2, [r3, #20]
 8013220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013222:	699b      	ldr	r3, [r3, #24]
 8013224:	3b02      	subs	r3, #2
 8013226:	429a      	cmp	r2, r3
 8013228:	d804      	bhi.n	8013234 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801322c:	695a      	ldr	r2, [r3, #20]
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	601a      	str	r2, [r3, #0]
 8013232:	e089      	b.n	8013348 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8013234:	2300      	movs	r3, #0
 8013236:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8013238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	2b01      	cmp	r3, #1
 801323e:	d128      	bne.n	8013292 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8013240:	2302      	movs	r3, #2
 8013242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013246:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8013248:	f107 0314 	add.w	r3, r7, #20
 801324c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801324e:	4618      	mov	r0, r3
 8013250:	f7fd fb93 	bl	801097a <get_fat>
 8013254:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8013256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801325c:	d103      	bne.n	8013266 <f_getfree+0x7c>
 801325e:	2301      	movs	r3, #1
 8013260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013264:	e063      	b.n	801332e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8013266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013268:	2b01      	cmp	r3, #1
 801326a:	d103      	bne.n	8013274 <f_getfree+0x8a>
 801326c:	2302      	movs	r3, #2
 801326e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8013272:	e05c      	b.n	801332e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8013274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013276:	2b00      	cmp	r3, #0
 8013278:	d102      	bne.n	8013280 <f_getfree+0x96>
 801327a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801327c:	3301      	adds	r3, #1
 801327e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8013280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013282:	3301      	adds	r3, #1
 8013284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013288:	699b      	ldr	r3, [r3, #24]
 801328a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801328c:	429a      	cmp	r2, r3
 801328e:	d3db      	bcc.n	8013248 <f_getfree+0x5e>
 8013290:	e04d      	b.n	801332e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8013292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013294:	699b      	ldr	r3, [r3, #24]
 8013296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801329e:	2300      	movs	r3, #0
 80132a0:	637b      	str	r3, [r7, #52]	; 0x34
 80132a2:	2300      	movs	r3, #0
 80132a4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80132a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d113      	bne.n	80132d4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80132ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b0:	1c5a      	adds	r2, r3, #1
 80132b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80132b4:	4619      	mov	r1, r3
 80132b6:	f7fd faa5 	bl	8010804 <move_window>
 80132ba:	4603      	mov	r3, r0
 80132bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80132c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d131      	bne.n	801332c <f_getfree+0x142>
							p = fs->win;
 80132c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ca:	3334      	adds	r3, #52	; 0x34
 80132cc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80132ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132d2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80132d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	2b02      	cmp	r3, #2
 80132da:	d10f      	bne.n	80132fc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80132dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132de:	f7fc ffe1 	bl	80102a4 <ld_word>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d102      	bne.n	80132ee <f_getfree+0x104>
 80132e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ea:	3301      	adds	r3, #1
 80132ec:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80132ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f0:	3302      	adds	r3, #2
 80132f2:	633b      	str	r3, [r7, #48]	; 0x30
 80132f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132f6:	3b02      	subs	r3, #2
 80132f8:	637b      	str	r3, [r7, #52]	; 0x34
 80132fa:	e010      	b.n	801331e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80132fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132fe:	f7fc ffe9 	bl	80102d4 <ld_dword>
 8013302:	4603      	mov	r3, r0
 8013304:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013308:	2b00      	cmp	r3, #0
 801330a:	d102      	bne.n	8013312 <f_getfree+0x128>
 801330c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801330e:	3301      	adds	r3, #1
 8013310:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8013312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013314:	3304      	adds	r3, #4
 8013316:	633b      	str	r3, [r7, #48]	; 0x30
 8013318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801331a:	3b04      	subs	r3, #4
 801331c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013320:	3b01      	subs	r3, #1
 8013322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013326:	2b00      	cmp	r3, #0
 8013328:	d1bd      	bne.n	80132a6 <f_getfree+0xbc>
 801332a:	e000      	b.n	801332e <f_getfree+0x144>
							if (res != FR_OK) break;
 801332c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013332:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8013334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013338:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801333c:	791a      	ldrb	r2, [r3, #4]
 801333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013340:	f042 0201 	orr.w	r2, r2, #1
 8013344:	b2d2      	uxtb	r2, r2
 8013346:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8013348:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801334c:	4618      	mov	r0, r3
 801334e:	3748      	adds	r7, #72	; 0x48
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b0a0      	sub	sp, #128	; 0x80
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801335c:	2300      	movs	r3, #0
 801335e:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013360:	f107 010c 	add.w	r1, r7, #12
 8013364:	1d3b      	adds	r3, r7, #4
 8013366:	2202      	movs	r2, #2
 8013368:	4618      	mov	r0, r3
 801336a:	f7fe fff7 	bl	801235c <find_volume>
 801336e:	4603      	mov	r3, r0
 8013370:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8013378:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801337c:	2b00      	cmp	r3, #0
 801337e:	f040 808e 	bne.w	801349e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013388:	4611      	mov	r1, r2
 801338a:	4618      	mov	r0, r3
 801338c:	f7fe feda 	bl	8012144 <follow_path>
 8013390:	4603      	mov	r3, r0
 8013392:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013396:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801339a:	2b00      	cmp	r3, #0
 801339c:	d108      	bne.n	80133b0 <f_unlink+0x5c>
 801339e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80133a2:	2102      	movs	r1, #2
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fd f87d 	bl	80104a4 <chk_lock>
 80133aa:	4603      	mov	r3, r0
 80133ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80133b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d172      	bne.n	801349e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80133b8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80133bc:	b25b      	sxtb	r3, r3
 80133be:	2b00      	cmp	r3, #0
 80133c0:	da03      	bge.n	80133ca <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80133c2:	2306      	movs	r3, #6
 80133c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80133c8:	e008      	b.n	80133dc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80133ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80133ce:	f003 0301 	and.w	r3, r3, #1
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d002      	beq.n	80133dc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80133d6:	2307      	movs	r3, #7
 80133d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80133dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d134      	bne.n	801344e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80133e8:	4611      	mov	r1, r2
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7fd ff40 	bl	8011270 <ld_clust>
 80133f0:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80133f2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80133f6:	f003 0310 	and.w	r3, r3, #16
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d027      	beq.n	801344e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013404:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013406:	f107 0310 	add.w	r3, r7, #16
 801340a:	2100      	movs	r1, #0
 801340c:	4618      	mov	r0, r3
 801340e:	f7fd fda8 	bl	8010f62 <dir_sdi>
 8013412:	4603      	mov	r3, r0
 8013414:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8013418:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801341c:	2b00      	cmp	r3, #0
 801341e:	d116      	bne.n	801344e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013420:	f107 0310 	add.w	r3, r7, #16
 8013424:	2100      	movs	r1, #0
 8013426:	4618      	mov	r0, r3
 8013428:	f7fe f94d 	bl	80116c6 <dir_read>
 801342c:	4603      	mov	r3, r0
 801342e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013432:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013436:	2b00      	cmp	r3, #0
 8013438:	d102      	bne.n	8013440 <f_unlink+0xec>
 801343a:	2307      	movs	r3, #7
 801343c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013440:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013444:	2b04      	cmp	r3, #4
 8013446:	d102      	bne.n	801344e <f_unlink+0xfa>
 8013448:	2300      	movs	r3, #0
 801344a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801344e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8013452:	2b00      	cmp	r3, #0
 8013454:	d123      	bne.n	801349e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801345a:	4618      	mov	r0, r3
 801345c:	f7fe fb92 	bl	8011b84 <dir_remove>
 8013460:	4603      	mov	r3, r0
 8013462:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801346a:	2b00      	cmp	r3, #0
 801346c:	d10c      	bne.n	8013488 <f_unlink+0x134>
 801346e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013470:	2b00      	cmp	r3, #0
 8013472:	d009      	beq.n	8013488 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013474:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013478:	2200      	movs	r2, #0
 801347a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801347c:	4618      	mov	r0, r3
 801347e:	f7fd fc10 	bl	8010ca2 <remove_chain>
 8013482:	4603      	mov	r3, r0
 8013484:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013488:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801348c:	2b00      	cmp	r3, #0
 801348e:	d106      	bne.n	801349e <f_unlink+0x14a>
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	4618      	mov	r0, r3
 8013494:	f7fd f9e4 	bl	8010860 <sync_fs>
 8013498:	4603      	mov	r3, r0
 801349a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801349e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3780      	adds	r7, #128	; 0x80
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b098      	sub	sp, #96	; 0x60
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80134b2:	f107 010c 	add.w	r1, r7, #12
 80134b6:	1d3b      	adds	r3, r7, #4
 80134b8:	2202      	movs	r2, #2
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7fe ff4e 	bl	801235c <find_volume>
 80134c0:	4603      	mov	r3, r0
 80134c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80134ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	f040 80ec 	bne.w	80136ac <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	f107 0310 	add.w	r3, r7, #16
 80134da:	4611      	mov	r1, r2
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fe fe31 	bl	8012144 <follow_path>
 80134e2:	4603      	mov	r3, r0
 80134e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80134e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d102      	bne.n	80134f6 <f_mkdir+0x4c>
 80134f0:	2308      	movs	r3, #8
 80134f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80134f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134fa:	2b04      	cmp	r3, #4
 80134fc:	f040 80d6 	bne.w	80136ac <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013500:	f107 0310 	add.w	r3, r7, #16
 8013504:	2100      	movs	r1, #0
 8013506:	4618      	mov	r0, r3
 8013508:	f7fd fc5f 	bl	8010dca <create_chain>
 801350c:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	895b      	ldrh	r3, [r3, #10]
 8013512:	025b      	lsls	r3, r3, #9
 8013514:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8013516:	2300      	movs	r3, #0
 8013518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801351e:	2b00      	cmp	r3, #0
 8013520:	d102      	bne.n	8013528 <f_mkdir+0x7e>
 8013522:	2307      	movs	r3, #7
 8013524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8013528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801352a:	2b01      	cmp	r3, #1
 801352c:	d102      	bne.n	8013534 <f_mkdir+0x8a>
 801352e:	2302      	movs	r3, #2
 8013530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801353a:	d102      	bne.n	8013542 <f_mkdir+0x98>
 801353c:	2301      	movs	r3, #1
 801353e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013546:	2b00      	cmp	r3, #0
 8013548:	d106      	bne.n	8013558 <f_mkdir+0xae>
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	4618      	mov	r0, r3
 801354e:	f7fd f915 	bl	801077c <sync_window>
 8013552:	4603      	mov	r3, r0
 8013554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8013558:	f7fa fc92 	bl	800de80 <get_fattime>
 801355c:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 801355e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013562:	2b00      	cmp	r3, #0
 8013564:	d16a      	bne.n	801363c <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801356a:	4618      	mov	r0, r3
 801356c:	f7fd f9e6 	bl	801093c <clust2sect>
 8013570:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	3334      	adds	r3, #52	; 0x34
 8013576:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8013578:	f44f 7200 	mov.w	r2, #512	; 0x200
 801357c:	2100      	movs	r1, #0
 801357e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013580:	f7fc ff33 	bl	80103ea <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013584:	220b      	movs	r2, #11
 8013586:	2120      	movs	r1, #32
 8013588:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801358a:	f7fc ff2e 	bl	80103ea <mem_set>
					dir[DIR_Name] = '.';
 801358e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013590:	222e      	movs	r2, #46	; 0x2e
 8013592:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013596:	330b      	adds	r3, #11
 8013598:	2210      	movs	r2, #16
 801359a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801359c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801359e:	3316      	adds	r3, #22
 80135a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7fc fed4 	bl	8010350 <st_dword>
					st_clust(fs, dir, dcl);
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fd fe7d 	bl	80112ae <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80135b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135b6:	3320      	adds	r3, #32
 80135b8:	2220      	movs	r2, #32
 80135ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fc fef3 	bl	80103a8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80135c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135c4:	3321      	adds	r3, #33	; 0x21
 80135c6:	222e      	movs	r2, #46	; 0x2e
 80135c8:	701a      	strb	r2, [r3, #0]
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	2b03      	cmp	r3, #3
 80135d4:	d106      	bne.n	80135e4 <f_mkdir+0x13a>
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135dc:	429a      	cmp	r2, r3
 80135de:	d101      	bne.n	80135e4 <f_mkdir+0x13a>
 80135e0:	2300      	movs	r3, #0
 80135e2:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135e8:	3320      	adds	r3, #32
 80135ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135ec:	4619      	mov	r1, r3
 80135ee:	f7fd fe5e 	bl	80112ae <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	895b      	ldrh	r3, [r3, #10]
 80135f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80135f8:	e01b      	b.n	8013632 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80135fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135fc:	1c5a      	adds	r2, r3, #1
 80135fe:	657a      	str	r2, [r7, #84]	; 0x54
 8013600:	68fa      	ldr	r2, [r7, #12]
 8013602:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2201      	movs	r2, #1
 8013608:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	4618      	mov	r0, r3
 801360e:	f7fd f8b5 	bl	801077c <sync_window>
 8013612:	4603      	mov	r3, r0
 8013614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8013618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801361c:	2b00      	cmp	r3, #0
 801361e:	d10c      	bne.n	801363a <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013624:	2100      	movs	r1, #0
 8013626:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013628:	f7fc fedf 	bl	80103ea <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801362c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801362e:	3b01      	subs	r3, #1
 8013630:	65bb      	str	r3, [r7, #88]	; 0x58
 8013632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1e0      	bne.n	80135fa <f_mkdir+0x150>
 8013638:	e000      	b.n	801363c <f_mkdir+0x192>
					if (res != FR_OK) break;
 801363a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801363c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013640:	2b00      	cmp	r3, #0
 8013642:	d107      	bne.n	8013654 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013644:	f107 0310 	add.w	r3, r7, #16
 8013648:	4618      	mov	r0, r3
 801364a:	f7fe f9a3 	bl	8011994 <dir_register>
 801364e:	4603      	mov	r3, r0
 8013650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8013654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013658:	2b00      	cmp	r3, #0
 801365a:	d120      	bne.n	801369e <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013662:	3316      	adds	r3, #22
 8013664:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013666:	4618      	mov	r0, r3
 8013668:	f7fc fe72 	bl	8010350 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013670:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013672:	4618      	mov	r0, r3
 8013674:	f7fd fe1b 	bl	80112ae <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801367a:	330b      	adds	r3, #11
 801367c:	2210      	movs	r2, #16
 801367e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2201      	movs	r2, #1
 8013684:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801368a:	2b00      	cmp	r3, #0
 801368c:	d10e      	bne.n	80136ac <f_mkdir+0x202>
					res = sync_fs(fs);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	4618      	mov	r0, r3
 8013692:	f7fd f8e5 	bl	8010860 <sync_fs>
 8013696:	4603      	mov	r3, r0
 8013698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801369c:	e006      	b.n	80136ac <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801369e:	f107 0310 	add.w	r3, r7, #16
 80136a2:	2200      	movs	r2, #0
 80136a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fd fafb 	bl	8010ca2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80136ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3760      	adds	r7, #96	; 0x60
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80136b8:	b590      	push	{r4, r7, lr}
 80136ba:	b0a1      	sub	sp, #132	; 0x84
 80136bc:	af00      	add	r7, sp, #0
 80136be:	60f8      	str	r0, [r7, #12]
 80136c0:	607a      	str	r2, [r7, #4]
 80136c2:	603b      	str	r3, [r7, #0]
 80136c4:	460b      	mov	r3, r1
 80136c6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80136c8:	2301      	movs	r3, #1
 80136ca:	657b      	str	r3, [r7, #84]	; 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80136cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136d0:	653b      	str	r3, [r7, #80]	; 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80136d2:	f107 030c 	add.w	r3, r7, #12
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fe fda5 	bl	8012226 <get_ldnumber>
 80136dc:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 80136de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	da02      	bge.n	80136ea <f_mkfs+0x32>
 80136e4:	230b      	movs	r3, #11
 80136e6:	f000 bc2e 	b.w	8013f46 <f_mkfs+0x88e>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80136ea:	4a99      	ldr	r2, [pc, #612]	; (8013950 <f_mkfs+0x298>)
 80136ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d005      	beq.n	8013702 <f_mkfs+0x4a>
 80136f6:	4a96      	ldr	r2, [pc, #600]	; (8013950 <f_mkfs+0x298>)
 80136f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136fe:	2200      	movs	r2, #0
 8013700:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8013702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013704:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8013708:	2300      	movs	r3, #0
 801370a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801370e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8013712:	4618      	mov	r0, r3
 8013714:	f7fc fd42 	bl	801019c <disk_initialize>
 8013718:	4603      	mov	r3, r0
 801371a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 801371e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8013722:	f003 0301 	and.w	r3, r3, #1
 8013726:	2b00      	cmp	r3, #0
 8013728:	d002      	beq.n	8013730 <f_mkfs+0x78>
 801372a:	2303      	movs	r3, #3
 801372c:	f000 bc0b 	b.w	8013f46 <f_mkfs+0x88e>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8013730:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8013734:	f003 0304 	and.w	r3, r3, #4
 8013738:	2b00      	cmp	r3, #0
 801373a:	d002      	beq.n	8013742 <f_mkfs+0x8a>
 801373c:	230a      	movs	r3, #10
 801373e:	f000 bc02 	b.w	8013f46 <f_mkfs+0x88e>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8013742:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013746:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801374a:	2103      	movs	r1, #3
 801374c:	4618      	mov	r0, r3
 801374e:	f7fc fd8b 	bl	8010268 <disk_ioctl>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	d10c      	bne.n	8013772 <f_mkfs+0xba>
 8013758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375a:	2b00      	cmp	r3, #0
 801375c:	d009      	beq.n	8013772 <f_mkfs+0xba>
 801375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013764:	d805      	bhi.n	8013772 <f_mkfs+0xba>
 8013766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013768:	1e5a      	subs	r2, r3, #1
 801376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376c:	4013      	ands	r3, r2
 801376e:	2b00      	cmp	r3, #0
 8013770:	d001      	beq.n	8013776 <f_mkfs+0xbe>
 8013772:	2301      	movs	r3, #1
 8013774:	627b      	str	r3, [r7, #36]	; 0x24
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8013776:	f44f 7300 	mov.w	r3, #512	; 0x200
 801377a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d004      	beq.n	801378e <f_mkfs+0xd6>
 8013784:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	429a      	cmp	r2, r3
 801378c:	d309      	bcc.n	80137a2 <f_mkfs+0xea>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013794:	d805      	bhi.n	80137a2 <f_mkfs+0xea>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	1e5a      	subs	r2, r3, #1
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4013      	ands	r3, r2
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d001      	beq.n	80137a6 <f_mkfs+0xee>
 80137a2:	2313      	movs	r3, #19
 80137a4:	e3cf      	b.n	8013f46 <f_mkfs+0x88e>
	au /= ss;	/* Cluster size in unit of sector */
 80137a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80137aa:	687a      	ldr	r2, [r7, #4]
 80137ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80137b0:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	643b      	str	r3, [r7, #64]	; 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80137b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80137ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80137be:	fbb2 f3f3 	udiv	r3, r2, r3
 80137c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80137c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80137c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137ca:	fb02 f303 	mul.w	r3, r2, r3
 80137ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 80137d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d101      	bne.n	80137da <f_mkfs+0x122>
 80137d6:	230e      	movs	r3, #14
 80137d8:	e3b5      	b.n	8013f46 <f_mkfs+0x88e>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80137da:	f107 0220 	add.w	r2, r7, #32
 80137de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80137e2:	2101      	movs	r1, #1
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fc fd3f 	bl	8010268 <disk_ioctl>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d001      	beq.n	80137f4 <f_mkfs+0x13c>
 80137f0:	2301      	movs	r3, #1
 80137f2:	e3a8      	b.n	8013f46 <f_mkfs+0x88e>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80137f4:	7afb      	ldrb	r3, [r7, #11]
 80137f6:	f003 0308 	and.w	r3, r3, #8
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d001      	beq.n	8013802 <f_mkfs+0x14a>
 80137fe:	2300      	movs	r3, #0
 8013800:	e000      	b.n	8013804 <f_mkfs+0x14c>
 8013802:	233f      	movs	r3, #63	; 0x3f
 8013804:	637b      	str	r3, [r7, #52]	; 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8013806:	6a3b      	ldr	r3, [r7, #32]
 8013808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801380a:	429a      	cmp	r2, r3
 801380c:	d901      	bls.n	8013812 <f_mkfs+0x15a>
 801380e:	230e      	movs	r3, #14
 8013810:	e399      	b.n	8013f46 <f_mkfs+0x88e>
		sz_vol -= b_vol;						/* Volume size */
 8013812:	6a3a      	ldr	r2, [r7, #32]
 8013814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013816:	1ad3      	subs	r3, r2, r3
 8013818:	623b      	str	r3, [r7, #32]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 801381a:	6a3b      	ldr	r3, [r7, #32]
 801381c:	2b7f      	cmp	r3, #127	; 0x7f
 801381e:	d801      	bhi.n	8013824 <f_mkfs+0x16c>
 8013820:	230e      	movs	r3, #14
 8013822:	e390      	b.n	8013f46 <f_mkfs+0x88e>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b80      	cmp	r3, #128	; 0x80
 8013828:	d901      	bls.n	801382e <f_mkfs+0x176>
 801382a:	2313      	movs	r3, #19
 801382c:	e38b      	b.n	8013f46 <f_mkfs+0x88e>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 801382e:	7afb      	ldrb	r3, [r7, #11]
 8013830:	f003 0302 	and.w	r3, r3, #2
 8013834:	2b00      	cmp	r3, #0
 8013836:	d00d      	beq.n	8013854 <f_mkfs+0x19c>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8013838:	7afb      	ldrb	r3, [r7, #11]
 801383a:	f003 0307 	and.w	r3, r3, #7
 801383e:	2b02      	cmp	r3, #2
 8013840:	d004      	beq.n	801384c <f_mkfs+0x194>
 8013842:	7afb      	ldrb	r3, [r7, #11]
 8013844:	f003 0301 	and.w	r3, r3, #1
 8013848:	2b00      	cmp	r3, #0
 801384a:	d103      	bne.n	8013854 <f_mkfs+0x19c>
				fmt = FS_FAT32; break;
 801384c:	2303      	movs	r3, #3
 801384e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013852:	e009      	b.n	8013868 <f_mkfs+0x1b0>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8013854:	7afb      	ldrb	r3, [r7, #11]
 8013856:	f003 0301 	and.w	r3, r3, #1
 801385a:	2b00      	cmp	r3, #0
 801385c:	d101      	bne.n	8013862 <f_mkfs+0x1aa>
 801385e:	2313      	movs	r3, #19
 8013860:	e371      	b.n	8013f46 <f_mkfs+0x88e>
		fmt = FS_FAT16;
 8013862:	2302      	movs	r3, #2
 8013864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	663b      	str	r3, [r7, #96]	; 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801386c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013870:	2b03      	cmp	r3, #3
 8013872:	d13e      	bne.n	80138f2 <f_mkfs+0x23a>
				if (!pau) {	/* au auto-selection */
 8013874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013876:	2b00      	cmp	r3, #0
 8013878:	d11b      	bne.n	80138b2 <f_mkfs+0x1fa>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801387a:	6a3b      	ldr	r3, [r7, #32]
 801387c:	0c5b      	lsrs	r3, r3, #17
 801387e:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8013880:	2300      	movs	r3, #0
 8013882:	65bb      	str	r3, [r7, #88]	; 0x58
 8013884:	2301      	movs	r3, #1
 8013886:	663b      	str	r3, [r7, #96]	; 0x60
 8013888:	e005      	b.n	8013896 <f_mkfs+0x1de>
 801388a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801388c:	3301      	adds	r3, #1
 801388e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013892:	005b      	lsls	r3, r3, #1
 8013894:	663b      	str	r3, [r7, #96]	; 0x60
 8013896:	4a2f      	ldr	r2, [pc, #188]	; (8013954 <f_mkfs+0x29c>)
 8013898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801389a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d007      	beq.n	80138b2 <f_mkfs+0x1fa>
 80138a2:	4a2c      	ldr	r2, [pc, #176]	; (8013954 <f_mkfs+0x29c>)
 80138a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80138a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138aa:	461a      	mov	r2, r3
 80138ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80138ae:	4293      	cmp	r3, r2
 80138b0:	d2eb      	bcs.n	801388a <f_mkfs+0x1d2>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80138b2:	6a3a      	ldr	r2, [r7, #32]
 80138b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80138ba:	633b      	str	r3, [r7, #48]	; 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80138bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138be:	3302      	adds	r3, #2
 80138c0:	009a      	lsls	r2, r3, #2
 80138c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80138c6:	4413      	add	r3, r2
 80138c8:	1e5a      	subs	r2, r3, #1
 80138ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80138ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80138d2:	67bb      	str	r3, [r7, #120]	; 0x78
				sz_rsv = 32;	/* Number of reserved sectors */
 80138d4:	2320      	movs	r3, #32
 80138d6:	667b      	str	r3, [r7, #100]	; 0x64
				sz_dir = 0;		/* No static directory */
 80138d8:	2300      	movs	r3, #0
 80138da:	67fb      	str	r3, [r7, #124]	; 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80138dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138de:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80138e2:	4293      	cmp	r3, r2
 80138e4:	d903      	bls.n	80138ee <f_mkfs+0x236>
 80138e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e8:	4a1b      	ldr	r2, [pc, #108]	; (8013958 <f_mkfs+0x2a0>)
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d956      	bls.n	801399c <f_mkfs+0x2e4>
 80138ee:	230e      	movs	r3, #14
 80138f0:	e329      	b.n	8013f46 <f_mkfs+0x88e>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80138f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d11b      	bne.n	8013930 <f_mkfs+0x278>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80138f8:	6a3b      	ldr	r3, [r7, #32]
 80138fa:	0b1b      	lsrs	r3, r3, #12
 80138fc:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80138fe:	2300      	movs	r3, #0
 8013900:	65bb      	str	r3, [r7, #88]	; 0x58
 8013902:	2301      	movs	r3, #1
 8013904:	663b      	str	r3, [r7, #96]	; 0x60
 8013906:	e005      	b.n	8013914 <f_mkfs+0x25c>
 8013908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801390a:	3301      	adds	r3, #1
 801390c:	65bb      	str	r3, [r7, #88]	; 0x58
 801390e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013910:	005b      	lsls	r3, r3, #1
 8013912:	663b      	str	r3, [r7, #96]	; 0x60
 8013914:	4a11      	ldr	r2, [pc, #68]	; (801395c <f_mkfs+0x2a4>)
 8013916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d007      	beq.n	8013930 <f_mkfs+0x278>
 8013920:	4a0e      	ldr	r2, [pc, #56]	; (801395c <f_mkfs+0x2a4>)
 8013922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013928:	461a      	mov	r2, r3
 801392a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801392c:	4293      	cmp	r3, r2
 801392e:	d2eb      	bcs.n	8013908 <f_mkfs+0x250>
				}
				n_clst = sz_vol / pau;
 8013930:	6a3a      	ldr	r2, [r7, #32]
 8013932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013934:	fbb2 f3f3 	udiv	r3, r2, r3
 8013938:	633b      	str	r3, [r7, #48]	; 0x30
				if (n_clst > MAX_FAT12) {
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013940:	4293      	cmp	r3, r2
 8013942:	d90d      	bls.n	8013960 <f_mkfs+0x2a8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8013944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013946:	3302      	adds	r3, #2
 8013948:	005b      	lsls	r3, r3, #1
 801394a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801394c:	e013      	b.n	8013976 <f_mkfs+0x2be>
 801394e:	bf00      	nop
 8013950:	20001b80 	.word	0x20001b80
 8013954:	0801693c 	.word	0x0801693c
 8013958:	0ffffff5 	.word	0x0ffffff5
 801395c:	0801694c 	.word	0x0801694c
				} else {
					fmt = FS_FAT12;
 8013960:	2301      	movs	r3, #1
 8013962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8013966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013968:	4613      	mov	r3, r2
 801396a:	005b      	lsls	r3, r3, #1
 801396c:	4413      	add	r3, r2
 801396e:	3301      	adds	r3, #1
 8013970:	085b      	lsrs	r3, r3, #1
 8013972:	3303      	adds	r3, #3
 8013974:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8013976:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801397c:	4413      	add	r3, r2
 801397e:	1e5a      	subs	r2, r3, #1
 8013980:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013984:	fbb2 f3f3 	udiv	r3, r2, r3
 8013988:	67bb      	str	r3, [r7, #120]	; 0x78
				sz_rsv = 1;						/* Number of reserved sectors */
 801398a:	2301      	movs	r3, #1
 801398c:	667b      	str	r3, [r7, #100]	; 0x64
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801398e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013990:	015a      	lsls	r2, r3, #5
 8013992:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013996:	fbb2 f3f3 	udiv	r3, r2, r3
 801399a:	67fb      	str	r3, [r7, #124]	; 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801399c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801399e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139a0:	4413      	add	r3, r2
 80139a2:	66bb      	str	r3, [r7, #104]	; 0x68
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80139a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80139a8:	fb03 f202 	mul.w	r2, r3, r2
 80139ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80139ae:	4413      	add	r3, r2
 80139b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80139b2:	4413      	add	r3, r2
 80139b4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80139b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ba:	4413      	add	r3, r2
 80139bc:	1e5a      	subs	r2, r3, #1
 80139be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c0:	425b      	negs	r3, r3
 80139c2:	401a      	ands	r2, r3
 80139c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c6:	1ad3      	subs	r3, r2, r3
 80139c8:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80139ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	d108      	bne.n	80139e4 <f_mkfs+0x32c>
				sz_rsv += n; b_fat += n;
 80139d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80139d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139d6:	4413      	add	r3, r2
 80139d8:	667b      	str	r3, [r7, #100]	; 0x64
 80139da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80139dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139de:	4413      	add	r3, r2
 80139e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80139e2:	e006      	b.n	80139f2 <f_mkfs+0x33a>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80139e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80139e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80139ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80139ee:	4413      	add	r3, r2
 80139f0:	67bb      	str	r3, [r7, #120]	; 0x78
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80139f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80139f4:	011a      	lsls	r2, r3, #4
 80139f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f8:	441a      	add	r2, r3
 80139fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139fc:	1ad2      	subs	r2, r2, r3
 80139fe:	6a3b      	ldr	r3, [r7, #32]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d901      	bls.n	8013a08 <f_mkfs+0x350>
 8013a04:	230e      	movs	r3, #14
 8013a06:	e29e      	b.n	8013f46 <f_mkfs+0x88e>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8013a08:	6a3a      	ldr	r2, [r7, #32]
 8013a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a0c:	1ad2      	subs	r2, r2, r3
 8013a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013a12:	fb01 f303 	mul.w	r3, r1, r3
 8013a16:	1ad2      	subs	r2, r2, r3
 8013a18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013a1a:	1ad2      	subs	r2, r2, r3
 8013a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a22:	633b      	str	r3, [r7, #48]	; 0x30
			if (fmt == FS_FAT32) {
 8013a24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a28:	2b03      	cmp	r3, #3
 8013a2a:	d10f      	bne.n	8013a4c <f_mkfs+0x394>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8013a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a32:	4293      	cmp	r3, r2
 8013a34:	d80a      	bhi.n	8013a4c <f_mkfs+0x394>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d105      	bne.n	8013a48 <f_mkfs+0x390>
 8013a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a3e:	085b      	lsrs	r3, r3, #1
 8013a40:	607b      	str	r3, [r7, #4]
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d144      	bne.n	8013ad2 <f_mkfs+0x41a>
					return FR_MKFS_ABORTED;
 8013a48:	230e      	movs	r3, #14
 8013a4a:	e27c      	b.n	8013f46 <f_mkfs+0x88e>
				}
			}
			if (fmt == FS_FAT16) {
 8013a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013a50:	2b02      	cmp	r3, #2
 8013a52:	d133      	bne.n	8013abc <f_mkfs+0x404>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8013a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a56:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d91e      	bls.n	8013a9c <f_mkfs+0x3e4>
					if (!au && (pau * 2) <= 64) {
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d107      	bne.n	8013a74 <f_mkfs+0x3bc>
 8013a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a66:	005b      	lsls	r3, r3, #1
 8013a68:	2b40      	cmp	r3, #64	; 0x40
 8013a6a:	d803      	bhi.n	8013a74 <f_mkfs+0x3bc>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8013a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a6e:	005b      	lsls	r3, r3, #1
 8013a70:	607b      	str	r3, [r7, #4]
 8013a72:	e033      	b.n	8013adc <f_mkfs+0x424>
					}
					if ((opt & FM_FAT32)) {
 8013a74:	7afb      	ldrb	r3, [r7, #11]
 8013a76:	f003 0302 	and.w	r3, r3, #2
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d003      	beq.n	8013a86 <f_mkfs+0x3ce>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8013a7e:	2303      	movs	r3, #3
 8013a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013a84:	e02a      	b.n	8013adc <f_mkfs+0x424>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d105      	bne.n	8013a98 <f_mkfs+0x3e0>
 8013a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a8e:	005b      	lsls	r3, r3, #1
 8013a90:	607b      	str	r3, [r7, #4]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b80      	cmp	r3, #128	; 0x80
 8013a96:	d91e      	bls.n	8013ad6 <f_mkfs+0x41e>
					return FR_MKFS_ABORTED;
 8013a98:	230e      	movs	r3, #14
 8013a9a:	e254      	b.n	8013f46 <f_mkfs+0x88e>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8013a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d80a      	bhi.n	8013abc <f_mkfs+0x404>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d105      	bne.n	8013ab8 <f_mkfs+0x400>
 8013aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013aae:	005b      	lsls	r3, r3, #1
 8013ab0:	607b      	str	r3, [r7, #4]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2b80      	cmp	r3, #128	; 0x80
 8013ab6:	d910      	bls.n	8013ada <f_mkfs+0x422>
					return FR_MKFS_ABORTED;
 8013ab8:	230e      	movs	r3, #14
 8013aba:	e244      	b.n	8013f46 <f_mkfs+0x88e>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8013abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d10c      	bne.n	8013ade <f_mkfs+0x426>
 8013ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013aca:	4293      	cmp	r3, r2
 8013acc:	d907      	bls.n	8013ade <f_mkfs+0x426>
 8013ace:	230e      	movs	r3, #14
 8013ad0:	e239      	b.n	8013f46 <f_mkfs+0x88e>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8013ad2:	bf00      	nop
 8013ad4:	e6c8      	b.n	8013868 <f_mkfs+0x1b0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013ad6:	bf00      	nop
 8013ad8:	e6c6      	b.n	8013868 <f_mkfs+0x1b0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8013ada:	bf00      	nop
			pau = au;
 8013adc:	e6c4      	b.n	8013868 <f_mkfs+0x1b0>

			/* Ok, it is the valid cluster configuration */
			break;
 8013ade:	bf00      	nop
		} while (1);

#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
 8013ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae2:	617b      	str	r3, [r7, #20]
 8013ae4:	6a3a      	ldr	r2, [r7, #32]
 8013ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae8:	4413      	add	r3, r2
 8013aea:	3b01      	subs	r3, #1
 8013aec:	61bb      	str	r3, [r7, #24]
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
 8013aee:	f107 0214 	add.w	r2, r7, #20
 8013af2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8013af6:	2104      	movs	r1, #4
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7fc fbb5 	bl	8010268 <disk_ioctl>
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8013afe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013b02:	461a      	mov	r2, r3
 8013b04:	2100      	movs	r1, #0
 8013b06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013b08:	f7fc fc6f 	bl	80103ea <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8013b0c:	220b      	movs	r2, #11
 8013b0e:	49b4      	ldr	r1, [pc, #720]	; (8013de0 <f_mkfs+0x728>)
 8013b10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013b12:	f7fc fc49 	bl	80103a8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8013b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b18:	330b      	adds	r3, #11
 8013b1a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013b1e:	4611      	mov	r1, r2
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7fc fbfa 	bl	801031a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8013b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b28:	330d      	adds	r3, #13
 8013b2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b2c:	b2d2      	uxtb	r2, r2
 8013b2e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8013b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b32:	330e      	adds	r3, #14
 8013b34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013b36:	b292      	uxth	r2, r2
 8013b38:	4611      	mov	r1, r2
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7fc fbed 	bl	801031a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8013b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b42:	3310      	adds	r3, #16
 8013b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b46:	b2d2      	uxtb	r2, r2
 8013b48:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8013b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b4c:	f103 0211 	add.w	r2, r3, #17
 8013b50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013b54:	2b03      	cmp	r3, #3
 8013b56:	d002      	beq.n	8013b5e <f_mkfs+0x4a6>
 8013b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	e000      	b.n	8013b60 <f_mkfs+0x4a8>
 8013b5e:	2300      	movs	r3, #0
 8013b60:	4619      	mov	r1, r3
 8013b62:	4610      	mov	r0, r2
 8013b64:	f7fc fbd9 	bl	801031a <st_word>
		if (sz_vol < 0x10000) {
 8013b68:	6a3b      	ldr	r3, [r7, #32]
 8013b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b6e:	d208      	bcs.n	8013b82 <f_mkfs+0x4ca>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8013b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b72:	3313      	adds	r3, #19
 8013b74:	6a3a      	ldr	r2, [r7, #32]
 8013b76:	b292      	uxth	r2, r2
 8013b78:	4611      	mov	r1, r2
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fc fbcd 	bl	801031a <st_word>
 8013b80:	e006      	b.n	8013b90 <f_mkfs+0x4d8>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8013b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b84:	3320      	adds	r3, #32
 8013b86:	6a3a      	ldr	r2, [r7, #32]
 8013b88:	4611      	mov	r1, r2
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fc fbe0 	bl	8010350 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8013b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b92:	3315      	adds	r3, #21
 8013b94:	22f8      	movs	r2, #248	; 0xf8
 8013b96:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8013b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b9a:	3318      	adds	r3, #24
 8013b9c:	213f      	movs	r1, #63	; 0x3f
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fc fbbb 	bl	801031a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8013ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ba6:	331a      	adds	r3, #26
 8013ba8:	21ff      	movs	r1, #255	; 0xff
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fc fbb5 	bl	801031a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8013bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bb2:	331c      	adds	r3, #28
 8013bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fc fbca 	bl	8010350 <st_dword>
		if (fmt == FS_FAT32) {
 8013bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013bc0:	2b03      	cmp	r3, #3
 8013bc2:	d131      	bne.n	8013c28 <f_mkfs+0x570>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8013bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bc6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8013bca:	f7fa f959 	bl	800de80 <get_fattime>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f7fc fbbc 	bl	8010350 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8013bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bda:	3324      	adds	r3, #36	; 0x24
 8013bdc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7fc fbb6 	bl	8010350 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8013be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013be6:	332c      	adds	r3, #44	; 0x2c
 8013be8:	2102      	movs	r1, #2
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7fc fbb0 	bl	8010350 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8013bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bf2:	3330      	adds	r3, #48	; 0x30
 8013bf4:	2101      	movs	r1, #1
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7fc fb8f 	bl	801031a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8013bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bfe:	3332      	adds	r3, #50	; 0x32
 8013c00:	2106      	movs	r1, #6
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fc fb89 	bl	801031a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8013c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c0a:	3340      	adds	r3, #64	; 0x40
 8013c0c:	2280      	movs	r2, #128	; 0x80
 8013c0e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8013c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c12:	3342      	adds	r3, #66	; 0x42
 8013c14:	2229      	movs	r2, #41	; 0x29
 8013c16:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8013c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c1a:	3347      	adds	r3, #71	; 0x47
 8013c1c:	2213      	movs	r2, #19
 8013c1e:	4971      	ldr	r1, [pc, #452]	; (8013de4 <f_mkfs+0x72c>)
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fc fbc1 	bl	80103a8 <mem_cpy>
 8013c26:	e020      	b.n	8013c6a <f_mkfs+0x5b2>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8013c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c2a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8013c2e:	f7fa f927 	bl	800de80 <get_fattime>
 8013c32:	4603      	mov	r3, r0
 8013c34:	4619      	mov	r1, r3
 8013c36:	4620      	mov	r0, r4
 8013c38:	f7fc fb8a 	bl	8010350 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8013c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c3e:	3316      	adds	r3, #22
 8013c40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013c42:	b292      	uxth	r2, r2
 8013c44:	4611      	mov	r1, r2
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fc fb67 	bl	801031a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8013c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c4e:	3324      	adds	r3, #36	; 0x24
 8013c50:	2280      	movs	r2, #128	; 0x80
 8013c52:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8013c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c56:	3326      	adds	r3, #38	; 0x26
 8013c58:	2229      	movs	r2, #41	; 0x29
 8013c5a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8013c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c5e:	332b      	adds	r3, #43	; 0x2b
 8013c60:	2213      	movs	r2, #19
 8013c62:	4961      	ldr	r1, [pc, #388]	; (8013de8 <f_mkfs+0x730>)
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7fc fb9f 	bl	80103a8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8013c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013c70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7fc fb50 	bl	801031a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8013c7a:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8013c7e:	2301      	movs	r3, #1
 8013c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013c84:	f7fc fad0 	bl	8010228 <disk_write>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d001      	beq.n	8013c92 <f_mkfs+0x5da>
 8013c8e:	2301      	movs	r3, #1
 8013c90:	e159      	b.n	8013f46 <f_mkfs+0x88e>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8013c92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013c96:	2b03      	cmp	r3, #3
 8013c98:	d141      	bne.n	8013d1e <f_mkfs+0x666>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8013c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c9c:	1d9a      	adds	r2, r3, #6
 8013c9e:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013ca6:	f7fc fabf 	bl	8010228 <disk_write>
			mem_set(buf, 0, ss);
 8013caa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013cae:	461a      	mov	r2, r3
 8013cb0:	2100      	movs	r1, #0
 8013cb2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013cb4:	f7fc fb99 	bl	80103ea <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8013cb8:	494c      	ldr	r1, [pc, #304]	; (8013dec <f_mkfs+0x734>)
 8013cba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013cbc:	f7fc fb48 	bl	8010350 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8013cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013cc6:	494a      	ldr	r1, [pc, #296]	; (8013df0 <f_mkfs+0x738>)
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7fc fb41 	bl	8010350 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8013cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cd0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd6:	3b01      	subs	r3, #1
 8013cd8:	4619      	mov	r1, r3
 8013cda:	4610      	mov	r0, r2
 8013cdc:	f7fc fb38 	bl	8010350 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8013ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ce2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013ce6:	2102      	movs	r1, #2
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fc fb31 	bl	8010350 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8013cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cf0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013cf4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7fc fb0e 	bl	801031a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8013cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d00:	1dda      	adds	r2, r3, #7
 8013d02:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8013d06:	2301      	movs	r3, #1
 8013d08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d0a:	f7fc fa8d 	bl	8010228 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8013d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d10:	1c5a      	adds	r2, r3, #1
 8013d12:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8013d16:	2301      	movs	r3, #1
 8013d18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d1a:	f7fc fa85 	bl	8010228 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8013d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d20:	2100      	movs	r1, #0
 8013d22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013d24:	f7fc fb61 	bl	80103ea <mem_set>
		sect = b_fat;		/* FAT start sector */
 8013d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d2a:	677b      	str	r3, [r7, #116]	; 0x74
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013d30:	e04c      	b.n	8013dcc <f_mkfs+0x714>
			if (fmt == FS_FAT32) {
 8013d32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d36:	2b03      	cmp	r3, #3
 8013d38:	d113      	bne.n	8013d62 <f_mkfs+0x6aa>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8013d3a:	f06f 0107 	mvn.w	r1, #7
 8013d3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013d40:	f7fc fb06 	bl	8010350 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8013d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d46:	3304      	adds	r3, #4
 8013d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fc faff 	bl	8010350 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8013d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d54:	3308      	adds	r3, #8
 8013d56:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fc faf8 	bl	8010350 <st_dword>
 8013d60:	e00b      	b.n	8013d7a <f_mkfs+0x6c2>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8013d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d101      	bne.n	8013d6e <f_mkfs+0x6b6>
 8013d6a:	4b22      	ldr	r3, [pc, #136]	; (8013df4 <f_mkfs+0x73c>)
 8013d6c:	e001      	b.n	8013d72 <f_mkfs+0x6ba>
 8013d6e:	f06f 0307 	mvn.w	r3, #7
 8013d72:	4619      	mov	r1, r3
 8013d74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013d76:	f7fc faeb 	bl	8010350 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8013d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d7c:	673b      	str	r3, [r7, #112]	; 0x70
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8013d7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d82:	4293      	cmp	r3, r2
 8013d84:	bf28      	it	cs
 8013d86:	4613      	movcs	r3, r2
 8013d88:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013d8a:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8013d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d94:	f7fc fa48 	bl	8010228 <disk_write>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d001      	beq.n	8013da2 <f_mkfs+0x6ea>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	e0d1      	b.n	8013f46 <f_mkfs+0x88e>
				mem_set(buf, 0, ss);
 8013da2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013da6:	461a      	mov	r2, r3
 8013da8:	2100      	movs	r1, #0
 8013daa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013dac:	f7fc fb1d 	bl	80103ea <mem_set>
				sect += n; nsect -= n;
 8013db0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013db4:	4413      	add	r3, r2
 8013db6:	677b      	str	r3, [r7, #116]	; 0x74
 8013db8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dbc:	1ad3      	subs	r3, r2, r3
 8013dbe:	673b      	str	r3, [r7, #112]	; 0x70
			} while (nsect);
 8013dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d1db      	bne.n	8013d7e <f_mkfs+0x6c6>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8013dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013dc8:	3301      	adds	r3, #1
 8013dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8013dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d3ae      	bcc.n	8013d32 <f_mkfs+0x67a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8013dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013dd8:	2b03      	cmp	r3, #3
 8013dda:	d10d      	bne.n	8013df8 <f_mkfs+0x740>
 8013ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013dde:	e00c      	b.n	8013dfa <f_mkfs+0x742>
 8013de0:	08016160 	.word	0x08016160
 8013de4:	0801616c 	.word	0x0801616c
 8013de8:	08016180 	.word	0x08016180
 8013dec:	41615252 	.word	0x41615252
 8013df0:	61417272 	.word	0x61417272
 8013df4:	00fffff8 	.word	0x00fffff8
 8013df8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013dfa:	673b      	str	r3, [r7, #112]	; 0x70
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8013dfc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e00:	4293      	cmp	r3, r2
 8013e02:	bf28      	it	cs
 8013e04:	4613      	movcs	r3, r2
 8013e06:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8013e08:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8013e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013e10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e12:	f7fc fa09 	bl	8010228 <disk_write>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d001      	beq.n	8013e20 <f_mkfs+0x768>
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	e092      	b.n	8013f46 <f_mkfs+0x88e>
			sect += n; nsect -= n;
 8013e20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e24:	4413      	add	r3, r2
 8013e26:	677b      	str	r3, [r7, #116]	; 0x74
 8013e28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	673b      	str	r3, [r7, #112]	; 0x70
		} while (nsect);
 8013e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d1e2      	bne.n	8013dfc <f_mkfs+0x744>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8013e36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e3a:	2b03      	cmp	r3, #3
 8013e3c:	d103      	bne.n	8013e46 <f_mkfs+0x78e>
			sys = 0x0C;		/* FAT32X */
 8013e3e:	230c      	movs	r3, #12
 8013e40:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8013e44:	e010      	b.n	8013e68 <f_mkfs+0x7b0>
		} else {
			if (sz_vol >= 0x10000) {
 8013e46:	6a3b      	ldr	r3, [r7, #32]
 8013e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e4c:	d303      	bcc.n	8013e56 <f_mkfs+0x79e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8013e4e:	2306      	movs	r3, #6
 8013e50:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8013e54:	e008      	b.n	8013e68 <f_mkfs+0x7b0>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8013e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013e5a:	2b02      	cmp	r3, #2
 8013e5c:	d101      	bne.n	8013e62 <f_mkfs+0x7aa>
 8013e5e:	2304      	movs	r3, #4
 8013e60:	e000      	b.n	8013e64 <f_mkfs+0x7ac>
 8013e62:	2301      	movs	r3, #1
 8013e64:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8013e68:	7afb      	ldrb	r3, [r7, #11]
 8013e6a:	f003 0308 	and.w	r3, r3, #8
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d15c      	bne.n	8013f2c <f_mkfs+0x874>
			mem_set(buf, 0, ss);
 8013e72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e76:	461a      	mov	r2, r3
 8013e78:	2100      	movs	r1, #0
 8013e7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8013e7c:	f7fc fab5 	bl	80103ea <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8013e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e86:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fc fa45 	bl	801031a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8013e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e92:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013e96:	62bb      	str	r3, [r7, #40]	; 0x28
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8013e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8013e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8013ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea8:	3302      	adds	r3, #2
 8013eaa:	2201      	movs	r2, #1
 8013eac:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8013eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb0:	3303      	adds	r3, #3
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8013eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb8:	3304      	adds	r3, #4
 8013eba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8013ebe:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8013ec0:	6a3a      	ldr	r2, [r7, #32]
 8013ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec4:	441a      	add	r2, r3
 8013ec6:	4b22      	ldr	r3, [pc, #136]	; (8013f50 <f_mkfs+0x898>)
 8013ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8013ecc:	1ad2      	subs	r2, r2, r3
 8013ece:	0852      	lsrs	r2, r2, #1
 8013ed0:	4413      	add	r3, r2
 8013ed2:	0b5b      	lsrs	r3, r3, #13
 8013ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
			pte[PTE_EdHead] = 254;				/* End head */
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	3305      	adds	r3, #5
 8013eda:	22fe      	movs	r2, #254	; 0xfe
 8013edc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8013ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ee0:	089b      	lsrs	r3, r3, #2
 8013ee2:	b2da      	uxtb	r2, r3
 8013ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee6:	3306      	adds	r3, #6
 8013ee8:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8013eec:	b2d2      	uxtb	r2, r2
 8013eee:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8013ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef2:	3307      	adds	r3, #7
 8013ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013ef6:	b2d2      	uxtb	r2, r2
 8013ef8:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8013efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013efc:	3308      	adds	r3, #8
 8013efe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7fc fa25 	bl	8010350 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8013f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f08:	330c      	adds	r3, #12
 8013f0a:	6a3a      	ldr	r2, [r7, #32]
 8013f0c:	4611      	mov	r1, r2
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7fc fa1e 	bl	8010350 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8013f14:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 8013f18:	2301      	movs	r3, #1
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f1e:	f7fc f983 	bl	8010228 <disk_write>
 8013f22:	4603      	mov	r3, r0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d001      	beq.n	8013f2c <f_mkfs+0x874>
 8013f28:	2301      	movs	r3, #1
 8013f2a:	e00c      	b.n	8013f46 <f_mkfs+0x88e>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8013f2c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8013f30:	2200      	movs	r2, #0
 8013f32:	2100      	movs	r1, #0
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7fc f997 	bl	8010268 <disk_ioctl>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d001      	beq.n	8013f44 <f_mkfs+0x88c>
 8013f40:	2301      	movs	r3, #1
 8013f42:	e000      	b.n	8013f46 <f_mkfs+0x88e>

	return FR_OK;
 8013f44:	2300      	movs	r3, #0
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	3784      	adds	r7, #132	; 0x84
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd90      	pop	{r4, r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	0515565b 	.word	0x0515565b

08013f54 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b088      	sub	sp, #32
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013f60:	2300      	movs	r3, #0
 8013f62:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013f68:	e01b      	b.n	8013fa2 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013f6a:	f107 0310 	add.w	r3, r7, #16
 8013f6e:	f107 0114 	add.w	r1, r7, #20
 8013f72:	2201      	movs	r2, #1
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f7fe fe7b 	bl	8012c70 <f_read>
		if (rc != 1) break;
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	2b01      	cmp	r3, #1
 8013f7e:	d116      	bne.n	8013fae <f_gets+0x5a>
		c = s[0];
 8013f80:	7d3b      	ldrb	r3, [r7, #20]
 8013f82:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8013f84:	7dfb      	ldrb	r3, [r7, #23]
 8013f86:	2b0d      	cmp	r3, #13
 8013f88:	d100      	bne.n	8013f8c <f_gets+0x38>
 8013f8a:	e00a      	b.n	8013fa2 <f_gets+0x4e>
		*p++ = c;
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	1c5a      	adds	r2, r3, #1
 8013f90:	61ba      	str	r2, [r7, #24]
 8013f92:	7dfa      	ldrb	r2, [r7, #23]
 8013f94:	701a      	strb	r2, [r3, #0]
		n++;
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	3301      	adds	r3, #1
 8013f9a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013f9c:	7dfb      	ldrb	r3, [r7, #23]
 8013f9e:	2b0a      	cmp	r3, #10
 8013fa0:	d007      	beq.n	8013fb2 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	3b01      	subs	r3, #1
 8013fa6:	69fa      	ldr	r2, [r7, #28]
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	dbde      	blt.n	8013f6a <f_gets+0x16>
 8013fac:	e002      	b.n	8013fb4 <f_gets+0x60>
		if (rc != 1) break;
 8013fae:	bf00      	nop
 8013fb0:	e000      	b.n	8013fb4 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8013fb2:	bf00      	nop
	}
	*p = 0;
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <f_gets+0x70>
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	e000      	b.n	8013fc6 <f_gets+0x72>
 8013fc4:	2300      	movs	r3, #0
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3720      	adds	r7, #32
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
	...

08013fd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b087      	sub	sp, #28
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	60f8      	str	r0, [r7, #12]
 8013fd8:	60b9      	str	r1, [r7, #8]
 8013fda:	4613      	mov	r3, r2
 8013fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013fde:	2301      	movs	r3, #1
 8013fe0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013fe6:	4b1f      	ldr	r3, [pc, #124]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8013fe8:	7a5b      	ldrb	r3, [r3, #9]
 8013fea:	b2db      	uxtb	r3, r3
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d131      	bne.n	8014054 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013ff0:	4b1c      	ldr	r3, [pc, #112]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8013ff2:	7a5b      	ldrb	r3, [r3, #9]
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	4b1a      	ldr	r3, [pc, #104]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8013ffa:	2100      	movs	r1, #0
 8013ffc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013ffe:	4b19      	ldr	r3, [pc, #100]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8014000:	7a5b      	ldrb	r3, [r3, #9]
 8014002:	b2db      	uxtb	r3, r3
 8014004:	4a17      	ldr	r2, [pc, #92]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8014006:	009b      	lsls	r3, r3, #2
 8014008:	4413      	add	r3, r2
 801400a:	68fa      	ldr	r2, [r7, #12]
 801400c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801400e:	4b15      	ldr	r3, [pc, #84]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8014010:	7a5b      	ldrb	r3, [r3, #9]
 8014012:	b2db      	uxtb	r3, r3
 8014014:	461a      	mov	r2, r3
 8014016:	4b13      	ldr	r3, [pc, #76]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8014018:	4413      	add	r3, r2
 801401a:	79fa      	ldrb	r2, [r7, #7]
 801401c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801401e:	4b11      	ldr	r3, [pc, #68]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 8014020:	7a5b      	ldrb	r3, [r3, #9]
 8014022:	b2db      	uxtb	r3, r3
 8014024:	1c5a      	adds	r2, r3, #1
 8014026:	b2d1      	uxtb	r1, r2
 8014028:	4a0e      	ldr	r2, [pc, #56]	; (8014064 <FATFS_LinkDriverEx+0x94>)
 801402a:	7251      	strb	r1, [r2, #9]
 801402c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801402e:	7dbb      	ldrb	r3, [r7, #22]
 8014030:	3330      	adds	r3, #48	; 0x30
 8014032:	b2da      	uxtb	r2, r3
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	3301      	adds	r3, #1
 801403c:	223a      	movs	r2, #58	; 0x3a
 801403e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	3302      	adds	r3, #2
 8014044:	222f      	movs	r2, #47	; 0x2f
 8014046:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	3303      	adds	r3, #3
 801404c:	2200      	movs	r2, #0
 801404e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014050:	2300      	movs	r3, #0
 8014052:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014054:	7dfb      	ldrb	r3, [r7, #23]
}
 8014056:	4618      	mov	r0, r3
 8014058:	371c      	adds	r7, #28
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr
 8014062:	bf00      	nop
 8014064:	20001cac 	.word	0x20001cac

08014068 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b082      	sub	sp, #8
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014072:	2200      	movs	r2, #0
 8014074:	6839      	ldr	r1, [r7, #0]
 8014076:	6878      	ldr	r0, [r7, #4]
 8014078:	f7ff ffaa 	bl	8013fd0 <FATFS_LinkDriverEx>
 801407c:	4603      	mov	r3, r0
}
 801407e:	4618      	mov	r0, r3
 8014080:	3708      	adds	r7, #8
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}
	...

08014088 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014088:	b480      	push	{r7}
 801408a:	b085      	sub	sp, #20
 801408c:	af00      	add	r7, sp, #0
 801408e:	4603      	mov	r3, r0
 8014090:	6039      	str	r1, [r7, #0]
 8014092:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014094:	88fb      	ldrh	r3, [r7, #6]
 8014096:	2b7f      	cmp	r3, #127	; 0x7f
 8014098:	d802      	bhi.n	80140a0 <ff_convert+0x18>
		c = chr;
 801409a:	88fb      	ldrh	r3, [r7, #6]
 801409c:	81fb      	strh	r3, [r7, #14]
 801409e:	e025      	b.n	80140ec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d00b      	beq.n	80140be <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80140a6:	88fb      	ldrh	r3, [r7, #6]
 80140a8:	2bff      	cmp	r3, #255	; 0xff
 80140aa:	d805      	bhi.n	80140b8 <ff_convert+0x30>
 80140ac:	88fb      	ldrh	r3, [r7, #6]
 80140ae:	3b80      	subs	r3, #128	; 0x80
 80140b0:	4a12      	ldr	r2, [pc, #72]	; (80140fc <ff_convert+0x74>)
 80140b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140b6:	e000      	b.n	80140ba <ff_convert+0x32>
 80140b8:	2300      	movs	r3, #0
 80140ba:	81fb      	strh	r3, [r7, #14]
 80140bc:	e016      	b.n	80140ec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80140be:	2300      	movs	r3, #0
 80140c0:	81fb      	strh	r3, [r7, #14]
 80140c2:	e009      	b.n	80140d8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80140c4:	89fb      	ldrh	r3, [r7, #14]
 80140c6:	4a0d      	ldr	r2, [pc, #52]	; (80140fc <ff_convert+0x74>)
 80140c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140cc:	88fa      	ldrh	r2, [r7, #6]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d006      	beq.n	80140e0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80140d2:	89fb      	ldrh	r3, [r7, #14]
 80140d4:	3301      	adds	r3, #1
 80140d6:	81fb      	strh	r3, [r7, #14]
 80140d8:	89fb      	ldrh	r3, [r7, #14]
 80140da:	2b7f      	cmp	r3, #127	; 0x7f
 80140dc:	d9f2      	bls.n	80140c4 <ff_convert+0x3c>
 80140de:	e000      	b.n	80140e2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80140e0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80140e2:	89fb      	ldrh	r3, [r7, #14]
 80140e4:	3380      	adds	r3, #128	; 0x80
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80140ec:	89fb      	ldrh	r3, [r7, #14]
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3714      	adds	r7, #20
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr
 80140fa:	bf00      	nop
 80140fc:	0801695c 	.word	0x0801695c

08014100 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014100:	b480      	push	{r7}
 8014102:	b087      	sub	sp, #28
 8014104:	af00      	add	r7, sp, #0
 8014106:	4603      	mov	r3, r0
 8014108:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801410a:	88fb      	ldrh	r3, [r7, #6]
 801410c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014110:	d201      	bcs.n	8014116 <ff_wtoupper+0x16>
 8014112:	4b3e      	ldr	r3, [pc, #248]	; (801420c <ff_wtoupper+0x10c>)
 8014114:	e000      	b.n	8014118 <ff_wtoupper+0x18>
 8014116:	4b3e      	ldr	r3, [pc, #248]	; (8014210 <ff_wtoupper+0x110>)
 8014118:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	1c9a      	adds	r2, r3, #2
 801411e:	617a      	str	r2, [r7, #20]
 8014120:	881b      	ldrh	r3, [r3, #0]
 8014122:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014124:	8a7b      	ldrh	r3, [r7, #18]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d068      	beq.n	80141fc <ff_wtoupper+0xfc>
 801412a:	88fa      	ldrh	r2, [r7, #6]
 801412c:	8a7b      	ldrh	r3, [r7, #18]
 801412e:	429a      	cmp	r2, r3
 8014130:	d364      	bcc.n	80141fc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	1c9a      	adds	r2, r3, #2
 8014136:	617a      	str	r2, [r7, #20]
 8014138:	881b      	ldrh	r3, [r3, #0]
 801413a:	823b      	strh	r3, [r7, #16]
 801413c:	8a3b      	ldrh	r3, [r7, #16]
 801413e:	0a1b      	lsrs	r3, r3, #8
 8014140:	81fb      	strh	r3, [r7, #14]
 8014142:	8a3b      	ldrh	r3, [r7, #16]
 8014144:	b2db      	uxtb	r3, r3
 8014146:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014148:	88fa      	ldrh	r2, [r7, #6]
 801414a:	8a79      	ldrh	r1, [r7, #18]
 801414c:	8a3b      	ldrh	r3, [r7, #16]
 801414e:	440b      	add	r3, r1
 8014150:	429a      	cmp	r2, r3
 8014152:	da49      	bge.n	80141e8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014154:	89fb      	ldrh	r3, [r7, #14]
 8014156:	2b08      	cmp	r3, #8
 8014158:	d84f      	bhi.n	80141fa <ff_wtoupper+0xfa>
 801415a:	a201      	add	r2, pc, #4	; (adr r2, 8014160 <ff_wtoupper+0x60>)
 801415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014160:	08014185 	.word	0x08014185
 8014164:	08014197 	.word	0x08014197
 8014168:	080141ad 	.word	0x080141ad
 801416c:	080141b5 	.word	0x080141b5
 8014170:	080141bd 	.word	0x080141bd
 8014174:	080141c5 	.word	0x080141c5
 8014178:	080141cd 	.word	0x080141cd
 801417c:	080141d5 	.word	0x080141d5
 8014180:	080141dd 	.word	0x080141dd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014184:	88fa      	ldrh	r2, [r7, #6]
 8014186:	8a7b      	ldrh	r3, [r7, #18]
 8014188:	1ad3      	subs	r3, r2, r3
 801418a:	005b      	lsls	r3, r3, #1
 801418c:	697a      	ldr	r2, [r7, #20]
 801418e:	4413      	add	r3, r2
 8014190:	881b      	ldrh	r3, [r3, #0]
 8014192:	80fb      	strh	r3, [r7, #6]
 8014194:	e027      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014196:	88fa      	ldrh	r2, [r7, #6]
 8014198:	8a7b      	ldrh	r3, [r7, #18]
 801419a:	1ad3      	subs	r3, r2, r3
 801419c:	b29b      	uxth	r3, r3
 801419e:	f003 0301 	and.w	r3, r3, #1
 80141a2:	b29b      	uxth	r3, r3
 80141a4:	88fa      	ldrh	r2, [r7, #6]
 80141a6:	1ad3      	subs	r3, r2, r3
 80141a8:	80fb      	strh	r3, [r7, #6]
 80141aa:	e01c      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80141ac:	88fb      	ldrh	r3, [r7, #6]
 80141ae:	3b10      	subs	r3, #16
 80141b0:	80fb      	strh	r3, [r7, #6]
 80141b2:	e018      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80141b4:	88fb      	ldrh	r3, [r7, #6]
 80141b6:	3b20      	subs	r3, #32
 80141b8:	80fb      	strh	r3, [r7, #6]
 80141ba:	e014      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80141bc:	88fb      	ldrh	r3, [r7, #6]
 80141be:	3b30      	subs	r3, #48	; 0x30
 80141c0:	80fb      	strh	r3, [r7, #6]
 80141c2:	e010      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80141c4:	88fb      	ldrh	r3, [r7, #6]
 80141c6:	3b1a      	subs	r3, #26
 80141c8:	80fb      	strh	r3, [r7, #6]
 80141ca:	e00c      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80141cc:	88fb      	ldrh	r3, [r7, #6]
 80141ce:	3308      	adds	r3, #8
 80141d0:	80fb      	strh	r3, [r7, #6]
 80141d2:	e008      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80141d4:	88fb      	ldrh	r3, [r7, #6]
 80141d6:	3b50      	subs	r3, #80	; 0x50
 80141d8:	80fb      	strh	r3, [r7, #6]
 80141da:	e004      	b.n	80141e6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80141dc:	88fb      	ldrh	r3, [r7, #6]
 80141de:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80141e2:	80fb      	strh	r3, [r7, #6]
 80141e4:	bf00      	nop
			}
			break;
 80141e6:	e008      	b.n	80141fa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80141e8:	89fb      	ldrh	r3, [r7, #14]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d195      	bne.n	801411a <ff_wtoupper+0x1a>
 80141ee:	8a3b      	ldrh	r3, [r7, #16]
 80141f0:	005b      	lsls	r3, r3, #1
 80141f2:	697a      	ldr	r2, [r7, #20]
 80141f4:	4413      	add	r3, r2
 80141f6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80141f8:	e78f      	b.n	801411a <ff_wtoupper+0x1a>
			break;
 80141fa:	bf00      	nop
	}

	return chr;
 80141fc:	88fb      	ldrh	r3, [r7, #6]
}
 80141fe:	4618      	mov	r0, r3
 8014200:	371c      	adds	r7, #28
 8014202:	46bd      	mov	sp, r7
 8014204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014208:	4770      	bx	lr
 801420a:	bf00      	nop
 801420c:	08016a5c 	.word	0x08016a5c
 8014210:	08016c50 	.word	0x08016c50

08014214 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014218:	2200      	movs	r2, #0
 801421a:	4912      	ldr	r1, [pc, #72]	; (8014264 <MX_USB_DEVICE_Init+0x50>)
 801421c:	4812      	ldr	r0, [pc, #72]	; (8014268 <MX_USB_DEVICE_Init+0x54>)
 801421e:	f7fa fcb1 	bl	800eb84 <USBD_Init>
 8014222:	4603      	mov	r3, r0
 8014224:	2b00      	cmp	r3, #0
 8014226:	d001      	beq.n	801422c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014228:	f7ee fbaa 	bl	8002980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801422c:	490f      	ldr	r1, [pc, #60]	; (801426c <MX_USB_DEVICE_Init+0x58>)
 801422e:	480e      	ldr	r0, [pc, #56]	; (8014268 <MX_USB_DEVICE_Init+0x54>)
 8014230:	f7fa fcd8 	bl	800ebe4 <USBD_RegisterClass>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d001      	beq.n	801423e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801423a:	f7ee fba1 	bl	8002980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801423e:	490c      	ldr	r1, [pc, #48]	; (8014270 <MX_USB_DEVICE_Init+0x5c>)
 8014240:	4809      	ldr	r0, [pc, #36]	; (8014268 <MX_USB_DEVICE_Init+0x54>)
 8014242:	f7fa fbc9 	bl	800e9d8 <USBD_CDC_RegisterInterface>
 8014246:	4603      	mov	r3, r0
 8014248:	2b00      	cmp	r3, #0
 801424a:	d001      	beq.n	8014250 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801424c:	f7ee fb98 	bl	8002980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014250:	4805      	ldr	r0, [pc, #20]	; (8014268 <MX_USB_DEVICE_Init+0x54>)
 8014252:	f7fa fcfd 	bl	800ec50 <USBD_Start>
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d001      	beq.n	8014260 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801425c:	f7ee fb90 	bl	8002980 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014260:	bf00      	nop
 8014262:	bd80      	pop	{r7, pc}
 8014264:	200000e8 	.word	0x200000e8
 8014268:	20001cb8 	.word	0x20001cb8
 801426c:	20000054 	.word	0x20000054
 8014270:	200000d4 	.word	0x200000d4

08014274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014278:	2200      	movs	r2, #0
 801427a:	4905      	ldr	r1, [pc, #20]	; (8014290 <CDC_Init_FS+0x1c>)
 801427c:	4805      	ldr	r0, [pc, #20]	; (8014294 <CDC_Init_FS+0x20>)
 801427e:	f7fa fbc5 	bl	800ea0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014282:	4905      	ldr	r1, [pc, #20]	; (8014298 <CDC_Init_FS+0x24>)
 8014284:	4803      	ldr	r0, [pc, #12]	; (8014294 <CDC_Init_FS+0x20>)
 8014286:	f7fa fbe3 	bl	800ea50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801428a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801428c:	4618      	mov	r0, r3
 801428e:	bd80      	pop	{r7, pc}
 8014290:	20002394 	.word	0x20002394
 8014294:	20001cb8 	.word	0x20001cb8
 8014298:	20001f94 	.word	0x20001f94

0801429c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801429c:	b480      	push	{r7}
 801429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80142a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	46bd      	mov	sp, r7
 80142a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142aa:	4770      	bx	lr

080142ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80142ac:	b480      	push	{r7}
 80142ae:	b083      	sub	sp, #12
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	4603      	mov	r3, r0
 80142b4:	6039      	str	r1, [r7, #0]
 80142b6:	71fb      	strb	r3, [r7, #7]
 80142b8:	4613      	mov	r3, r2
 80142ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80142bc:	79fb      	ldrb	r3, [r7, #7]
 80142be:	2b23      	cmp	r3, #35	; 0x23
 80142c0:	d84a      	bhi.n	8014358 <CDC_Control_FS+0xac>
 80142c2:	a201      	add	r2, pc, #4	; (adr r2, 80142c8 <CDC_Control_FS+0x1c>)
 80142c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142c8:	08014359 	.word	0x08014359
 80142cc:	08014359 	.word	0x08014359
 80142d0:	08014359 	.word	0x08014359
 80142d4:	08014359 	.word	0x08014359
 80142d8:	08014359 	.word	0x08014359
 80142dc:	08014359 	.word	0x08014359
 80142e0:	08014359 	.word	0x08014359
 80142e4:	08014359 	.word	0x08014359
 80142e8:	08014359 	.word	0x08014359
 80142ec:	08014359 	.word	0x08014359
 80142f0:	08014359 	.word	0x08014359
 80142f4:	08014359 	.word	0x08014359
 80142f8:	08014359 	.word	0x08014359
 80142fc:	08014359 	.word	0x08014359
 8014300:	08014359 	.word	0x08014359
 8014304:	08014359 	.word	0x08014359
 8014308:	08014359 	.word	0x08014359
 801430c:	08014359 	.word	0x08014359
 8014310:	08014359 	.word	0x08014359
 8014314:	08014359 	.word	0x08014359
 8014318:	08014359 	.word	0x08014359
 801431c:	08014359 	.word	0x08014359
 8014320:	08014359 	.word	0x08014359
 8014324:	08014359 	.word	0x08014359
 8014328:	08014359 	.word	0x08014359
 801432c:	08014359 	.word	0x08014359
 8014330:	08014359 	.word	0x08014359
 8014334:	08014359 	.word	0x08014359
 8014338:	08014359 	.word	0x08014359
 801433c:	08014359 	.word	0x08014359
 8014340:	08014359 	.word	0x08014359
 8014344:	08014359 	.word	0x08014359
 8014348:	08014359 	.word	0x08014359
 801434c:	08014359 	.word	0x08014359
 8014350:	08014359 	.word	0x08014359
 8014354:	08014359 	.word	0x08014359
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014358:	bf00      	nop
  }

  return (USBD_OK);
 801435a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801435c:	4618      	mov	r0, r3
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr

08014368 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014372:	6879      	ldr	r1, [r7, #4]
 8014374:	4805      	ldr	r0, [pc, #20]	; (801438c <CDC_Receive_FS+0x24>)
 8014376:	f7fa fb6b 	bl	800ea50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801437a:	4804      	ldr	r0, [pc, #16]	; (801438c <CDC_Receive_FS+0x24>)
 801437c:	f7fa fbcc 	bl	800eb18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014380:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014382:	4618      	mov	r0, r3
 8014384:	3708      	adds	r7, #8
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	20001cb8 	.word	0x20001cb8

08014390 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	460b      	mov	r3, r1
 801439a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801439c:	2300      	movs	r3, #0
 801439e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80143a0:	4b0d      	ldr	r3, [pc, #52]	; (80143d8 <CDC_Transmit_FS+0x48>)
 80143a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d001      	beq.n	80143b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80143b2:	2301      	movs	r3, #1
 80143b4:	e00b      	b.n	80143ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80143b6:	887b      	ldrh	r3, [r7, #2]
 80143b8:	461a      	mov	r2, r3
 80143ba:	6879      	ldr	r1, [r7, #4]
 80143bc:	4806      	ldr	r0, [pc, #24]	; (80143d8 <CDC_Transmit_FS+0x48>)
 80143be:	f7fa fb25 	bl	800ea0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80143c2:	4805      	ldr	r0, [pc, #20]	; (80143d8 <CDC_Transmit_FS+0x48>)
 80143c4:	f7fa fb62 	bl	800ea8c <USBD_CDC_TransmitPacket>
 80143c8:	4603      	mov	r3, r0
 80143ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80143cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3710      	adds	r7, #16
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}
 80143d6:	bf00      	nop
 80143d8:	20001cb8 	.word	0x20001cb8

080143dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80143dc:	b480      	push	{r7}
 80143de:	b087      	sub	sp, #28
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	60b9      	str	r1, [r7, #8]
 80143e6:	4613      	mov	r3, r2
 80143e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80143ea:	2300      	movs	r3, #0
 80143ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80143ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	371c      	adds	r7, #28
 80143f6:	46bd      	mov	sp, r7
 80143f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fc:	4770      	bx	lr

080143fe <CDC_Recv>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

int8_t CDC_Recv(uint8_t *Buf, uint32_t *Len)
{
 80143fe:	b580      	push	{r7, lr}
 8014400:	b084      	sub	sp, #16
 8014402:	af00      	add	r7, sp, #0
 8014404:	6078      	str	r0, [r7, #4]
 8014406:	6039      	str	r1, [r7, #0]
int8_t ret;
uint32_t len;

	ret = CDC_Receive_FS(Buf, &len);
 8014408:	f107 0308 	add.w	r3, r7, #8
 801440c:	4619      	mov	r1, r3
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f7ff ffaa 	bl	8014368 <CDC_Receive_FS>
 8014414:	4603      	mov	r3, r0
 8014416:	73fb      	strb	r3, [r7, #15]
	*Len = len;
 8014418:	68ba      	ldr	r2, [r7, #8]
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	601a      	str	r2, [r3, #0]

	return ret;
 801441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014422:	4618      	mov	r0, r3
 8014424:	3710      	adds	r7, #16
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
	...

0801442c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801442c:	b480      	push	{r7}
 801442e:	b083      	sub	sp, #12
 8014430:	af00      	add	r7, sp, #0
 8014432:	4603      	mov	r3, r0
 8014434:	6039      	str	r1, [r7, #0]
 8014436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	2212      	movs	r2, #18
 801443c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801443e:	4b03      	ldr	r3, [pc, #12]	; (801444c <USBD_FS_DeviceDescriptor+0x20>)
}
 8014440:	4618      	mov	r0, r3
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	20000104 	.word	0x20000104

08014450 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	4603      	mov	r3, r0
 8014458:	6039      	str	r1, [r7, #0]
 801445a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	2204      	movs	r2, #4
 8014460:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014462:	4b03      	ldr	r3, [pc, #12]	; (8014470 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014464:	4618      	mov	r0, r3
 8014466:	370c      	adds	r7, #12
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr
 8014470:	20000118 	.word	0x20000118

08014474 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	4603      	mov	r3, r0
 801447c:	6039      	str	r1, [r7, #0]
 801447e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014480:	79fb      	ldrb	r3, [r7, #7]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d105      	bne.n	8014492 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014486:	683a      	ldr	r2, [r7, #0]
 8014488:	4907      	ldr	r1, [pc, #28]	; (80144a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801448a:	4808      	ldr	r0, [pc, #32]	; (80144ac <USBD_FS_ProductStrDescriptor+0x38>)
 801448c:	f7fb fd8c 	bl	800ffa8 <USBD_GetString>
 8014490:	e004      	b.n	801449c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014492:	683a      	ldr	r2, [r7, #0]
 8014494:	4904      	ldr	r1, [pc, #16]	; (80144a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8014496:	4805      	ldr	r0, [pc, #20]	; (80144ac <USBD_FS_ProductStrDescriptor+0x38>)
 8014498:	f7fb fd86 	bl	800ffa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801449c:	4b02      	ldr	r3, [pc, #8]	; (80144a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	20002794 	.word	0x20002794
 80144ac:	08016194 	.word	0x08016194

080144b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	4603      	mov	r3, r0
 80144b8:	6039      	str	r1, [r7, #0]
 80144ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80144bc:	683a      	ldr	r2, [r7, #0]
 80144be:	4904      	ldr	r1, [pc, #16]	; (80144d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80144c0:	4804      	ldr	r0, [pc, #16]	; (80144d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80144c2:	f7fb fd71 	bl	800ffa8 <USBD_GetString>
  return USBD_StrDesc;
 80144c6:	4b02      	ldr	r3, [pc, #8]	; (80144d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	20002794 	.word	0x20002794
 80144d4:	080161ac 	.word	0x080161ac

080144d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	4603      	mov	r3, r0
 80144e0:	6039      	str	r1, [r7, #0]
 80144e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	221a      	movs	r2, #26
 80144e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80144ea:	f000 f843 	bl	8014574 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80144ee:	4b02      	ldr	r3, [pc, #8]	; (80144f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	2000011c 	.word	0x2000011c

080144fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	4603      	mov	r3, r0
 8014504:	6039      	str	r1, [r7, #0]
 8014506:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014508:	79fb      	ldrb	r3, [r7, #7]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d105      	bne.n	801451a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	4907      	ldr	r1, [pc, #28]	; (8014530 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014512:	4808      	ldr	r0, [pc, #32]	; (8014534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014514:	f7fb fd48 	bl	800ffa8 <USBD_GetString>
 8014518:	e004      	b.n	8014524 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801451a:	683a      	ldr	r2, [r7, #0]
 801451c:	4904      	ldr	r1, [pc, #16]	; (8014530 <USBD_FS_ConfigStrDescriptor+0x34>)
 801451e:	4805      	ldr	r0, [pc, #20]	; (8014534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014520:	f7fb fd42 	bl	800ffa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014524:	4b02      	ldr	r3, [pc, #8]	; (8014530 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014526:	4618      	mov	r0, r3
 8014528:	3708      	adds	r7, #8
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	20002794 	.word	0x20002794
 8014534:	080161c0 	.word	0x080161c0

08014538 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	4603      	mov	r3, r0
 8014540:	6039      	str	r1, [r7, #0]
 8014542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014544:	79fb      	ldrb	r3, [r7, #7]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d105      	bne.n	8014556 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801454a:	683a      	ldr	r2, [r7, #0]
 801454c:	4907      	ldr	r1, [pc, #28]	; (801456c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801454e:	4808      	ldr	r0, [pc, #32]	; (8014570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014550:	f7fb fd2a 	bl	800ffa8 <USBD_GetString>
 8014554:	e004      	b.n	8014560 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014556:	683a      	ldr	r2, [r7, #0]
 8014558:	4904      	ldr	r1, [pc, #16]	; (801456c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801455a:	4805      	ldr	r0, [pc, #20]	; (8014570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801455c:	f7fb fd24 	bl	800ffa8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014560:	4b02      	ldr	r3, [pc, #8]	; (801456c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014562:	4618      	mov	r0, r3
 8014564:	3708      	adds	r7, #8
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	20002794 	.word	0x20002794
 8014570:	080161cc 	.word	0x080161cc

08014574 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801457a:	4b0f      	ldr	r3, [pc, #60]	; (80145b8 <Get_SerialNum+0x44>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014580:	4b0e      	ldr	r3, [pc, #56]	; (80145bc <Get_SerialNum+0x48>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014586:	4b0e      	ldr	r3, [pc, #56]	; (80145c0 <Get_SerialNum+0x4c>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	4413      	add	r3, r2
 8014592:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d009      	beq.n	80145ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801459a:	2208      	movs	r2, #8
 801459c:	4909      	ldr	r1, [pc, #36]	; (80145c4 <Get_SerialNum+0x50>)
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f000 f814 	bl	80145cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80145a4:	2204      	movs	r2, #4
 80145a6:	4908      	ldr	r1, [pc, #32]	; (80145c8 <Get_SerialNum+0x54>)
 80145a8:	68b8      	ldr	r0, [r7, #8]
 80145aa:	f000 f80f 	bl	80145cc <IntToUnicode>
  }
}
 80145ae:	bf00      	nop
 80145b0:	3710      	adds	r7, #16
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	1fff7a10 	.word	0x1fff7a10
 80145bc:	1fff7a14 	.word	0x1fff7a14
 80145c0:	1fff7a18 	.word	0x1fff7a18
 80145c4:	2000011e 	.word	0x2000011e
 80145c8:	2000012e 	.word	0x2000012e

080145cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80145cc:	b480      	push	{r7}
 80145ce:	b087      	sub	sp, #28
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	4613      	mov	r3, r2
 80145d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80145da:	2300      	movs	r3, #0
 80145dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80145de:	2300      	movs	r3, #0
 80145e0:	75fb      	strb	r3, [r7, #23]
 80145e2:	e027      	b.n	8014634 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	0f1b      	lsrs	r3, r3, #28
 80145e8:	2b09      	cmp	r3, #9
 80145ea:	d80b      	bhi.n	8014604 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	0f1b      	lsrs	r3, r3, #28
 80145f0:	b2da      	uxtb	r2, r3
 80145f2:	7dfb      	ldrb	r3, [r7, #23]
 80145f4:	005b      	lsls	r3, r3, #1
 80145f6:	4619      	mov	r1, r3
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	440b      	add	r3, r1
 80145fc:	3230      	adds	r2, #48	; 0x30
 80145fe:	b2d2      	uxtb	r2, r2
 8014600:	701a      	strb	r2, [r3, #0]
 8014602:	e00a      	b.n	801461a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	0f1b      	lsrs	r3, r3, #28
 8014608:	b2da      	uxtb	r2, r3
 801460a:	7dfb      	ldrb	r3, [r7, #23]
 801460c:	005b      	lsls	r3, r3, #1
 801460e:	4619      	mov	r1, r3
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	440b      	add	r3, r1
 8014614:	3237      	adds	r2, #55	; 0x37
 8014616:	b2d2      	uxtb	r2, r2
 8014618:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	011b      	lsls	r3, r3, #4
 801461e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	005b      	lsls	r3, r3, #1
 8014624:	3301      	adds	r3, #1
 8014626:	68ba      	ldr	r2, [r7, #8]
 8014628:	4413      	add	r3, r2
 801462a:	2200      	movs	r2, #0
 801462c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801462e:	7dfb      	ldrb	r3, [r7, #23]
 8014630:	3301      	adds	r3, #1
 8014632:	75fb      	strb	r3, [r7, #23]
 8014634:	7dfa      	ldrb	r2, [r7, #23]
 8014636:	79fb      	ldrb	r3, [r7, #7]
 8014638:	429a      	cmp	r2, r3
 801463a:	d3d3      	bcc.n	80145e4 <IntToUnicode+0x18>
  }
}
 801463c:	bf00      	nop
 801463e:	bf00      	nop
 8014640:	371c      	adds	r7, #28
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr
	...

0801464c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08a      	sub	sp, #40	; 0x28
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014654:	f107 0314 	add.w	r3, r7, #20
 8014658:	2200      	movs	r2, #0
 801465a:	601a      	str	r2, [r3, #0]
 801465c:	605a      	str	r2, [r3, #4]
 801465e:	609a      	str	r2, [r3, #8]
 8014660:	60da      	str	r2, [r3, #12]
 8014662:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801466c:	d13a      	bne.n	80146e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801466e:	2300      	movs	r3, #0
 8014670:	613b      	str	r3, [r7, #16]
 8014672:	4b1e      	ldr	r3, [pc, #120]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 8014674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014676:	4a1d      	ldr	r2, [pc, #116]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 8014678:	f043 0301 	orr.w	r3, r3, #1
 801467c:	6313      	str	r3, [r2, #48]	; 0x30
 801467e:	4b1b      	ldr	r3, [pc, #108]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 8014680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014682:	f003 0301 	and.w	r3, r3, #1
 8014686:	613b      	str	r3, [r7, #16]
 8014688:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801468a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801468e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014690:	2302      	movs	r3, #2
 8014692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014694:	2300      	movs	r3, #0
 8014696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014698:	2303      	movs	r3, #3
 801469a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801469c:	230a      	movs	r3, #10
 801469e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80146a0:	f107 0314 	add.w	r3, r7, #20
 80146a4:	4619      	mov	r1, r3
 80146a6:	4812      	ldr	r0, [pc, #72]	; (80146f0 <HAL_PCD_MspInit+0xa4>)
 80146a8:	f7f0 f94e 	bl	8004948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80146ac:	4b0f      	ldr	r3, [pc, #60]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 80146ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146b0:	4a0e      	ldr	r2, [pc, #56]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 80146b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146b6:	6353      	str	r3, [r2, #52]	; 0x34
 80146b8:	2300      	movs	r3, #0
 80146ba:	60fb      	str	r3, [r7, #12]
 80146bc:	4b0b      	ldr	r3, [pc, #44]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 80146be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146c0:	4a0a      	ldr	r2, [pc, #40]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 80146c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80146c6:	6453      	str	r3, [r2, #68]	; 0x44
 80146c8:	4b08      	ldr	r3, [pc, #32]	; (80146ec <HAL_PCD_MspInit+0xa0>)
 80146ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80146d4:	2200      	movs	r2, #0
 80146d6:	2100      	movs	r1, #0
 80146d8:	2043      	movs	r0, #67	; 0x43
 80146da:	f7ef fcfc 	bl	80040d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80146de:	2043      	movs	r0, #67	; 0x43
 80146e0:	f7ef fd15 	bl	800410e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80146e4:	bf00      	nop
 80146e6:	3728      	adds	r7, #40	; 0x28
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	40023800 	.word	0x40023800
 80146f0:	40020000 	.word	0x40020000

080146f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8014708:	4619      	mov	r1, r3
 801470a:	4610      	mov	r0, r2
 801470c:	f7fa faed 	bl	800ecea <USBD_LL_SetupStage>
}
 8014710:	bf00      	nop
 8014712:	3708      	adds	r7, #8
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	460b      	mov	r3, r1
 8014722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801472a:	78fa      	ldrb	r2, [r7, #3]
 801472c:	6879      	ldr	r1, [r7, #4]
 801472e:	4613      	mov	r3, r2
 8014730:	00db      	lsls	r3, r3, #3
 8014732:	4413      	add	r3, r2
 8014734:	009b      	lsls	r3, r3, #2
 8014736:	440b      	add	r3, r1
 8014738:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	78fb      	ldrb	r3, [r7, #3]
 8014740:	4619      	mov	r1, r3
 8014742:	f7fa fb27 	bl	800ed94 <USBD_LL_DataOutStage>
}
 8014746:	bf00      	nop
 8014748:	3708      	adds	r7, #8
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}

0801474e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801474e:	b580      	push	{r7, lr}
 8014750:	b082      	sub	sp, #8
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
 8014756:	460b      	mov	r3, r1
 8014758:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014760:	78fa      	ldrb	r2, [r7, #3]
 8014762:	6879      	ldr	r1, [r7, #4]
 8014764:	4613      	mov	r3, r2
 8014766:	00db      	lsls	r3, r3, #3
 8014768:	4413      	add	r3, r2
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	440b      	add	r3, r1
 801476e:	334c      	adds	r3, #76	; 0x4c
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	78fb      	ldrb	r3, [r7, #3]
 8014774:	4619      	mov	r1, r3
 8014776:	f7fa fbc0 	bl	800eefa <USBD_LL_DataInStage>
}
 801477a:	bf00      	nop
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014782:	b580      	push	{r7, lr}
 8014784:	b082      	sub	sp, #8
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014790:	4618      	mov	r0, r3
 8014792:	f7fa fcf4 	bl	800f17e <USBD_LL_SOF>
}
 8014796:	bf00      	nop
 8014798:	3708      	adds	r7, #8
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}

0801479e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801479e:	b580      	push	{r7, lr}
 80147a0:	b084      	sub	sp, #16
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80147a6:	2301      	movs	r3, #1
 80147a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d102      	bne.n	80147b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80147b2:	2300      	movs	r3, #0
 80147b4:	73fb      	strb	r3, [r7, #15]
 80147b6:	e008      	b.n	80147ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	2b02      	cmp	r3, #2
 80147be:	d102      	bne.n	80147c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80147c0:	2301      	movs	r3, #1
 80147c2:	73fb      	strb	r3, [r7, #15]
 80147c4:	e001      	b.n	80147ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80147c6:	f7ee f8db 	bl	8002980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80147d0:	7bfa      	ldrb	r2, [r7, #15]
 80147d2:	4611      	mov	r1, r2
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7fa fc94 	bl	800f102 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fa fc3c 	bl	800f05e <USBD_LL_Reset>
}
 80147e6:	bf00      	nop
 80147e8:	3710      	adds	r7, #16
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
	...

080147f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fa fc8f 	bl	800f122 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	687a      	ldr	r2, [r7, #4]
 8014810:	6812      	ldr	r2, [r2, #0]
 8014812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014816:	f043 0301 	orr.w	r3, r3, #1
 801481a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6a1b      	ldr	r3, [r3, #32]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d005      	beq.n	8014830 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014824:	4b04      	ldr	r3, [pc, #16]	; (8014838 <HAL_PCD_SuspendCallback+0x48>)
 8014826:	691b      	ldr	r3, [r3, #16]
 8014828:	4a03      	ldr	r2, [pc, #12]	; (8014838 <HAL_PCD_SuspendCallback+0x48>)
 801482a:	f043 0306 	orr.w	r3, r3, #6
 801482e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014830:	bf00      	nop
 8014832:	3708      	adds	r7, #8
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	e000ed00 	.word	0xe000ed00

0801483c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801484a:	4618      	mov	r0, r3
 801484c:	f7fa fc7f 	bl	800f14e <USBD_LL_Resume>
}
 8014850:	bf00      	nop
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b082      	sub	sp, #8
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	460b      	mov	r3, r1
 8014862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801486a:	78fa      	ldrb	r2, [r7, #3]
 801486c:	4611      	mov	r1, r2
 801486e:	4618      	mov	r0, r3
 8014870:	f7fa fcd7 	bl	800f222 <USBD_LL_IsoOUTIncomplete>
}
 8014874:	bf00      	nop
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	460b      	mov	r3, r1
 8014886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801488e:	78fa      	ldrb	r2, [r7, #3]
 8014890:	4611      	mov	r1, r2
 8014892:	4618      	mov	r0, r3
 8014894:	f7fa fc93 	bl	800f1be <USBD_LL_IsoINIncomplete>
}
 8014898:	bf00      	nop
 801489a:	3708      	adds	r7, #8
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}

080148a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7fa fce9 	bl	800f286 <USBD_LL_DevConnected>
}
 80148b4:	bf00      	nop
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7fa fce6 	bl	800f29c <USBD_LL_DevDisconnected>
}
 80148d0:	bf00      	nop
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d13c      	bne.n	8014962 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80148e8:	4a20      	ldr	r2, [pc, #128]	; (801496c <USBD_LL_Init+0x94>)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	4a1e      	ldr	r2, [pc, #120]	; (801496c <USBD_LL_Init+0x94>)
 80148f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80148f8:	4b1c      	ldr	r3, [pc, #112]	; (801496c <USBD_LL_Init+0x94>)
 80148fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80148fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014900:	4b1a      	ldr	r3, [pc, #104]	; (801496c <USBD_LL_Init+0x94>)
 8014902:	2204      	movs	r2, #4
 8014904:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014906:	4b19      	ldr	r3, [pc, #100]	; (801496c <USBD_LL_Init+0x94>)
 8014908:	2202      	movs	r2, #2
 801490a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801490c:	4b17      	ldr	r3, [pc, #92]	; (801496c <USBD_LL_Init+0x94>)
 801490e:	2200      	movs	r2, #0
 8014910:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014912:	4b16      	ldr	r3, [pc, #88]	; (801496c <USBD_LL_Init+0x94>)
 8014914:	2202      	movs	r2, #2
 8014916:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014918:	4b14      	ldr	r3, [pc, #80]	; (801496c <USBD_LL_Init+0x94>)
 801491a:	2200      	movs	r2, #0
 801491c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801491e:	4b13      	ldr	r3, [pc, #76]	; (801496c <USBD_LL_Init+0x94>)
 8014920:	2200      	movs	r2, #0
 8014922:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014924:	4b11      	ldr	r3, [pc, #68]	; (801496c <USBD_LL_Init+0x94>)
 8014926:	2200      	movs	r2, #0
 8014928:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801492a:	4b10      	ldr	r3, [pc, #64]	; (801496c <USBD_LL_Init+0x94>)
 801492c:	2200      	movs	r2, #0
 801492e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014930:	4b0e      	ldr	r3, [pc, #56]	; (801496c <USBD_LL_Init+0x94>)
 8014932:	2200      	movs	r2, #0
 8014934:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014936:	480d      	ldr	r0, [pc, #52]	; (801496c <USBD_LL_Init+0x94>)
 8014938:	f7f0 f9e5 	bl	8004d06 <HAL_PCD_Init>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d001      	beq.n	8014946 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014942:	f7ee f81d 	bl	8002980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014946:	2180      	movs	r1, #128	; 0x80
 8014948:	4808      	ldr	r0, [pc, #32]	; (801496c <USBD_LL_Init+0x94>)
 801494a:	f7f1 fc3c 	bl	80061c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801494e:	2240      	movs	r2, #64	; 0x40
 8014950:	2100      	movs	r1, #0
 8014952:	4806      	ldr	r0, [pc, #24]	; (801496c <USBD_LL_Init+0x94>)
 8014954:	f7f1 fbf0 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014958:	2280      	movs	r2, #128	; 0x80
 801495a:	2101      	movs	r1, #1
 801495c:	4803      	ldr	r0, [pc, #12]	; (801496c <USBD_LL_Init+0x94>)
 801495e:	f7f1 fbeb 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014962:	2300      	movs	r3, #0
}
 8014964:	4618      	mov	r0, r3
 8014966:	3708      	adds	r7, #8
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}
 801496c:	20002994 	.word	0x20002994

08014970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b084      	sub	sp, #16
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014978:	2300      	movs	r3, #0
 801497a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801497c:	2300      	movs	r3, #0
 801497e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014986:	4618      	mov	r0, r3
 8014988:	f7f0 fada 	bl	8004f40 <HAL_PCD_Start>
 801498c:	4603      	mov	r3, r0
 801498e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014990:	7bfb      	ldrb	r3, [r7, #15]
 8014992:	4618      	mov	r0, r3
 8014994:	f000 f942 	bl	8014c1c <USBD_Get_USB_Status>
 8014998:	4603      	mov	r3, r0
 801499a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801499c:	7bbb      	ldrb	r3, [r7, #14]
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3710      	adds	r7, #16
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}

080149a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80149a6:	b580      	push	{r7, lr}
 80149a8:	b084      	sub	sp, #16
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	6078      	str	r0, [r7, #4]
 80149ae:	4608      	mov	r0, r1
 80149b0:	4611      	mov	r1, r2
 80149b2:	461a      	mov	r2, r3
 80149b4:	4603      	mov	r3, r0
 80149b6:	70fb      	strb	r3, [r7, #3]
 80149b8:	460b      	mov	r3, r1
 80149ba:	70bb      	strb	r3, [r7, #2]
 80149bc:	4613      	mov	r3, r2
 80149be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149c0:	2300      	movs	r3, #0
 80149c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149c4:	2300      	movs	r3, #0
 80149c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80149ce:	78bb      	ldrb	r3, [r7, #2]
 80149d0:	883a      	ldrh	r2, [r7, #0]
 80149d2:	78f9      	ldrb	r1, [r7, #3]
 80149d4:	f7f0 ffab 	bl	800592e <HAL_PCD_EP_Open>
 80149d8:	4603      	mov	r3, r0
 80149da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80149dc:	7bfb      	ldrb	r3, [r7, #15]
 80149de:	4618      	mov	r0, r3
 80149e0:	f000 f91c 	bl	8014c1c <USBD_Get_USB_Status>
 80149e4:	4603      	mov	r3, r0
 80149e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80149e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3710      	adds	r7, #16
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149f2:	b580      	push	{r7, lr}
 80149f4:	b084      	sub	sp, #16
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
 80149fa:	460b      	mov	r3, r1
 80149fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149fe:	2300      	movs	r3, #0
 8014a00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a02:	2300      	movs	r3, #0
 8014a04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014a0c:	78fa      	ldrb	r2, [r7, #3]
 8014a0e:	4611      	mov	r1, r2
 8014a10:	4618      	mov	r0, r3
 8014a12:	f7f0 fff4 	bl	80059fe <HAL_PCD_EP_Close>
 8014a16:	4603      	mov	r3, r0
 8014a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a1a:	7bfb      	ldrb	r3, [r7, #15]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f000 f8fd 	bl	8014c1c <USBD_Get_USB_Status>
 8014a22:	4603      	mov	r3, r0
 8014a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3710      	adds	r7, #16
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}

08014a30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b084      	sub	sp, #16
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	460b      	mov	r3, r1
 8014a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a40:	2300      	movs	r3, #0
 8014a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014a4a:	78fa      	ldrb	r2, [r7, #3]
 8014a4c:	4611      	mov	r1, r2
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7f1 f8cc 	bl	8005bec <HAL_PCD_EP_SetStall>
 8014a54:	4603      	mov	r3, r0
 8014a56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a58:	7bfb      	ldrb	r3, [r7, #15]
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f000 f8de 	bl	8014c1c <USBD_Get_USB_Status>
 8014a60:	4603      	mov	r3, r0
 8014a62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b084      	sub	sp, #16
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
 8014a76:	460b      	mov	r3, r1
 8014a78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014a88:	78fa      	ldrb	r2, [r7, #3]
 8014a8a:	4611      	mov	r1, r2
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7f1 f911 	bl	8005cb4 <HAL_PCD_EP_ClrStall>
 8014a92:	4603      	mov	r3, r0
 8014a94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a96:	7bfb      	ldrb	r3, [r7, #15]
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f000 f8bf 	bl	8014c1c <USBD_Get_USB_Status>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3710      	adds	r7, #16
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}

08014aac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014aac:	b480      	push	{r7}
 8014aae:	b085      	sub	sp, #20
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	460b      	mov	r3, r1
 8014ab6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014abe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	da0b      	bge.n	8014ae0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ac8:	78fb      	ldrb	r3, [r7, #3]
 8014aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ace:	68f9      	ldr	r1, [r7, #12]
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	4413      	add	r3, r2
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	440b      	add	r3, r1
 8014ada:	333e      	adds	r3, #62	; 0x3e
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	e00b      	b.n	8014af8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014ae0:	78fb      	ldrb	r3, [r7, #3]
 8014ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ae6:	68f9      	ldr	r1, [r7, #12]
 8014ae8:	4613      	mov	r3, r2
 8014aea:	00db      	lsls	r3, r3, #3
 8014aec:	4413      	add	r3, r2
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	440b      	add	r3, r1
 8014af2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8014af6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3714      	adds	r7, #20
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr

08014b04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b10:	2300      	movs	r3, #0
 8014b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b14:	2300      	movs	r3, #0
 8014b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014b1e:	78fa      	ldrb	r2, [r7, #3]
 8014b20:	4611      	mov	r1, r2
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7f0 fede 	bl	80058e4 <HAL_PCD_SetAddress>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b2c:	7bfb      	ldrb	r3, [r7, #15]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f000 f874 	bl	8014c1c <USBD_Get_USB_Status>
 8014b34:	4603      	mov	r3, r0
 8014b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b086      	sub	sp, #24
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	60f8      	str	r0, [r7, #12]
 8014b4a:	607a      	str	r2, [r7, #4]
 8014b4c:	603b      	str	r3, [r7, #0]
 8014b4e:	460b      	mov	r3, r1
 8014b50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b52:	2300      	movs	r3, #0
 8014b54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b56:	2300      	movs	r3, #0
 8014b58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014b60:	7af9      	ldrb	r1, [r7, #11]
 8014b62:	683b      	ldr	r3, [r7, #0]
 8014b64:	687a      	ldr	r2, [r7, #4]
 8014b66:	f7f0 fff7 	bl	8005b58 <HAL_PCD_EP_Transmit>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b6e:	7dfb      	ldrb	r3, [r7, #23]
 8014b70:	4618      	mov	r0, r3
 8014b72:	f000 f853 	bl	8014c1c <USBD_Get_USB_Status>
 8014b76:	4603      	mov	r3, r0
 8014b78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014b7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3718      	adds	r7, #24
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}

08014b84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b086      	sub	sp, #24
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	607a      	str	r2, [r7, #4]
 8014b8e:	603b      	str	r3, [r7, #0]
 8014b90:	460b      	mov	r3, r1
 8014b92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b94:	2300      	movs	r3, #0
 8014b96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014ba2:	7af9      	ldrb	r1, [r7, #11]
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	f7f0 ff73 	bl	8005a92 <HAL_PCD_EP_Receive>
 8014bac:	4603      	mov	r3, r0
 8014bae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014bb0:	7dfb      	ldrb	r3, [r7, #23]
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f000 f832 	bl	8014c1c <USBD_Get_USB_Status>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014bbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	3718      	adds	r7, #24
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bd80      	pop	{r7, pc}

08014bc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bc6:	b580      	push	{r7, lr}
 8014bc8:	b082      	sub	sp, #8
 8014bca:	af00      	add	r7, sp, #0
 8014bcc:	6078      	str	r0, [r7, #4]
 8014bce:	460b      	mov	r3, r1
 8014bd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014bd8:	78fa      	ldrb	r2, [r7, #3]
 8014bda:	4611      	mov	r1, r2
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7f0 ffa3 	bl	8005b28 <HAL_PCD_EP_GetRxCount>
 8014be2:	4603      	mov	r3, r0
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014bec:	b480      	push	{r7}
 8014bee:	b083      	sub	sp, #12
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014bf4:	4b03      	ldr	r3, [pc, #12]	; (8014c04 <USBD_static_malloc+0x18>)
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	370c      	adds	r7, #12
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c00:	4770      	bx	lr
 8014c02:	bf00      	nop
 8014c04:	20002ea0 	.word	0x20002ea0

08014c08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]

}
 8014c10:	bf00      	nop
 8014c12:	370c      	adds	r7, #12
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	4603      	mov	r3, r0
 8014c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c26:	2300      	movs	r3, #0
 8014c28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014c2a:	79fb      	ldrb	r3, [r7, #7]
 8014c2c:	2b03      	cmp	r3, #3
 8014c2e:	d817      	bhi.n	8014c60 <USBD_Get_USB_Status+0x44>
 8014c30:	a201      	add	r2, pc, #4	; (adr r2, 8014c38 <USBD_Get_USB_Status+0x1c>)
 8014c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c36:	bf00      	nop
 8014c38:	08014c49 	.word	0x08014c49
 8014c3c:	08014c4f 	.word	0x08014c4f
 8014c40:	08014c55 	.word	0x08014c55
 8014c44:	08014c5b 	.word	0x08014c5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c4c:	e00b      	b.n	8014c66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014c4e:	2303      	movs	r3, #3
 8014c50:	73fb      	strb	r3, [r7, #15]
    break;
 8014c52:	e008      	b.n	8014c66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014c54:	2301      	movs	r3, #1
 8014c56:	73fb      	strb	r3, [r7, #15]
    break;
 8014c58:	e005      	b.n	8014c66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014c5a:	2303      	movs	r3, #3
 8014c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8014c5e:	e002      	b.n	8014c66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014c60:	2303      	movs	r3, #3
 8014c62:	73fb      	strb	r3, [r7, #15]
    break;
 8014c64:	bf00      	nop
  }
  return usb_status;
 8014c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3714      	adds	r7, #20
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c72:	4770      	bx	lr

08014c74 <atol>:
 8014c74:	220a      	movs	r2, #10
 8014c76:	2100      	movs	r1, #0
 8014c78:	f000 baf2 	b.w	8015260 <strtol>

08014c7c <calloc>:
 8014c7c:	4b02      	ldr	r3, [pc, #8]	; (8014c88 <calloc+0xc>)
 8014c7e:	460a      	mov	r2, r1
 8014c80:	4601      	mov	r1, r0
 8014c82:	6818      	ldr	r0, [r3, #0]
 8014c84:	f000 b8f6 	b.w	8014e74 <_calloc_r>
 8014c88:	20000138 	.word	0x20000138

08014c8c <__errno>:
 8014c8c:	4b01      	ldr	r3, [pc, #4]	; (8014c94 <__errno+0x8>)
 8014c8e:	6818      	ldr	r0, [r3, #0]
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	20000138 	.word	0x20000138

08014c98 <gmtime_r>:
 8014c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c9c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014ca0:	460c      	mov	r4, r1
 8014ca2:	4a4f      	ldr	r2, [pc, #316]	; (8014de0 <gmtime_r+0x148>)
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	4630      	mov	r0, r6
 8014ca8:	4639      	mov	r1, r7
 8014caa:	f7eb faf9 	bl	80002a0 <__aeabi_ldivmod>
 8014cae:	4639      	mov	r1, r7
 8014cb0:	4605      	mov	r5, r0
 8014cb2:	4a4b      	ldr	r2, [pc, #300]	; (8014de0 <gmtime_r+0x148>)
 8014cb4:	4630      	mov	r0, r6
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	f7eb faf2 	bl	80002a0 <__aeabi_ldivmod>
 8014cbc:	2a00      	cmp	r2, #0
 8014cbe:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014cc2:	bfb7      	itett	lt
 8014cc4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014cc8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8014ccc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8014cd0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014cd4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8014cd8:	fbb2 f1f0 	udiv	r1, r2, r0
 8014cdc:	fb00 2211 	mls	r2, r0, r1, r2
 8014ce0:	203c      	movs	r0, #60	; 0x3c
 8014ce2:	60a1      	str	r1, [r4, #8]
 8014ce4:	fbb2 f1f0 	udiv	r1, r2, r0
 8014ce8:	fb00 2211 	mls	r2, r0, r1, r2
 8014cec:	6061      	str	r1, [r4, #4]
 8014cee:	6022      	str	r2, [r4, #0]
 8014cf0:	2107      	movs	r1, #7
 8014cf2:	1cda      	adds	r2, r3, #3
 8014cf4:	fb92 f1f1 	sdiv	r1, r2, r1
 8014cf8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8014cfc:	1a52      	subs	r2, r2, r1
 8014cfe:	bf48      	it	mi
 8014d00:	3207      	addmi	r2, #7
 8014d02:	4d38      	ldr	r5, [pc, #224]	; (8014de4 <gmtime_r+0x14c>)
 8014d04:	4838      	ldr	r0, [pc, #224]	; (8014de8 <gmtime_r+0x150>)
 8014d06:	61a2      	str	r2, [r4, #24]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	bfb7      	itett	lt
 8014d0c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8014d10:	fb93 f5f5 	sdivge	r5, r3, r5
 8014d14:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8014d18:	fb92 f5f5 	sdivlt	r5, r2, r5
 8014d1c:	fb00 3005 	mla	r0, r0, r5, r3
 8014d20:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014d24:	fbb0 f2f2 	udiv	r2, r0, r2
 8014d28:	4402      	add	r2, r0
 8014d2a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8014d2e:	fbb0 f1f3 	udiv	r1, r0, r3
 8014d32:	1a52      	subs	r2, r2, r1
 8014d34:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014d38:	492c      	ldr	r1, [pc, #176]	; (8014dec <gmtime_r+0x154>)
 8014d3a:	fbb0 f1f1 	udiv	r1, r0, r1
 8014d3e:	2764      	movs	r7, #100	; 0x64
 8014d40:	1a52      	subs	r2, r2, r1
 8014d42:	fbb2 f1fc 	udiv	r1, r2, ip
 8014d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d4a:	fbb1 f6f7 	udiv	r6, r1, r7
 8014d4e:	1af3      	subs	r3, r6, r3
 8014d50:	4403      	add	r3, r0
 8014d52:	fb0c 3311 	mls	r3, ip, r1, r3
 8014d56:	2299      	movs	r2, #153	; 0x99
 8014d58:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8014d5c:	f10e 0e02 	add.w	lr, lr, #2
 8014d60:	f103 0c01 	add.w	ip, r3, #1
 8014d64:	fbbe f0f2 	udiv	r0, lr, r2
 8014d68:	4342      	muls	r2, r0
 8014d6a:	3202      	adds	r2, #2
 8014d6c:	f04f 0805 	mov.w	r8, #5
 8014d70:	fbb2 f2f8 	udiv	r2, r2, r8
 8014d74:	ebac 0c02 	sub.w	ip, ip, r2
 8014d78:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8014d7c:	4596      	cmp	lr, r2
 8014d7e:	bf94      	ite	ls
 8014d80:	2202      	movls	r2, #2
 8014d82:	f06f 0209 	mvnhi.w	r2, #9
 8014d86:	4410      	add	r0, r2
 8014d88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014d8c:	fb02 1505 	mla	r5, r2, r5, r1
 8014d90:	2801      	cmp	r0, #1
 8014d92:	bf98      	it	ls
 8014d94:	3501      	addls	r5, #1
 8014d96:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8014d9a:	d30d      	bcc.n	8014db8 <gmtime_r+0x120>
 8014d9c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014da0:	61e3      	str	r3, [r4, #28]
 8014da2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8014da6:	2300      	movs	r3, #0
 8014da8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8014dac:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014db0:	6223      	str	r3, [r4, #32]
 8014db2:	4620      	mov	r0, r4
 8014db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014db8:	078a      	lsls	r2, r1, #30
 8014dba:	d102      	bne.n	8014dc2 <gmtime_r+0x12a>
 8014dbc:	fb07 1616 	mls	r6, r7, r6, r1
 8014dc0:	b95e      	cbnz	r6, 8014dda <gmtime_r+0x142>
 8014dc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014dc6:	fbb1 f6f2 	udiv	r6, r1, r2
 8014dca:	fb02 1216 	mls	r2, r2, r6, r1
 8014dce:	fab2 f282 	clz	r2, r2
 8014dd2:	0952      	lsrs	r2, r2, #5
 8014dd4:	333b      	adds	r3, #59	; 0x3b
 8014dd6:	4413      	add	r3, r2
 8014dd8:	e7e2      	b.n	8014da0 <gmtime_r+0x108>
 8014dda:	2201      	movs	r2, #1
 8014ddc:	e7fa      	b.n	8014dd4 <gmtime_r+0x13c>
 8014dde:	bf00      	nop
 8014de0:	00015180 	.word	0x00015180
 8014de4:	00023ab1 	.word	0x00023ab1
 8014de8:	fffdc54f 	.word	0xfffdc54f
 8014dec:	00023ab0 	.word	0x00023ab0

08014df0 <__libc_init_array>:
 8014df0:	b570      	push	{r4, r5, r6, lr}
 8014df2:	4d0d      	ldr	r5, [pc, #52]	; (8014e28 <__libc_init_array+0x38>)
 8014df4:	4c0d      	ldr	r4, [pc, #52]	; (8014e2c <__libc_init_array+0x3c>)
 8014df6:	1b64      	subs	r4, r4, r5
 8014df8:	10a4      	asrs	r4, r4, #2
 8014dfa:	2600      	movs	r6, #0
 8014dfc:	42a6      	cmp	r6, r4
 8014dfe:	d109      	bne.n	8014e14 <__libc_init_array+0x24>
 8014e00:	4d0b      	ldr	r5, [pc, #44]	; (8014e30 <__libc_init_array+0x40>)
 8014e02:	4c0c      	ldr	r4, [pc, #48]	; (8014e34 <__libc_init_array+0x44>)
 8014e04:	f000 fdc0 	bl	8015988 <_init>
 8014e08:	1b64      	subs	r4, r4, r5
 8014e0a:	10a4      	asrs	r4, r4, #2
 8014e0c:	2600      	movs	r6, #0
 8014e0e:	42a6      	cmp	r6, r4
 8014e10:	d105      	bne.n	8014e1e <__libc_init_array+0x2e>
 8014e12:	bd70      	pop	{r4, r5, r6, pc}
 8014e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e18:	4798      	blx	r3
 8014e1a:	3601      	adds	r6, #1
 8014e1c:	e7ee      	b.n	8014dfc <__libc_init_array+0xc>
 8014e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e22:	4798      	blx	r3
 8014e24:	3601      	adds	r6, #1
 8014e26:	e7f2      	b.n	8014e0e <__libc_init_array+0x1e>
 8014e28:	08016e48 	.word	0x08016e48
 8014e2c:	08016e48 	.word	0x08016e48
 8014e30:	08016e48 	.word	0x08016e48
 8014e34:	08016e4c 	.word	0x08016e4c

08014e38 <free>:
 8014e38:	4b02      	ldr	r3, [pc, #8]	; (8014e44 <free+0xc>)
 8014e3a:	4601      	mov	r1, r0
 8014e3c:	6818      	ldr	r0, [r3, #0]
 8014e3e:	f000 b82f 	b.w	8014ea0 <_free_r>
 8014e42:	bf00      	nop
 8014e44:	20000138 	.word	0x20000138

08014e48 <memcpy>:
 8014e48:	440a      	add	r2, r1
 8014e4a:	4291      	cmp	r1, r2
 8014e4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014e50:	d100      	bne.n	8014e54 <memcpy+0xc>
 8014e52:	4770      	bx	lr
 8014e54:	b510      	push	{r4, lr}
 8014e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e5e:	4291      	cmp	r1, r2
 8014e60:	d1f9      	bne.n	8014e56 <memcpy+0xe>
 8014e62:	bd10      	pop	{r4, pc}

08014e64 <memset>:
 8014e64:	4402      	add	r2, r0
 8014e66:	4603      	mov	r3, r0
 8014e68:	4293      	cmp	r3, r2
 8014e6a:	d100      	bne.n	8014e6e <memset+0xa>
 8014e6c:	4770      	bx	lr
 8014e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8014e72:	e7f9      	b.n	8014e68 <memset+0x4>

08014e74 <_calloc_r>:
 8014e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e76:	fba1 2402 	umull	r2, r4, r1, r2
 8014e7a:	b94c      	cbnz	r4, 8014e90 <_calloc_r+0x1c>
 8014e7c:	4611      	mov	r1, r2
 8014e7e:	9201      	str	r2, [sp, #4]
 8014e80:	f000 f87a 	bl	8014f78 <_malloc_r>
 8014e84:	9a01      	ldr	r2, [sp, #4]
 8014e86:	4605      	mov	r5, r0
 8014e88:	b930      	cbnz	r0, 8014e98 <_calloc_r+0x24>
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	b003      	add	sp, #12
 8014e8e:	bd30      	pop	{r4, r5, pc}
 8014e90:	220c      	movs	r2, #12
 8014e92:	6002      	str	r2, [r0, #0]
 8014e94:	2500      	movs	r5, #0
 8014e96:	e7f8      	b.n	8014e8a <_calloc_r+0x16>
 8014e98:	4621      	mov	r1, r4
 8014e9a:	f7ff ffe3 	bl	8014e64 <memset>
 8014e9e:	e7f4      	b.n	8014e8a <_calloc_r+0x16>

08014ea0 <_free_r>:
 8014ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ea2:	2900      	cmp	r1, #0
 8014ea4:	d044      	beq.n	8014f30 <_free_r+0x90>
 8014ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014eaa:	9001      	str	r0, [sp, #4]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	f1a1 0404 	sub.w	r4, r1, #4
 8014eb2:	bfb8      	it	lt
 8014eb4:	18e4      	addlt	r4, r4, r3
 8014eb6:	f000 fa17 	bl	80152e8 <__malloc_lock>
 8014eba:	4a1e      	ldr	r2, [pc, #120]	; (8014f34 <_free_r+0x94>)
 8014ebc:	9801      	ldr	r0, [sp, #4]
 8014ebe:	6813      	ldr	r3, [r2, #0]
 8014ec0:	b933      	cbnz	r3, 8014ed0 <_free_r+0x30>
 8014ec2:	6063      	str	r3, [r4, #4]
 8014ec4:	6014      	str	r4, [r2, #0]
 8014ec6:	b003      	add	sp, #12
 8014ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ecc:	f000 ba12 	b.w	80152f4 <__malloc_unlock>
 8014ed0:	42a3      	cmp	r3, r4
 8014ed2:	d908      	bls.n	8014ee6 <_free_r+0x46>
 8014ed4:	6825      	ldr	r5, [r4, #0]
 8014ed6:	1961      	adds	r1, r4, r5
 8014ed8:	428b      	cmp	r3, r1
 8014eda:	bf01      	itttt	eq
 8014edc:	6819      	ldreq	r1, [r3, #0]
 8014ede:	685b      	ldreq	r3, [r3, #4]
 8014ee0:	1949      	addeq	r1, r1, r5
 8014ee2:	6021      	streq	r1, [r4, #0]
 8014ee4:	e7ed      	b.n	8014ec2 <_free_r+0x22>
 8014ee6:	461a      	mov	r2, r3
 8014ee8:	685b      	ldr	r3, [r3, #4]
 8014eea:	b10b      	cbz	r3, 8014ef0 <_free_r+0x50>
 8014eec:	42a3      	cmp	r3, r4
 8014eee:	d9fa      	bls.n	8014ee6 <_free_r+0x46>
 8014ef0:	6811      	ldr	r1, [r2, #0]
 8014ef2:	1855      	adds	r5, r2, r1
 8014ef4:	42a5      	cmp	r5, r4
 8014ef6:	d10b      	bne.n	8014f10 <_free_r+0x70>
 8014ef8:	6824      	ldr	r4, [r4, #0]
 8014efa:	4421      	add	r1, r4
 8014efc:	1854      	adds	r4, r2, r1
 8014efe:	42a3      	cmp	r3, r4
 8014f00:	6011      	str	r1, [r2, #0]
 8014f02:	d1e0      	bne.n	8014ec6 <_free_r+0x26>
 8014f04:	681c      	ldr	r4, [r3, #0]
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	6053      	str	r3, [r2, #4]
 8014f0a:	4421      	add	r1, r4
 8014f0c:	6011      	str	r1, [r2, #0]
 8014f0e:	e7da      	b.n	8014ec6 <_free_r+0x26>
 8014f10:	d902      	bls.n	8014f18 <_free_r+0x78>
 8014f12:	230c      	movs	r3, #12
 8014f14:	6003      	str	r3, [r0, #0]
 8014f16:	e7d6      	b.n	8014ec6 <_free_r+0x26>
 8014f18:	6825      	ldr	r5, [r4, #0]
 8014f1a:	1961      	adds	r1, r4, r5
 8014f1c:	428b      	cmp	r3, r1
 8014f1e:	bf04      	itt	eq
 8014f20:	6819      	ldreq	r1, [r3, #0]
 8014f22:	685b      	ldreq	r3, [r3, #4]
 8014f24:	6063      	str	r3, [r4, #4]
 8014f26:	bf04      	itt	eq
 8014f28:	1949      	addeq	r1, r1, r5
 8014f2a:	6021      	streq	r1, [r4, #0]
 8014f2c:	6054      	str	r4, [r2, #4]
 8014f2e:	e7ca      	b.n	8014ec6 <_free_r+0x26>
 8014f30:	b003      	add	sp, #12
 8014f32:	bd30      	pop	{r4, r5, pc}
 8014f34:	200030c0 	.word	0x200030c0

08014f38 <sbrk_aligned>:
 8014f38:	b570      	push	{r4, r5, r6, lr}
 8014f3a:	4e0e      	ldr	r6, [pc, #56]	; (8014f74 <sbrk_aligned+0x3c>)
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	6831      	ldr	r1, [r6, #0]
 8014f40:	4605      	mov	r5, r0
 8014f42:	b911      	cbnz	r1, 8014f4a <sbrk_aligned+0x12>
 8014f44:	f000 f88c 	bl	8015060 <_sbrk_r>
 8014f48:	6030      	str	r0, [r6, #0]
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	f000 f887 	bl	8015060 <_sbrk_r>
 8014f52:	1c43      	adds	r3, r0, #1
 8014f54:	d00a      	beq.n	8014f6c <sbrk_aligned+0x34>
 8014f56:	1cc4      	adds	r4, r0, #3
 8014f58:	f024 0403 	bic.w	r4, r4, #3
 8014f5c:	42a0      	cmp	r0, r4
 8014f5e:	d007      	beq.n	8014f70 <sbrk_aligned+0x38>
 8014f60:	1a21      	subs	r1, r4, r0
 8014f62:	4628      	mov	r0, r5
 8014f64:	f000 f87c 	bl	8015060 <_sbrk_r>
 8014f68:	3001      	adds	r0, #1
 8014f6a:	d101      	bne.n	8014f70 <sbrk_aligned+0x38>
 8014f6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014f70:	4620      	mov	r0, r4
 8014f72:	bd70      	pop	{r4, r5, r6, pc}
 8014f74:	200030c4 	.word	0x200030c4

08014f78 <_malloc_r>:
 8014f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f7c:	1ccd      	adds	r5, r1, #3
 8014f7e:	f025 0503 	bic.w	r5, r5, #3
 8014f82:	3508      	adds	r5, #8
 8014f84:	2d0c      	cmp	r5, #12
 8014f86:	bf38      	it	cc
 8014f88:	250c      	movcc	r5, #12
 8014f8a:	2d00      	cmp	r5, #0
 8014f8c:	4607      	mov	r7, r0
 8014f8e:	db01      	blt.n	8014f94 <_malloc_r+0x1c>
 8014f90:	42a9      	cmp	r1, r5
 8014f92:	d905      	bls.n	8014fa0 <_malloc_r+0x28>
 8014f94:	230c      	movs	r3, #12
 8014f96:	603b      	str	r3, [r7, #0]
 8014f98:	2600      	movs	r6, #0
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fa0:	4e2e      	ldr	r6, [pc, #184]	; (801505c <_malloc_r+0xe4>)
 8014fa2:	f000 f9a1 	bl	80152e8 <__malloc_lock>
 8014fa6:	6833      	ldr	r3, [r6, #0]
 8014fa8:	461c      	mov	r4, r3
 8014faa:	bb34      	cbnz	r4, 8014ffa <_malloc_r+0x82>
 8014fac:	4629      	mov	r1, r5
 8014fae:	4638      	mov	r0, r7
 8014fb0:	f7ff ffc2 	bl	8014f38 <sbrk_aligned>
 8014fb4:	1c43      	adds	r3, r0, #1
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	d14d      	bne.n	8015056 <_malloc_r+0xde>
 8014fba:	6834      	ldr	r4, [r6, #0]
 8014fbc:	4626      	mov	r6, r4
 8014fbe:	2e00      	cmp	r6, #0
 8014fc0:	d140      	bne.n	8015044 <_malloc_r+0xcc>
 8014fc2:	6823      	ldr	r3, [r4, #0]
 8014fc4:	4631      	mov	r1, r6
 8014fc6:	4638      	mov	r0, r7
 8014fc8:	eb04 0803 	add.w	r8, r4, r3
 8014fcc:	f000 f848 	bl	8015060 <_sbrk_r>
 8014fd0:	4580      	cmp	r8, r0
 8014fd2:	d13a      	bne.n	801504a <_malloc_r+0xd2>
 8014fd4:	6821      	ldr	r1, [r4, #0]
 8014fd6:	3503      	adds	r5, #3
 8014fd8:	1a6d      	subs	r5, r5, r1
 8014fda:	f025 0503 	bic.w	r5, r5, #3
 8014fde:	3508      	adds	r5, #8
 8014fe0:	2d0c      	cmp	r5, #12
 8014fe2:	bf38      	it	cc
 8014fe4:	250c      	movcc	r5, #12
 8014fe6:	4629      	mov	r1, r5
 8014fe8:	4638      	mov	r0, r7
 8014fea:	f7ff ffa5 	bl	8014f38 <sbrk_aligned>
 8014fee:	3001      	adds	r0, #1
 8014ff0:	d02b      	beq.n	801504a <_malloc_r+0xd2>
 8014ff2:	6823      	ldr	r3, [r4, #0]
 8014ff4:	442b      	add	r3, r5
 8014ff6:	6023      	str	r3, [r4, #0]
 8014ff8:	e00e      	b.n	8015018 <_malloc_r+0xa0>
 8014ffa:	6822      	ldr	r2, [r4, #0]
 8014ffc:	1b52      	subs	r2, r2, r5
 8014ffe:	d41e      	bmi.n	801503e <_malloc_r+0xc6>
 8015000:	2a0b      	cmp	r2, #11
 8015002:	d916      	bls.n	8015032 <_malloc_r+0xba>
 8015004:	1961      	adds	r1, r4, r5
 8015006:	42a3      	cmp	r3, r4
 8015008:	6025      	str	r5, [r4, #0]
 801500a:	bf18      	it	ne
 801500c:	6059      	strne	r1, [r3, #4]
 801500e:	6863      	ldr	r3, [r4, #4]
 8015010:	bf08      	it	eq
 8015012:	6031      	streq	r1, [r6, #0]
 8015014:	5162      	str	r2, [r4, r5]
 8015016:	604b      	str	r3, [r1, #4]
 8015018:	4638      	mov	r0, r7
 801501a:	f104 060b 	add.w	r6, r4, #11
 801501e:	f000 f969 	bl	80152f4 <__malloc_unlock>
 8015022:	f026 0607 	bic.w	r6, r6, #7
 8015026:	1d23      	adds	r3, r4, #4
 8015028:	1af2      	subs	r2, r6, r3
 801502a:	d0b6      	beq.n	8014f9a <_malloc_r+0x22>
 801502c:	1b9b      	subs	r3, r3, r6
 801502e:	50a3      	str	r3, [r4, r2]
 8015030:	e7b3      	b.n	8014f9a <_malloc_r+0x22>
 8015032:	6862      	ldr	r2, [r4, #4]
 8015034:	42a3      	cmp	r3, r4
 8015036:	bf0c      	ite	eq
 8015038:	6032      	streq	r2, [r6, #0]
 801503a:	605a      	strne	r2, [r3, #4]
 801503c:	e7ec      	b.n	8015018 <_malloc_r+0xa0>
 801503e:	4623      	mov	r3, r4
 8015040:	6864      	ldr	r4, [r4, #4]
 8015042:	e7b2      	b.n	8014faa <_malloc_r+0x32>
 8015044:	4634      	mov	r4, r6
 8015046:	6876      	ldr	r6, [r6, #4]
 8015048:	e7b9      	b.n	8014fbe <_malloc_r+0x46>
 801504a:	230c      	movs	r3, #12
 801504c:	603b      	str	r3, [r7, #0]
 801504e:	4638      	mov	r0, r7
 8015050:	f000 f950 	bl	80152f4 <__malloc_unlock>
 8015054:	e7a1      	b.n	8014f9a <_malloc_r+0x22>
 8015056:	6025      	str	r5, [r4, #0]
 8015058:	e7de      	b.n	8015018 <_malloc_r+0xa0>
 801505a:	bf00      	nop
 801505c:	200030c0 	.word	0x200030c0

08015060 <_sbrk_r>:
 8015060:	b538      	push	{r3, r4, r5, lr}
 8015062:	4d06      	ldr	r5, [pc, #24]	; (801507c <_sbrk_r+0x1c>)
 8015064:	2300      	movs	r3, #0
 8015066:	4604      	mov	r4, r0
 8015068:	4608      	mov	r0, r1
 801506a:	602b      	str	r3, [r5, #0]
 801506c:	f7ee f826 	bl	80030bc <_sbrk>
 8015070:	1c43      	adds	r3, r0, #1
 8015072:	d102      	bne.n	801507a <_sbrk_r+0x1a>
 8015074:	682b      	ldr	r3, [r5, #0]
 8015076:	b103      	cbz	r3, 801507a <_sbrk_r+0x1a>
 8015078:	6023      	str	r3, [r4, #0]
 801507a:	bd38      	pop	{r3, r4, r5, pc}
 801507c:	200030c8 	.word	0x200030c8

08015080 <siprintf>:
 8015080:	b40e      	push	{r1, r2, r3}
 8015082:	b500      	push	{lr}
 8015084:	b09c      	sub	sp, #112	; 0x70
 8015086:	ab1d      	add	r3, sp, #116	; 0x74
 8015088:	9002      	str	r0, [sp, #8]
 801508a:	9006      	str	r0, [sp, #24]
 801508c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015090:	4809      	ldr	r0, [pc, #36]	; (80150b8 <siprintf+0x38>)
 8015092:	9107      	str	r1, [sp, #28]
 8015094:	9104      	str	r1, [sp, #16]
 8015096:	4909      	ldr	r1, [pc, #36]	; (80150bc <siprintf+0x3c>)
 8015098:	f853 2b04 	ldr.w	r2, [r3], #4
 801509c:	9105      	str	r1, [sp, #20]
 801509e:	6800      	ldr	r0, [r0, #0]
 80150a0:	9301      	str	r3, [sp, #4]
 80150a2:	a902      	add	r1, sp, #8
 80150a4:	f000 f988 	bl	80153b8 <_svfiprintf_r>
 80150a8:	9b02      	ldr	r3, [sp, #8]
 80150aa:	2200      	movs	r2, #0
 80150ac:	701a      	strb	r2, [r3, #0]
 80150ae:	b01c      	add	sp, #112	; 0x70
 80150b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80150b4:	b003      	add	sp, #12
 80150b6:	4770      	bx	lr
 80150b8:	20000138 	.word	0x20000138
 80150bc:	ffff0208 	.word	0xffff0208

080150c0 <strcat>:
 80150c0:	b510      	push	{r4, lr}
 80150c2:	4602      	mov	r2, r0
 80150c4:	7814      	ldrb	r4, [r2, #0]
 80150c6:	4613      	mov	r3, r2
 80150c8:	3201      	adds	r2, #1
 80150ca:	2c00      	cmp	r4, #0
 80150cc:	d1fa      	bne.n	80150c4 <strcat+0x4>
 80150ce:	3b01      	subs	r3, #1
 80150d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150d8:	2a00      	cmp	r2, #0
 80150da:	d1f9      	bne.n	80150d0 <strcat+0x10>
 80150dc:	bd10      	pop	{r4, pc}

080150de <strchr>:
 80150de:	b2c9      	uxtb	r1, r1
 80150e0:	4603      	mov	r3, r0
 80150e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150e6:	b11a      	cbz	r2, 80150f0 <strchr+0x12>
 80150e8:	428a      	cmp	r2, r1
 80150ea:	d1f9      	bne.n	80150e0 <strchr+0x2>
 80150ec:	4618      	mov	r0, r3
 80150ee:	4770      	bx	lr
 80150f0:	2900      	cmp	r1, #0
 80150f2:	bf18      	it	ne
 80150f4:	2300      	movne	r3, #0
 80150f6:	e7f9      	b.n	80150ec <strchr+0xe>

080150f8 <strcpy>:
 80150f8:	4603      	mov	r3, r0
 80150fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150fe:	f803 2b01 	strb.w	r2, [r3], #1
 8015102:	2a00      	cmp	r2, #0
 8015104:	d1f9      	bne.n	80150fa <strcpy+0x2>
 8015106:	4770      	bx	lr

08015108 <strncpy>:
 8015108:	b510      	push	{r4, lr}
 801510a:	3901      	subs	r1, #1
 801510c:	4603      	mov	r3, r0
 801510e:	b132      	cbz	r2, 801511e <strncpy+0x16>
 8015110:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015114:	f803 4b01 	strb.w	r4, [r3], #1
 8015118:	3a01      	subs	r2, #1
 801511a:	2c00      	cmp	r4, #0
 801511c:	d1f7      	bne.n	801510e <strncpy+0x6>
 801511e:	441a      	add	r2, r3
 8015120:	2100      	movs	r1, #0
 8015122:	4293      	cmp	r3, r2
 8015124:	d100      	bne.n	8015128 <strncpy+0x20>
 8015126:	bd10      	pop	{r4, pc}
 8015128:	f803 1b01 	strb.w	r1, [r3], #1
 801512c:	e7f9      	b.n	8015122 <strncpy+0x1a>

0801512e <strstr>:
 801512e:	780a      	ldrb	r2, [r1, #0]
 8015130:	b570      	push	{r4, r5, r6, lr}
 8015132:	b96a      	cbnz	r2, 8015150 <strstr+0x22>
 8015134:	bd70      	pop	{r4, r5, r6, pc}
 8015136:	429a      	cmp	r2, r3
 8015138:	d109      	bne.n	801514e <strstr+0x20>
 801513a:	460c      	mov	r4, r1
 801513c:	4605      	mov	r5, r0
 801513e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015142:	2b00      	cmp	r3, #0
 8015144:	d0f6      	beq.n	8015134 <strstr+0x6>
 8015146:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801514a:	429e      	cmp	r6, r3
 801514c:	d0f7      	beq.n	801513e <strstr+0x10>
 801514e:	3001      	adds	r0, #1
 8015150:	7803      	ldrb	r3, [r0, #0]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d1ef      	bne.n	8015136 <strstr+0x8>
 8015156:	4618      	mov	r0, r3
 8015158:	e7ec      	b.n	8015134 <strstr+0x6>
	...

0801515c <_strtol_l.constprop.0>:
 801515c:	2b01      	cmp	r3, #1
 801515e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015162:	d001      	beq.n	8015168 <_strtol_l.constprop.0+0xc>
 8015164:	2b24      	cmp	r3, #36	; 0x24
 8015166:	d906      	bls.n	8015176 <_strtol_l.constprop.0+0x1a>
 8015168:	f7ff fd90 	bl	8014c8c <__errno>
 801516c:	2316      	movs	r3, #22
 801516e:	6003      	str	r3, [r0, #0]
 8015170:	2000      	movs	r0, #0
 8015172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015176:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801525c <_strtol_l.constprop.0+0x100>
 801517a:	460d      	mov	r5, r1
 801517c:	462e      	mov	r6, r5
 801517e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015182:	f814 700c 	ldrb.w	r7, [r4, ip]
 8015186:	f017 0708 	ands.w	r7, r7, #8
 801518a:	d1f7      	bne.n	801517c <_strtol_l.constprop.0+0x20>
 801518c:	2c2d      	cmp	r4, #45	; 0x2d
 801518e:	d132      	bne.n	80151f6 <_strtol_l.constprop.0+0x9a>
 8015190:	782c      	ldrb	r4, [r5, #0]
 8015192:	2701      	movs	r7, #1
 8015194:	1cb5      	adds	r5, r6, #2
 8015196:	2b00      	cmp	r3, #0
 8015198:	d05b      	beq.n	8015252 <_strtol_l.constprop.0+0xf6>
 801519a:	2b10      	cmp	r3, #16
 801519c:	d109      	bne.n	80151b2 <_strtol_l.constprop.0+0x56>
 801519e:	2c30      	cmp	r4, #48	; 0x30
 80151a0:	d107      	bne.n	80151b2 <_strtol_l.constprop.0+0x56>
 80151a2:	782c      	ldrb	r4, [r5, #0]
 80151a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80151a8:	2c58      	cmp	r4, #88	; 0x58
 80151aa:	d14d      	bne.n	8015248 <_strtol_l.constprop.0+0xec>
 80151ac:	786c      	ldrb	r4, [r5, #1]
 80151ae:	2310      	movs	r3, #16
 80151b0:	3502      	adds	r5, #2
 80151b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80151b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80151ba:	f04f 0c00 	mov.w	ip, #0
 80151be:	fbb8 f9f3 	udiv	r9, r8, r3
 80151c2:	4666      	mov	r6, ip
 80151c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80151c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80151cc:	f1be 0f09 	cmp.w	lr, #9
 80151d0:	d816      	bhi.n	8015200 <_strtol_l.constprop.0+0xa4>
 80151d2:	4674      	mov	r4, lr
 80151d4:	42a3      	cmp	r3, r4
 80151d6:	dd24      	ble.n	8015222 <_strtol_l.constprop.0+0xc6>
 80151d8:	f1bc 0f00 	cmp.w	ip, #0
 80151dc:	db1e      	blt.n	801521c <_strtol_l.constprop.0+0xc0>
 80151de:	45b1      	cmp	r9, r6
 80151e0:	d31c      	bcc.n	801521c <_strtol_l.constprop.0+0xc0>
 80151e2:	d101      	bne.n	80151e8 <_strtol_l.constprop.0+0x8c>
 80151e4:	45a2      	cmp	sl, r4
 80151e6:	db19      	blt.n	801521c <_strtol_l.constprop.0+0xc0>
 80151e8:	fb06 4603 	mla	r6, r6, r3, r4
 80151ec:	f04f 0c01 	mov.w	ip, #1
 80151f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80151f4:	e7e8      	b.n	80151c8 <_strtol_l.constprop.0+0x6c>
 80151f6:	2c2b      	cmp	r4, #43	; 0x2b
 80151f8:	bf04      	itt	eq
 80151fa:	782c      	ldrbeq	r4, [r5, #0]
 80151fc:	1cb5      	addeq	r5, r6, #2
 80151fe:	e7ca      	b.n	8015196 <_strtol_l.constprop.0+0x3a>
 8015200:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8015204:	f1be 0f19 	cmp.w	lr, #25
 8015208:	d801      	bhi.n	801520e <_strtol_l.constprop.0+0xb2>
 801520a:	3c37      	subs	r4, #55	; 0x37
 801520c:	e7e2      	b.n	80151d4 <_strtol_l.constprop.0+0x78>
 801520e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8015212:	f1be 0f19 	cmp.w	lr, #25
 8015216:	d804      	bhi.n	8015222 <_strtol_l.constprop.0+0xc6>
 8015218:	3c57      	subs	r4, #87	; 0x57
 801521a:	e7db      	b.n	80151d4 <_strtol_l.constprop.0+0x78>
 801521c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8015220:	e7e6      	b.n	80151f0 <_strtol_l.constprop.0+0x94>
 8015222:	f1bc 0f00 	cmp.w	ip, #0
 8015226:	da05      	bge.n	8015234 <_strtol_l.constprop.0+0xd8>
 8015228:	2322      	movs	r3, #34	; 0x22
 801522a:	6003      	str	r3, [r0, #0]
 801522c:	4646      	mov	r6, r8
 801522e:	b942      	cbnz	r2, 8015242 <_strtol_l.constprop.0+0xe6>
 8015230:	4630      	mov	r0, r6
 8015232:	e79e      	b.n	8015172 <_strtol_l.constprop.0+0x16>
 8015234:	b107      	cbz	r7, 8015238 <_strtol_l.constprop.0+0xdc>
 8015236:	4276      	negs	r6, r6
 8015238:	2a00      	cmp	r2, #0
 801523a:	d0f9      	beq.n	8015230 <_strtol_l.constprop.0+0xd4>
 801523c:	f1bc 0f00 	cmp.w	ip, #0
 8015240:	d000      	beq.n	8015244 <_strtol_l.constprop.0+0xe8>
 8015242:	1e69      	subs	r1, r5, #1
 8015244:	6011      	str	r1, [r2, #0]
 8015246:	e7f3      	b.n	8015230 <_strtol_l.constprop.0+0xd4>
 8015248:	2430      	movs	r4, #48	; 0x30
 801524a:	2b00      	cmp	r3, #0
 801524c:	d1b1      	bne.n	80151b2 <_strtol_l.constprop.0+0x56>
 801524e:	2308      	movs	r3, #8
 8015250:	e7af      	b.n	80151b2 <_strtol_l.constprop.0+0x56>
 8015252:	2c30      	cmp	r4, #48	; 0x30
 8015254:	d0a5      	beq.n	80151a2 <_strtol_l.constprop.0+0x46>
 8015256:	230a      	movs	r3, #10
 8015258:	e7ab      	b.n	80151b2 <_strtol_l.constprop.0+0x56>
 801525a:	bf00      	nop
 801525c:	08016d0d 	.word	0x08016d0d

08015260 <strtol>:
 8015260:	4613      	mov	r3, r2
 8015262:	460a      	mov	r2, r1
 8015264:	4601      	mov	r1, r0
 8015266:	4802      	ldr	r0, [pc, #8]	; (8015270 <strtol+0x10>)
 8015268:	6800      	ldr	r0, [r0, #0]
 801526a:	f7ff bf77 	b.w	801515c <_strtol_l.constprop.0>
 801526e:	bf00      	nop
 8015270:	20000138 	.word	0x20000138

08015274 <_vsniprintf_r>:
 8015274:	b530      	push	{r4, r5, lr}
 8015276:	4614      	mov	r4, r2
 8015278:	2c00      	cmp	r4, #0
 801527a:	b09b      	sub	sp, #108	; 0x6c
 801527c:	4605      	mov	r5, r0
 801527e:	461a      	mov	r2, r3
 8015280:	da05      	bge.n	801528e <_vsniprintf_r+0x1a>
 8015282:	238b      	movs	r3, #139	; 0x8b
 8015284:	6003      	str	r3, [r0, #0]
 8015286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801528a:	b01b      	add	sp, #108	; 0x6c
 801528c:	bd30      	pop	{r4, r5, pc}
 801528e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015292:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015296:	bf14      	ite	ne
 8015298:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801529c:	4623      	moveq	r3, r4
 801529e:	9302      	str	r3, [sp, #8]
 80152a0:	9305      	str	r3, [sp, #20]
 80152a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152a6:	9100      	str	r1, [sp, #0]
 80152a8:	9104      	str	r1, [sp, #16]
 80152aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80152ae:	4669      	mov	r1, sp
 80152b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80152b2:	f000 f881 	bl	80153b8 <_svfiprintf_r>
 80152b6:	1c43      	adds	r3, r0, #1
 80152b8:	bfbc      	itt	lt
 80152ba:	238b      	movlt	r3, #139	; 0x8b
 80152bc:	602b      	strlt	r3, [r5, #0]
 80152be:	2c00      	cmp	r4, #0
 80152c0:	d0e3      	beq.n	801528a <_vsniprintf_r+0x16>
 80152c2:	9b00      	ldr	r3, [sp, #0]
 80152c4:	2200      	movs	r2, #0
 80152c6:	701a      	strb	r2, [r3, #0]
 80152c8:	e7df      	b.n	801528a <_vsniprintf_r+0x16>
	...

080152cc <vsniprintf>:
 80152cc:	b507      	push	{r0, r1, r2, lr}
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	4613      	mov	r3, r2
 80152d2:	460a      	mov	r2, r1
 80152d4:	4601      	mov	r1, r0
 80152d6:	4803      	ldr	r0, [pc, #12]	; (80152e4 <vsniprintf+0x18>)
 80152d8:	6800      	ldr	r0, [r0, #0]
 80152da:	f7ff ffcb 	bl	8015274 <_vsniprintf_r>
 80152de:	b003      	add	sp, #12
 80152e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80152e4:	20000138 	.word	0x20000138

080152e8 <__malloc_lock>:
 80152e8:	4801      	ldr	r0, [pc, #4]	; (80152f0 <__malloc_lock+0x8>)
 80152ea:	f000 baf9 	b.w	80158e0 <__retarget_lock_acquire_recursive>
 80152ee:	bf00      	nop
 80152f0:	200030cc 	.word	0x200030cc

080152f4 <__malloc_unlock>:
 80152f4:	4801      	ldr	r0, [pc, #4]	; (80152fc <__malloc_unlock+0x8>)
 80152f6:	f000 baf4 	b.w	80158e2 <__retarget_lock_release_recursive>
 80152fa:	bf00      	nop
 80152fc:	200030cc 	.word	0x200030cc

08015300 <__ssputs_r>:
 8015300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015304:	688e      	ldr	r6, [r1, #8]
 8015306:	429e      	cmp	r6, r3
 8015308:	4682      	mov	sl, r0
 801530a:	460c      	mov	r4, r1
 801530c:	4690      	mov	r8, r2
 801530e:	461f      	mov	r7, r3
 8015310:	d838      	bhi.n	8015384 <__ssputs_r+0x84>
 8015312:	898a      	ldrh	r2, [r1, #12]
 8015314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015318:	d032      	beq.n	8015380 <__ssputs_r+0x80>
 801531a:	6825      	ldr	r5, [r4, #0]
 801531c:	6909      	ldr	r1, [r1, #16]
 801531e:	eba5 0901 	sub.w	r9, r5, r1
 8015322:	6965      	ldr	r5, [r4, #20]
 8015324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801532c:	3301      	adds	r3, #1
 801532e:	444b      	add	r3, r9
 8015330:	106d      	asrs	r5, r5, #1
 8015332:	429d      	cmp	r5, r3
 8015334:	bf38      	it	cc
 8015336:	461d      	movcc	r5, r3
 8015338:	0553      	lsls	r3, r2, #21
 801533a:	d531      	bpl.n	80153a0 <__ssputs_r+0xa0>
 801533c:	4629      	mov	r1, r5
 801533e:	f7ff fe1b 	bl	8014f78 <_malloc_r>
 8015342:	4606      	mov	r6, r0
 8015344:	b950      	cbnz	r0, 801535c <__ssputs_r+0x5c>
 8015346:	230c      	movs	r3, #12
 8015348:	f8ca 3000 	str.w	r3, [sl]
 801534c:	89a3      	ldrh	r3, [r4, #12]
 801534e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015352:	81a3      	strh	r3, [r4, #12]
 8015354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801535c:	6921      	ldr	r1, [r4, #16]
 801535e:	464a      	mov	r2, r9
 8015360:	f7ff fd72 	bl	8014e48 <memcpy>
 8015364:	89a3      	ldrh	r3, [r4, #12]
 8015366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801536e:	81a3      	strh	r3, [r4, #12]
 8015370:	6126      	str	r6, [r4, #16]
 8015372:	6165      	str	r5, [r4, #20]
 8015374:	444e      	add	r6, r9
 8015376:	eba5 0509 	sub.w	r5, r5, r9
 801537a:	6026      	str	r6, [r4, #0]
 801537c:	60a5      	str	r5, [r4, #8]
 801537e:	463e      	mov	r6, r7
 8015380:	42be      	cmp	r6, r7
 8015382:	d900      	bls.n	8015386 <__ssputs_r+0x86>
 8015384:	463e      	mov	r6, r7
 8015386:	6820      	ldr	r0, [r4, #0]
 8015388:	4632      	mov	r2, r6
 801538a:	4641      	mov	r1, r8
 801538c:	f000 faaa 	bl	80158e4 <memmove>
 8015390:	68a3      	ldr	r3, [r4, #8]
 8015392:	1b9b      	subs	r3, r3, r6
 8015394:	60a3      	str	r3, [r4, #8]
 8015396:	6823      	ldr	r3, [r4, #0]
 8015398:	4433      	add	r3, r6
 801539a:	6023      	str	r3, [r4, #0]
 801539c:	2000      	movs	r0, #0
 801539e:	e7db      	b.n	8015358 <__ssputs_r+0x58>
 80153a0:	462a      	mov	r2, r5
 80153a2:	f000 fab9 	bl	8015918 <_realloc_r>
 80153a6:	4606      	mov	r6, r0
 80153a8:	2800      	cmp	r0, #0
 80153aa:	d1e1      	bne.n	8015370 <__ssputs_r+0x70>
 80153ac:	6921      	ldr	r1, [r4, #16]
 80153ae:	4650      	mov	r0, sl
 80153b0:	f7ff fd76 	bl	8014ea0 <_free_r>
 80153b4:	e7c7      	b.n	8015346 <__ssputs_r+0x46>
	...

080153b8 <_svfiprintf_r>:
 80153b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153bc:	4698      	mov	r8, r3
 80153be:	898b      	ldrh	r3, [r1, #12]
 80153c0:	061b      	lsls	r3, r3, #24
 80153c2:	b09d      	sub	sp, #116	; 0x74
 80153c4:	4607      	mov	r7, r0
 80153c6:	460d      	mov	r5, r1
 80153c8:	4614      	mov	r4, r2
 80153ca:	d50e      	bpl.n	80153ea <_svfiprintf_r+0x32>
 80153cc:	690b      	ldr	r3, [r1, #16]
 80153ce:	b963      	cbnz	r3, 80153ea <_svfiprintf_r+0x32>
 80153d0:	2140      	movs	r1, #64	; 0x40
 80153d2:	f7ff fdd1 	bl	8014f78 <_malloc_r>
 80153d6:	6028      	str	r0, [r5, #0]
 80153d8:	6128      	str	r0, [r5, #16]
 80153da:	b920      	cbnz	r0, 80153e6 <_svfiprintf_r+0x2e>
 80153dc:	230c      	movs	r3, #12
 80153de:	603b      	str	r3, [r7, #0]
 80153e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153e4:	e0d1      	b.n	801558a <_svfiprintf_r+0x1d2>
 80153e6:	2340      	movs	r3, #64	; 0x40
 80153e8:	616b      	str	r3, [r5, #20]
 80153ea:	2300      	movs	r3, #0
 80153ec:	9309      	str	r3, [sp, #36]	; 0x24
 80153ee:	2320      	movs	r3, #32
 80153f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80153f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80153f8:	2330      	movs	r3, #48	; 0x30
 80153fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80155a4 <_svfiprintf_r+0x1ec>
 80153fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015402:	f04f 0901 	mov.w	r9, #1
 8015406:	4623      	mov	r3, r4
 8015408:	469a      	mov	sl, r3
 801540a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801540e:	b10a      	cbz	r2, 8015414 <_svfiprintf_r+0x5c>
 8015410:	2a25      	cmp	r2, #37	; 0x25
 8015412:	d1f9      	bne.n	8015408 <_svfiprintf_r+0x50>
 8015414:	ebba 0b04 	subs.w	fp, sl, r4
 8015418:	d00b      	beq.n	8015432 <_svfiprintf_r+0x7a>
 801541a:	465b      	mov	r3, fp
 801541c:	4622      	mov	r2, r4
 801541e:	4629      	mov	r1, r5
 8015420:	4638      	mov	r0, r7
 8015422:	f7ff ff6d 	bl	8015300 <__ssputs_r>
 8015426:	3001      	adds	r0, #1
 8015428:	f000 80aa 	beq.w	8015580 <_svfiprintf_r+0x1c8>
 801542c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801542e:	445a      	add	r2, fp
 8015430:	9209      	str	r2, [sp, #36]	; 0x24
 8015432:	f89a 3000 	ldrb.w	r3, [sl]
 8015436:	2b00      	cmp	r3, #0
 8015438:	f000 80a2 	beq.w	8015580 <_svfiprintf_r+0x1c8>
 801543c:	2300      	movs	r3, #0
 801543e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015446:	f10a 0a01 	add.w	sl, sl, #1
 801544a:	9304      	str	r3, [sp, #16]
 801544c:	9307      	str	r3, [sp, #28]
 801544e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015452:	931a      	str	r3, [sp, #104]	; 0x68
 8015454:	4654      	mov	r4, sl
 8015456:	2205      	movs	r2, #5
 8015458:	f814 1b01 	ldrb.w	r1, [r4], #1
 801545c:	4851      	ldr	r0, [pc, #324]	; (80155a4 <_svfiprintf_r+0x1ec>)
 801545e:	f7ea fecf 	bl	8000200 <memchr>
 8015462:	9a04      	ldr	r2, [sp, #16]
 8015464:	b9d8      	cbnz	r0, 801549e <_svfiprintf_r+0xe6>
 8015466:	06d0      	lsls	r0, r2, #27
 8015468:	bf44      	itt	mi
 801546a:	2320      	movmi	r3, #32
 801546c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015470:	0711      	lsls	r1, r2, #28
 8015472:	bf44      	itt	mi
 8015474:	232b      	movmi	r3, #43	; 0x2b
 8015476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801547a:	f89a 3000 	ldrb.w	r3, [sl]
 801547e:	2b2a      	cmp	r3, #42	; 0x2a
 8015480:	d015      	beq.n	80154ae <_svfiprintf_r+0xf6>
 8015482:	9a07      	ldr	r2, [sp, #28]
 8015484:	4654      	mov	r4, sl
 8015486:	2000      	movs	r0, #0
 8015488:	f04f 0c0a 	mov.w	ip, #10
 801548c:	4621      	mov	r1, r4
 801548e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015492:	3b30      	subs	r3, #48	; 0x30
 8015494:	2b09      	cmp	r3, #9
 8015496:	d94e      	bls.n	8015536 <_svfiprintf_r+0x17e>
 8015498:	b1b0      	cbz	r0, 80154c8 <_svfiprintf_r+0x110>
 801549a:	9207      	str	r2, [sp, #28]
 801549c:	e014      	b.n	80154c8 <_svfiprintf_r+0x110>
 801549e:	eba0 0308 	sub.w	r3, r0, r8
 80154a2:	fa09 f303 	lsl.w	r3, r9, r3
 80154a6:	4313      	orrs	r3, r2
 80154a8:	9304      	str	r3, [sp, #16]
 80154aa:	46a2      	mov	sl, r4
 80154ac:	e7d2      	b.n	8015454 <_svfiprintf_r+0x9c>
 80154ae:	9b03      	ldr	r3, [sp, #12]
 80154b0:	1d19      	adds	r1, r3, #4
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	9103      	str	r1, [sp, #12]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	bfbb      	ittet	lt
 80154ba:	425b      	neglt	r3, r3
 80154bc:	f042 0202 	orrlt.w	r2, r2, #2
 80154c0:	9307      	strge	r3, [sp, #28]
 80154c2:	9307      	strlt	r3, [sp, #28]
 80154c4:	bfb8      	it	lt
 80154c6:	9204      	strlt	r2, [sp, #16]
 80154c8:	7823      	ldrb	r3, [r4, #0]
 80154ca:	2b2e      	cmp	r3, #46	; 0x2e
 80154cc:	d10c      	bne.n	80154e8 <_svfiprintf_r+0x130>
 80154ce:	7863      	ldrb	r3, [r4, #1]
 80154d0:	2b2a      	cmp	r3, #42	; 0x2a
 80154d2:	d135      	bne.n	8015540 <_svfiprintf_r+0x188>
 80154d4:	9b03      	ldr	r3, [sp, #12]
 80154d6:	1d1a      	adds	r2, r3, #4
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	9203      	str	r2, [sp, #12]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	bfb8      	it	lt
 80154e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80154e4:	3402      	adds	r4, #2
 80154e6:	9305      	str	r3, [sp, #20]
 80154e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80155b4 <_svfiprintf_r+0x1fc>
 80154ec:	7821      	ldrb	r1, [r4, #0]
 80154ee:	2203      	movs	r2, #3
 80154f0:	4650      	mov	r0, sl
 80154f2:	f7ea fe85 	bl	8000200 <memchr>
 80154f6:	b140      	cbz	r0, 801550a <_svfiprintf_r+0x152>
 80154f8:	2340      	movs	r3, #64	; 0x40
 80154fa:	eba0 000a 	sub.w	r0, r0, sl
 80154fe:	fa03 f000 	lsl.w	r0, r3, r0
 8015502:	9b04      	ldr	r3, [sp, #16]
 8015504:	4303      	orrs	r3, r0
 8015506:	3401      	adds	r4, #1
 8015508:	9304      	str	r3, [sp, #16]
 801550a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801550e:	4826      	ldr	r0, [pc, #152]	; (80155a8 <_svfiprintf_r+0x1f0>)
 8015510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015514:	2206      	movs	r2, #6
 8015516:	f7ea fe73 	bl	8000200 <memchr>
 801551a:	2800      	cmp	r0, #0
 801551c:	d038      	beq.n	8015590 <_svfiprintf_r+0x1d8>
 801551e:	4b23      	ldr	r3, [pc, #140]	; (80155ac <_svfiprintf_r+0x1f4>)
 8015520:	bb1b      	cbnz	r3, 801556a <_svfiprintf_r+0x1b2>
 8015522:	9b03      	ldr	r3, [sp, #12]
 8015524:	3307      	adds	r3, #7
 8015526:	f023 0307 	bic.w	r3, r3, #7
 801552a:	3308      	adds	r3, #8
 801552c:	9303      	str	r3, [sp, #12]
 801552e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015530:	4433      	add	r3, r6
 8015532:	9309      	str	r3, [sp, #36]	; 0x24
 8015534:	e767      	b.n	8015406 <_svfiprintf_r+0x4e>
 8015536:	fb0c 3202 	mla	r2, ip, r2, r3
 801553a:	460c      	mov	r4, r1
 801553c:	2001      	movs	r0, #1
 801553e:	e7a5      	b.n	801548c <_svfiprintf_r+0xd4>
 8015540:	2300      	movs	r3, #0
 8015542:	3401      	adds	r4, #1
 8015544:	9305      	str	r3, [sp, #20]
 8015546:	4619      	mov	r1, r3
 8015548:	f04f 0c0a 	mov.w	ip, #10
 801554c:	4620      	mov	r0, r4
 801554e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015552:	3a30      	subs	r2, #48	; 0x30
 8015554:	2a09      	cmp	r2, #9
 8015556:	d903      	bls.n	8015560 <_svfiprintf_r+0x1a8>
 8015558:	2b00      	cmp	r3, #0
 801555a:	d0c5      	beq.n	80154e8 <_svfiprintf_r+0x130>
 801555c:	9105      	str	r1, [sp, #20]
 801555e:	e7c3      	b.n	80154e8 <_svfiprintf_r+0x130>
 8015560:	fb0c 2101 	mla	r1, ip, r1, r2
 8015564:	4604      	mov	r4, r0
 8015566:	2301      	movs	r3, #1
 8015568:	e7f0      	b.n	801554c <_svfiprintf_r+0x194>
 801556a:	ab03      	add	r3, sp, #12
 801556c:	9300      	str	r3, [sp, #0]
 801556e:	462a      	mov	r2, r5
 8015570:	4b0f      	ldr	r3, [pc, #60]	; (80155b0 <_svfiprintf_r+0x1f8>)
 8015572:	a904      	add	r1, sp, #16
 8015574:	4638      	mov	r0, r7
 8015576:	f3af 8000 	nop.w
 801557a:	1c42      	adds	r2, r0, #1
 801557c:	4606      	mov	r6, r0
 801557e:	d1d6      	bne.n	801552e <_svfiprintf_r+0x176>
 8015580:	89ab      	ldrh	r3, [r5, #12]
 8015582:	065b      	lsls	r3, r3, #25
 8015584:	f53f af2c 	bmi.w	80153e0 <_svfiprintf_r+0x28>
 8015588:	9809      	ldr	r0, [sp, #36]	; 0x24
 801558a:	b01d      	add	sp, #116	; 0x74
 801558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015590:	ab03      	add	r3, sp, #12
 8015592:	9300      	str	r3, [sp, #0]
 8015594:	462a      	mov	r2, r5
 8015596:	4b06      	ldr	r3, [pc, #24]	; (80155b0 <_svfiprintf_r+0x1f8>)
 8015598:	a904      	add	r1, sp, #16
 801559a:	4638      	mov	r0, r7
 801559c:	f000 f87a 	bl	8015694 <_printf_i>
 80155a0:	e7eb      	b.n	801557a <_svfiprintf_r+0x1c2>
 80155a2:	bf00      	nop
 80155a4:	08016e0d 	.word	0x08016e0d
 80155a8:	08016e17 	.word	0x08016e17
 80155ac:	00000000 	.word	0x00000000
 80155b0:	08015301 	.word	0x08015301
 80155b4:	08016e13 	.word	0x08016e13

080155b8 <_printf_common>:
 80155b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155bc:	4616      	mov	r6, r2
 80155be:	4699      	mov	r9, r3
 80155c0:	688a      	ldr	r2, [r1, #8]
 80155c2:	690b      	ldr	r3, [r1, #16]
 80155c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80155c8:	4293      	cmp	r3, r2
 80155ca:	bfb8      	it	lt
 80155cc:	4613      	movlt	r3, r2
 80155ce:	6033      	str	r3, [r6, #0]
 80155d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80155d4:	4607      	mov	r7, r0
 80155d6:	460c      	mov	r4, r1
 80155d8:	b10a      	cbz	r2, 80155de <_printf_common+0x26>
 80155da:	3301      	adds	r3, #1
 80155dc:	6033      	str	r3, [r6, #0]
 80155de:	6823      	ldr	r3, [r4, #0]
 80155e0:	0699      	lsls	r1, r3, #26
 80155e2:	bf42      	ittt	mi
 80155e4:	6833      	ldrmi	r3, [r6, #0]
 80155e6:	3302      	addmi	r3, #2
 80155e8:	6033      	strmi	r3, [r6, #0]
 80155ea:	6825      	ldr	r5, [r4, #0]
 80155ec:	f015 0506 	ands.w	r5, r5, #6
 80155f0:	d106      	bne.n	8015600 <_printf_common+0x48>
 80155f2:	f104 0a19 	add.w	sl, r4, #25
 80155f6:	68e3      	ldr	r3, [r4, #12]
 80155f8:	6832      	ldr	r2, [r6, #0]
 80155fa:	1a9b      	subs	r3, r3, r2
 80155fc:	42ab      	cmp	r3, r5
 80155fe:	dc26      	bgt.n	801564e <_printf_common+0x96>
 8015600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015604:	1e13      	subs	r3, r2, #0
 8015606:	6822      	ldr	r2, [r4, #0]
 8015608:	bf18      	it	ne
 801560a:	2301      	movne	r3, #1
 801560c:	0692      	lsls	r2, r2, #26
 801560e:	d42b      	bmi.n	8015668 <_printf_common+0xb0>
 8015610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015614:	4649      	mov	r1, r9
 8015616:	4638      	mov	r0, r7
 8015618:	47c0      	blx	r8
 801561a:	3001      	adds	r0, #1
 801561c:	d01e      	beq.n	801565c <_printf_common+0xa4>
 801561e:	6823      	ldr	r3, [r4, #0]
 8015620:	68e5      	ldr	r5, [r4, #12]
 8015622:	6832      	ldr	r2, [r6, #0]
 8015624:	f003 0306 	and.w	r3, r3, #6
 8015628:	2b04      	cmp	r3, #4
 801562a:	bf08      	it	eq
 801562c:	1aad      	subeq	r5, r5, r2
 801562e:	68a3      	ldr	r3, [r4, #8]
 8015630:	6922      	ldr	r2, [r4, #16]
 8015632:	bf0c      	ite	eq
 8015634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015638:	2500      	movne	r5, #0
 801563a:	4293      	cmp	r3, r2
 801563c:	bfc4      	itt	gt
 801563e:	1a9b      	subgt	r3, r3, r2
 8015640:	18ed      	addgt	r5, r5, r3
 8015642:	2600      	movs	r6, #0
 8015644:	341a      	adds	r4, #26
 8015646:	42b5      	cmp	r5, r6
 8015648:	d11a      	bne.n	8015680 <_printf_common+0xc8>
 801564a:	2000      	movs	r0, #0
 801564c:	e008      	b.n	8015660 <_printf_common+0xa8>
 801564e:	2301      	movs	r3, #1
 8015650:	4652      	mov	r2, sl
 8015652:	4649      	mov	r1, r9
 8015654:	4638      	mov	r0, r7
 8015656:	47c0      	blx	r8
 8015658:	3001      	adds	r0, #1
 801565a:	d103      	bne.n	8015664 <_printf_common+0xac>
 801565c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015664:	3501      	adds	r5, #1
 8015666:	e7c6      	b.n	80155f6 <_printf_common+0x3e>
 8015668:	18e1      	adds	r1, r4, r3
 801566a:	1c5a      	adds	r2, r3, #1
 801566c:	2030      	movs	r0, #48	; 0x30
 801566e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015672:	4422      	add	r2, r4
 8015674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801567c:	3302      	adds	r3, #2
 801567e:	e7c7      	b.n	8015610 <_printf_common+0x58>
 8015680:	2301      	movs	r3, #1
 8015682:	4622      	mov	r2, r4
 8015684:	4649      	mov	r1, r9
 8015686:	4638      	mov	r0, r7
 8015688:	47c0      	blx	r8
 801568a:	3001      	adds	r0, #1
 801568c:	d0e6      	beq.n	801565c <_printf_common+0xa4>
 801568e:	3601      	adds	r6, #1
 8015690:	e7d9      	b.n	8015646 <_printf_common+0x8e>
	...

08015694 <_printf_i>:
 8015694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015698:	7e0f      	ldrb	r7, [r1, #24]
 801569a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801569c:	2f78      	cmp	r7, #120	; 0x78
 801569e:	4691      	mov	r9, r2
 80156a0:	4680      	mov	r8, r0
 80156a2:	460c      	mov	r4, r1
 80156a4:	469a      	mov	sl, r3
 80156a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80156aa:	d807      	bhi.n	80156bc <_printf_i+0x28>
 80156ac:	2f62      	cmp	r7, #98	; 0x62
 80156ae:	d80a      	bhi.n	80156c6 <_printf_i+0x32>
 80156b0:	2f00      	cmp	r7, #0
 80156b2:	f000 80d8 	beq.w	8015866 <_printf_i+0x1d2>
 80156b6:	2f58      	cmp	r7, #88	; 0x58
 80156b8:	f000 80a3 	beq.w	8015802 <_printf_i+0x16e>
 80156bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80156c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80156c4:	e03a      	b.n	801573c <_printf_i+0xa8>
 80156c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80156ca:	2b15      	cmp	r3, #21
 80156cc:	d8f6      	bhi.n	80156bc <_printf_i+0x28>
 80156ce:	a101      	add	r1, pc, #4	; (adr r1, 80156d4 <_printf_i+0x40>)
 80156d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80156d4:	0801572d 	.word	0x0801572d
 80156d8:	08015741 	.word	0x08015741
 80156dc:	080156bd 	.word	0x080156bd
 80156e0:	080156bd 	.word	0x080156bd
 80156e4:	080156bd 	.word	0x080156bd
 80156e8:	080156bd 	.word	0x080156bd
 80156ec:	08015741 	.word	0x08015741
 80156f0:	080156bd 	.word	0x080156bd
 80156f4:	080156bd 	.word	0x080156bd
 80156f8:	080156bd 	.word	0x080156bd
 80156fc:	080156bd 	.word	0x080156bd
 8015700:	0801584d 	.word	0x0801584d
 8015704:	08015771 	.word	0x08015771
 8015708:	0801582f 	.word	0x0801582f
 801570c:	080156bd 	.word	0x080156bd
 8015710:	080156bd 	.word	0x080156bd
 8015714:	0801586f 	.word	0x0801586f
 8015718:	080156bd 	.word	0x080156bd
 801571c:	08015771 	.word	0x08015771
 8015720:	080156bd 	.word	0x080156bd
 8015724:	080156bd 	.word	0x080156bd
 8015728:	08015837 	.word	0x08015837
 801572c:	682b      	ldr	r3, [r5, #0]
 801572e:	1d1a      	adds	r2, r3, #4
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	602a      	str	r2, [r5, #0]
 8015734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801573c:	2301      	movs	r3, #1
 801573e:	e0a3      	b.n	8015888 <_printf_i+0x1f4>
 8015740:	6820      	ldr	r0, [r4, #0]
 8015742:	6829      	ldr	r1, [r5, #0]
 8015744:	0606      	lsls	r6, r0, #24
 8015746:	f101 0304 	add.w	r3, r1, #4
 801574a:	d50a      	bpl.n	8015762 <_printf_i+0xce>
 801574c:	680e      	ldr	r6, [r1, #0]
 801574e:	602b      	str	r3, [r5, #0]
 8015750:	2e00      	cmp	r6, #0
 8015752:	da03      	bge.n	801575c <_printf_i+0xc8>
 8015754:	232d      	movs	r3, #45	; 0x2d
 8015756:	4276      	negs	r6, r6
 8015758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801575c:	485e      	ldr	r0, [pc, #376]	; (80158d8 <_printf_i+0x244>)
 801575e:	230a      	movs	r3, #10
 8015760:	e019      	b.n	8015796 <_printf_i+0x102>
 8015762:	680e      	ldr	r6, [r1, #0]
 8015764:	602b      	str	r3, [r5, #0]
 8015766:	f010 0f40 	tst.w	r0, #64	; 0x40
 801576a:	bf18      	it	ne
 801576c:	b236      	sxthne	r6, r6
 801576e:	e7ef      	b.n	8015750 <_printf_i+0xbc>
 8015770:	682b      	ldr	r3, [r5, #0]
 8015772:	6820      	ldr	r0, [r4, #0]
 8015774:	1d19      	adds	r1, r3, #4
 8015776:	6029      	str	r1, [r5, #0]
 8015778:	0601      	lsls	r1, r0, #24
 801577a:	d501      	bpl.n	8015780 <_printf_i+0xec>
 801577c:	681e      	ldr	r6, [r3, #0]
 801577e:	e002      	b.n	8015786 <_printf_i+0xf2>
 8015780:	0646      	lsls	r6, r0, #25
 8015782:	d5fb      	bpl.n	801577c <_printf_i+0xe8>
 8015784:	881e      	ldrh	r6, [r3, #0]
 8015786:	4854      	ldr	r0, [pc, #336]	; (80158d8 <_printf_i+0x244>)
 8015788:	2f6f      	cmp	r7, #111	; 0x6f
 801578a:	bf0c      	ite	eq
 801578c:	2308      	moveq	r3, #8
 801578e:	230a      	movne	r3, #10
 8015790:	2100      	movs	r1, #0
 8015792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015796:	6865      	ldr	r5, [r4, #4]
 8015798:	60a5      	str	r5, [r4, #8]
 801579a:	2d00      	cmp	r5, #0
 801579c:	bfa2      	ittt	ge
 801579e:	6821      	ldrge	r1, [r4, #0]
 80157a0:	f021 0104 	bicge.w	r1, r1, #4
 80157a4:	6021      	strge	r1, [r4, #0]
 80157a6:	b90e      	cbnz	r6, 80157ac <_printf_i+0x118>
 80157a8:	2d00      	cmp	r5, #0
 80157aa:	d04d      	beq.n	8015848 <_printf_i+0x1b4>
 80157ac:	4615      	mov	r5, r2
 80157ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80157b2:	fb03 6711 	mls	r7, r3, r1, r6
 80157b6:	5dc7      	ldrb	r7, [r0, r7]
 80157b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80157bc:	4637      	mov	r7, r6
 80157be:	42bb      	cmp	r3, r7
 80157c0:	460e      	mov	r6, r1
 80157c2:	d9f4      	bls.n	80157ae <_printf_i+0x11a>
 80157c4:	2b08      	cmp	r3, #8
 80157c6:	d10b      	bne.n	80157e0 <_printf_i+0x14c>
 80157c8:	6823      	ldr	r3, [r4, #0]
 80157ca:	07de      	lsls	r6, r3, #31
 80157cc:	d508      	bpl.n	80157e0 <_printf_i+0x14c>
 80157ce:	6923      	ldr	r3, [r4, #16]
 80157d0:	6861      	ldr	r1, [r4, #4]
 80157d2:	4299      	cmp	r1, r3
 80157d4:	bfde      	ittt	le
 80157d6:	2330      	movle	r3, #48	; 0x30
 80157d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80157dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80157e0:	1b52      	subs	r2, r2, r5
 80157e2:	6122      	str	r2, [r4, #16]
 80157e4:	f8cd a000 	str.w	sl, [sp]
 80157e8:	464b      	mov	r3, r9
 80157ea:	aa03      	add	r2, sp, #12
 80157ec:	4621      	mov	r1, r4
 80157ee:	4640      	mov	r0, r8
 80157f0:	f7ff fee2 	bl	80155b8 <_printf_common>
 80157f4:	3001      	adds	r0, #1
 80157f6:	d14c      	bne.n	8015892 <_printf_i+0x1fe>
 80157f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80157fc:	b004      	add	sp, #16
 80157fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015802:	4835      	ldr	r0, [pc, #212]	; (80158d8 <_printf_i+0x244>)
 8015804:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015808:	6829      	ldr	r1, [r5, #0]
 801580a:	6823      	ldr	r3, [r4, #0]
 801580c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015810:	6029      	str	r1, [r5, #0]
 8015812:	061d      	lsls	r5, r3, #24
 8015814:	d514      	bpl.n	8015840 <_printf_i+0x1ac>
 8015816:	07df      	lsls	r7, r3, #31
 8015818:	bf44      	itt	mi
 801581a:	f043 0320 	orrmi.w	r3, r3, #32
 801581e:	6023      	strmi	r3, [r4, #0]
 8015820:	b91e      	cbnz	r6, 801582a <_printf_i+0x196>
 8015822:	6823      	ldr	r3, [r4, #0]
 8015824:	f023 0320 	bic.w	r3, r3, #32
 8015828:	6023      	str	r3, [r4, #0]
 801582a:	2310      	movs	r3, #16
 801582c:	e7b0      	b.n	8015790 <_printf_i+0xfc>
 801582e:	6823      	ldr	r3, [r4, #0]
 8015830:	f043 0320 	orr.w	r3, r3, #32
 8015834:	6023      	str	r3, [r4, #0]
 8015836:	2378      	movs	r3, #120	; 0x78
 8015838:	4828      	ldr	r0, [pc, #160]	; (80158dc <_printf_i+0x248>)
 801583a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801583e:	e7e3      	b.n	8015808 <_printf_i+0x174>
 8015840:	0659      	lsls	r1, r3, #25
 8015842:	bf48      	it	mi
 8015844:	b2b6      	uxthmi	r6, r6
 8015846:	e7e6      	b.n	8015816 <_printf_i+0x182>
 8015848:	4615      	mov	r5, r2
 801584a:	e7bb      	b.n	80157c4 <_printf_i+0x130>
 801584c:	682b      	ldr	r3, [r5, #0]
 801584e:	6826      	ldr	r6, [r4, #0]
 8015850:	6961      	ldr	r1, [r4, #20]
 8015852:	1d18      	adds	r0, r3, #4
 8015854:	6028      	str	r0, [r5, #0]
 8015856:	0635      	lsls	r5, r6, #24
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	d501      	bpl.n	8015860 <_printf_i+0x1cc>
 801585c:	6019      	str	r1, [r3, #0]
 801585e:	e002      	b.n	8015866 <_printf_i+0x1d2>
 8015860:	0670      	lsls	r0, r6, #25
 8015862:	d5fb      	bpl.n	801585c <_printf_i+0x1c8>
 8015864:	8019      	strh	r1, [r3, #0]
 8015866:	2300      	movs	r3, #0
 8015868:	6123      	str	r3, [r4, #16]
 801586a:	4615      	mov	r5, r2
 801586c:	e7ba      	b.n	80157e4 <_printf_i+0x150>
 801586e:	682b      	ldr	r3, [r5, #0]
 8015870:	1d1a      	adds	r2, r3, #4
 8015872:	602a      	str	r2, [r5, #0]
 8015874:	681d      	ldr	r5, [r3, #0]
 8015876:	6862      	ldr	r2, [r4, #4]
 8015878:	2100      	movs	r1, #0
 801587a:	4628      	mov	r0, r5
 801587c:	f7ea fcc0 	bl	8000200 <memchr>
 8015880:	b108      	cbz	r0, 8015886 <_printf_i+0x1f2>
 8015882:	1b40      	subs	r0, r0, r5
 8015884:	6060      	str	r0, [r4, #4]
 8015886:	6863      	ldr	r3, [r4, #4]
 8015888:	6123      	str	r3, [r4, #16]
 801588a:	2300      	movs	r3, #0
 801588c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015890:	e7a8      	b.n	80157e4 <_printf_i+0x150>
 8015892:	6923      	ldr	r3, [r4, #16]
 8015894:	462a      	mov	r2, r5
 8015896:	4649      	mov	r1, r9
 8015898:	4640      	mov	r0, r8
 801589a:	47d0      	blx	sl
 801589c:	3001      	adds	r0, #1
 801589e:	d0ab      	beq.n	80157f8 <_printf_i+0x164>
 80158a0:	6823      	ldr	r3, [r4, #0]
 80158a2:	079b      	lsls	r3, r3, #30
 80158a4:	d413      	bmi.n	80158ce <_printf_i+0x23a>
 80158a6:	68e0      	ldr	r0, [r4, #12]
 80158a8:	9b03      	ldr	r3, [sp, #12]
 80158aa:	4298      	cmp	r0, r3
 80158ac:	bfb8      	it	lt
 80158ae:	4618      	movlt	r0, r3
 80158b0:	e7a4      	b.n	80157fc <_printf_i+0x168>
 80158b2:	2301      	movs	r3, #1
 80158b4:	4632      	mov	r2, r6
 80158b6:	4649      	mov	r1, r9
 80158b8:	4640      	mov	r0, r8
 80158ba:	47d0      	blx	sl
 80158bc:	3001      	adds	r0, #1
 80158be:	d09b      	beq.n	80157f8 <_printf_i+0x164>
 80158c0:	3501      	adds	r5, #1
 80158c2:	68e3      	ldr	r3, [r4, #12]
 80158c4:	9903      	ldr	r1, [sp, #12]
 80158c6:	1a5b      	subs	r3, r3, r1
 80158c8:	42ab      	cmp	r3, r5
 80158ca:	dcf2      	bgt.n	80158b2 <_printf_i+0x21e>
 80158cc:	e7eb      	b.n	80158a6 <_printf_i+0x212>
 80158ce:	2500      	movs	r5, #0
 80158d0:	f104 0619 	add.w	r6, r4, #25
 80158d4:	e7f5      	b.n	80158c2 <_printf_i+0x22e>
 80158d6:	bf00      	nop
 80158d8:	08016e1e 	.word	0x08016e1e
 80158dc:	08016e2f 	.word	0x08016e2f

080158e0 <__retarget_lock_acquire_recursive>:
 80158e0:	4770      	bx	lr

080158e2 <__retarget_lock_release_recursive>:
 80158e2:	4770      	bx	lr

080158e4 <memmove>:
 80158e4:	4288      	cmp	r0, r1
 80158e6:	b510      	push	{r4, lr}
 80158e8:	eb01 0402 	add.w	r4, r1, r2
 80158ec:	d902      	bls.n	80158f4 <memmove+0x10>
 80158ee:	4284      	cmp	r4, r0
 80158f0:	4623      	mov	r3, r4
 80158f2:	d807      	bhi.n	8015904 <memmove+0x20>
 80158f4:	1e43      	subs	r3, r0, #1
 80158f6:	42a1      	cmp	r1, r4
 80158f8:	d008      	beq.n	801590c <memmove+0x28>
 80158fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015902:	e7f8      	b.n	80158f6 <memmove+0x12>
 8015904:	4402      	add	r2, r0
 8015906:	4601      	mov	r1, r0
 8015908:	428a      	cmp	r2, r1
 801590a:	d100      	bne.n	801590e <memmove+0x2a>
 801590c:	bd10      	pop	{r4, pc}
 801590e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015916:	e7f7      	b.n	8015908 <memmove+0x24>

08015918 <_realloc_r>:
 8015918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801591c:	4680      	mov	r8, r0
 801591e:	4614      	mov	r4, r2
 8015920:	460e      	mov	r6, r1
 8015922:	b921      	cbnz	r1, 801592e <_realloc_r+0x16>
 8015924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015928:	4611      	mov	r1, r2
 801592a:	f7ff bb25 	b.w	8014f78 <_malloc_r>
 801592e:	b92a      	cbnz	r2, 801593c <_realloc_r+0x24>
 8015930:	f7ff fab6 	bl	8014ea0 <_free_r>
 8015934:	4625      	mov	r5, r4
 8015936:	4628      	mov	r0, r5
 8015938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801593c:	f000 f81b 	bl	8015976 <_malloc_usable_size_r>
 8015940:	4284      	cmp	r4, r0
 8015942:	4607      	mov	r7, r0
 8015944:	d802      	bhi.n	801594c <_realloc_r+0x34>
 8015946:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801594a:	d812      	bhi.n	8015972 <_realloc_r+0x5a>
 801594c:	4621      	mov	r1, r4
 801594e:	4640      	mov	r0, r8
 8015950:	f7ff fb12 	bl	8014f78 <_malloc_r>
 8015954:	4605      	mov	r5, r0
 8015956:	2800      	cmp	r0, #0
 8015958:	d0ed      	beq.n	8015936 <_realloc_r+0x1e>
 801595a:	42bc      	cmp	r4, r7
 801595c:	4622      	mov	r2, r4
 801595e:	4631      	mov	r1, r6
 8015960:	bf28      	it	cs
 8015962:	463a      	movcs	r2, r7
 8015964:	f7ff fa70 	bl	8014e48 <memcpy>
 8015968:	4631      	mov	r1, r6
 801596a:	4640      	mov	r0, r8
 801596c:	f7ff fa98 	bl	8014ea0 <_free_r>
 8015970:	e7e1      	b.n	8015936 <_realloc_r+0x1e>
 8015972:	4635      	mov	r5, r6
 8015974:	e7df      	b.n	8015936 <_realloc_r+0x1e>

08015976 <_malloc_usable_size_r>:
 8015976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801597a:	1f18      	subs	r0, r3, #4
 801597c:	2b00      	cmp	r3, #0
 801597e:	bfbc      	itt	lt
 8015980:	580b      	ldrlt	r3, [r1, r0]
 8015982:	18c0      	addlt	r0, r0, r3
 8015984:	4770      	bx	lr
	...

08015988 <_init>:
 8015988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598a:	bf00      	nop
 801598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801598e:	bc08      	pop	{r3}
 8015990:	469e      	mov	lr, r3
 8015992:	4770      	bx	lr

08015994 <_fini>:
 8015994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015996:	bf00      	nop
 8015998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801599a:	bc08      	pop	{r3}
 801599c:	469e      	mov	lr, r3
 801599e:	4770      	bx	lr
